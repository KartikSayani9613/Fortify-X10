grammar srf.transpiler.fortxtrans.FortXTrans with org.eclipse.xtext.common.Terminals

generate fortXTrans "http://www.transpiler.srf/fortxtrans/FortXTrans"

Model:
	Component
	|API
;


Component:
	'component' name=ID (imports+=Import)* (exports+=Export)+ (decls+=Decls)* 'end'
;

API:
	'api' name=ID (imports+=Import)* /*(absDecls+=AbsDecls)**/ 'end'
;

Import:
	imps='import' importedNames=ImportedNames
	|imps='import' api='api' aliasedimportedNames=AliasedAPINames
	
;

Export:
	exp='export' exportedName+=QualifiedName
	|exp='export' brack='{' exportedName+=QualifiedName ("," exportedName+=QualifiedName)* '}'
;

ImportedNames:
	impname=QualifiedName '.' '{' DOTS '}' (except?='except' simp=SimpleNames)?
	|impname=QualifiedName '.' '{' simpList+=AliasedSimpleName (',' simpList+= AliasedSimpleName)* (comma?=',' dots?=DOTS)? '}'
	|impname=QualifiedName ('as' asname=ID)?
;

QualifiedName:
	s+=SimpleName ('.'s+=SimpleName)* (dots=DOTS)?
;

Qualified:
	QualifiedName
	|QualifiedNameTuple
;

QualifiedNameTuple:
	'('qlist+=QualifiedName (',' qlist+=QualifiedName)* ')'
;

SimpleNames:
	nameList+=SimpleName
	|brack='{' nameList+=SimpleName (',' nameList+=SimpleName)* '}'
;

SimpleName:
	name=ID
;

AliasedSimpleName:
	orig=ID ('as' asName=ID)?
;

AliasedAPINames:
	nameList+=AliasedAPIName
	|brack='{' nameList+=AliasedAPIName (',' nameList+=AliasedAPIName)* '}'
;

AliasedAPIName:
	orig=QualifiedName ('as' asName=ID)?
;

Decls:
	(decls+=Decl)+
;

Decl:
	function=FnDecl
	|field=FieldDecl
//	|object=ObjDecl
//	|trait=TraitDecl
;

FnMods:
	(mods+=FnMod)+
;

FnMod:
	modtype='private'
	|modtype='test'
	|modtype='atomic'
	|modtype='io'
;

ValParam:
	params+=Param
	 |brack='(' (params+=Param (',' params+=Param)*)? ')'
;

Param:
	parId=QualifiedName istype=IsType
;

RetType:
	':' empty='(' ')'
	|':' type=SimpleName
;

TupleType:
	'(' types+=SimpleName (',' types+=SimpleName)* ')'
;

FnDecl:
	(mods=FnMods)? name=ID params=ValParam (retVal=RetType)? (body?='=' fnItself=Stmnts)?
;


Stmnts:
	front=Stmnt
	|'(''|' delims=StmntList '|'')'
	|locVar=LocalVarDecl
	|exp=Expr
;

Stmnt:
	delim=DelimitedExpr
;

StmntList:
	delim+=Stmnt (',' delim+=Stmnt)*
;

Expr:
	Or (tail+=ExprTail)*
//	|'(' CommaExpr (tail+=ExprTail)* ')'
	
;

Or returns Expr:
	And ({Or.left=current} 'OR' right=And)*
;

And returns Expr:
	Equality ({And.left=current} "AND" right=Equality)* 
;

Equality returns Expr:
	Comparison ({Equality.left=current} op=("==="|"=/="|"EQ"|"NE") right=Comparison)* 
;

Comparison returns Expr:
AddExpr ({Comparison.left=current} op=(">="|"<="|">"|"<"|"LT"|"GT"|"LE"|"GE")right=AddExpr)* ;

AddExpr returns Expr:
	SubExpr ({AddExpr.left=current}'+' right=SubExpr)*
;

SubExpr returns Expr:
	DivExpr ({SubExpr.left=current}'-' right=DivExpr)*
;

DivExpr returns Expr:
	MultExpr ({DivExpr.left=current}'/' right=MultExpr)*
;

MultExpr returns Expr:
	ExponentExpr ({MultExpr.left=current} '*' right=ExponentExpr)*
;



ExponentExpr returns Expr:
	Primary ({ExponentExpr.left=current} op='^' right=Primary)*
;

Primary returns Expr:
	LiteralTuple ({Assop.left=current}(op=':=' right=Expr))? ({FCall.left=current} '('right= ExprList?')')?
	|{Not} '!' expression=Primary
	|{Neg} '-' expression=Primary
	|{Paran}'('exp=ExprList')'
;

ExprList:
	exps=Expr (',' exp+=Expr)*
;


ExprTail:
	'as' type=SimpleName
;

DelimitedExpr :
	dod=Do
	|ret='return' block=BlockElem
	|awhile='while' expr=Expr  whiledod=Do
	|afor='for' gen=Generators dofront=DoFront 'end'
	|anif='if' cond=Expr 'then' blocks=BlockElems (elifs=Elifs)? (els=Else)? 'end'
;

Elifs:
	e+=Elif (e+=Elif)*
;

Elif:
	'elif' expr=Expr 'then' block=BlockElems
;

Else:
	'else' block=BlockElems
;

Generators:
	binding=Binding (',' clause+=GenClause)*
;

Binding:
	idtup=Qualified '<-' g=GenSource
	|idtup=Qualified '<-' seq='seq' '('g=GenSource')'
;

GenSource:
	Expr ({GenSource.start=current}'#' end=Expr)?
;

GenClause:
	binding=Binding
	|expr=Expr
;

BlockElems:
	block+=BlockElem (block+=BlockElem)*
;

BlockElem:
	st=Stmnts
//	|locVar+=LocalVarDecl
;

Do:
	dofs+=DoFront ('also' dofs+=DoFront)* "end"
;

DoFront:
	(at?='at' exp=Expr)? (atom?='atomic')? 'do' block=BlockElems
;


IsType:
	':' type=SimpleName
;
//For a field Decl, If you 'var' has been used it will be mutable. 
//If 'var' has not been used check '=' for immutable and ':=' for mutable.
FieldDecl:
	(pri='private')? (mut='var')? vars=NoNewlineVarWTypes ('=' init=Expr)?
	|(pri='private')? idtup=Qualified '=' (init=Expr)?
	|(pri='private')? (mut='var')? idtup=Qualified ':' type=SimpleName DOTS ('=' init=Expr)?
	|(pri='private')? (mut='var')? idtup=Qualified ':' tuptype=TupleType ('=' init=Expr)?
;

NoNewlineVarWTypes:
	single=NoNewlineVarWType
	| "(" multiple+=NoNewlineVarWType ( "," multiple+=NoNewlineVarWType)+ ")"
;
NoNewlineVarWType:
	bid=QualifiedName istype=IsType
;

LiteralTuple:
	LiteralTup
	|Qualified
;

LiteralTup:
	Literal
	|LiteralList
;

LiteralList:
	'(' lit+=Literal (',' lit+=Literal)* ')'
;

Literal:
	{IntConst}value=INT
	|{FloatConst}value=FLOAT
	|{StrConst}value=STRING
	|{BoolConst}(value='true'|value='false')
;

LocalVarDecl:
	(mut='var')? vars=NoNewlineVarWTypes '=' init=Expr
	|idtup=Qualified '=' init=Expr
	|(mut='var')? idtup=Qualified ':' type=SimpleName DOTS "=" init=Expr
	|(mut='var')? idtup=Qualified ':' tuptype=TupleType '=' init=Expr
;

@Override 
terminal ML_COMMENT:
	'(*' -> '*)'
;

terminal FLOAT:
	INT'.'INT
;

terminal DOTS:
	'...'
;
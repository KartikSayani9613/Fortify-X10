/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import srf.transpiler.fortxtrans.fortXTrans.Binding;
import srf.transpiler.fortxtrans.fortXTrans.BlockElems;
import srf.transpiler.fortxtrans.fortXTrans.Component;
import srf.transpiler.fortxtrans.fortXTrans.Decl;
import srf.transpiler.fortxtrans.fortXTrans.Decls;
import srf.transpiler.fortxtrans.fortXTrans.DelimitedExpr;
import srf.transpiler.fortxtrans.fortXTrans.Do;
import srf.transpiler.fortxtrans.fortXTrans.DoFront;
import srf.transpiler.fortxtrans.fortXTrans.Elif;
import srf.transpiler.fortxtrans.fortXTrans.Elifs;
import srf.transpiler.fortxtrans.fortXTrans.Else;
import srf.transpiler.fortxtrans.fortXTrans.Export;
import srf.transpiler.fortxtrans.fortXTrans.Expr;
import srf.transpiler.fortxtrans.fortXTrans.ExprFront;
import srf.transpiler.fortxtrans.fortXTrans.ExprTail;
import srf.transpiler.fortxtrans.fortXTrans.FieldDecl;
import srf.transpiler.fortxtrans.fortXTrans.FnDecl;
import srf.transpiler.fortxtrans.fortXTrans.FnMod;
import srf.transpiler.fortxtrans.fortXTrans.FnMods;
import srf.transpiler.fortxtrans.fortXTrans.GenClause;
import srf.transpiler.fortxtrans.fortXTrans.Import;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTuple;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWType;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWTypes;
import srf.transpiler.fortxtrans.fortXTrans.Param;
import srf.transpiler.fortxtrans.fortXTrans.RetType;
import srf.transpiler.fortxtrans.fortXTrans.TupleType;
import srf.transpiler.fortxtrans.fortXTrans.Type;
import srf.transpiler.fortxtrans.fortXTrans.ValParam;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FortXTransGenerator extends AbstractGenerator {
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Component> _filter = Iterables.<Component>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Component.class);
    for (final Component c : _filter) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(c).toString("/");
      String _plus = (_string + ".x10");
      fsa.generateFile(_plus, 
        this.compile(c));
    }
  }
  
  public CharSequence compile(final Component c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import x10.io.console;");
    _builder.newLine();
    _builder.append("import x10.lang.Math;");
    _builder.newLine();
    _builder.append("import x10.array.Array_1;");
    _builder.newLine();
    _builder.append("import x10.array.Array_2;");
    _builder.newLine();
    _builder.append("import x10.array.Array_3;");
    _builder.newLine();
    _builder.append("/*needs to import");
    _builder.newLine();
    {
      EList<Import> _imports = c.getImports();
      for(final Import i : _imports) {
        CharSequence _compile = this.compile(i);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("*/");
    _builder.newLine();
    _builder.append("/*exports");
    _builder.newLine();
    {
      EList<Export> _exports = c.getExports();
      for(final Export e : _exports) {
        CharSequence _compile_1 = this.compile(e);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Decls> _decls = c.getDecls();
      for(final Decls d : _decls) {
        _builder.append("\t");
        CharSequence _compile_2 = this.compile(d);
        _builder.append(_compile_2, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Import i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _api = i.getApi();
      boolean _tripleEquals = (_api == null);
      if (_tripleEquals) {
        String _imps = i.getImps();
        _builder.append(_imps);
        _builder.append(" ");
        String _impname = i.getImportedNames().getImpname();
        _builder.append(_impname);
        {
          String _asname = i.getImportedNames().getAsname();
          boolean _tripleNotEquals = (_asname != null);
          if (_tripleNotEquals) {
            _builder.append("as ");
            String _asname_1 = i.getImportedNames().getAsname();
            _builder.append(_asname_1);
          } else {
            {
              int _length = ((Object[])Conversions.unwrapArray(i.getImportedNames().getSimpList(), Object.class)).length;
              boolean _notEquals = (_length != 0);
              if (_notEquals) {
                _builder.append(".{");
                {
                  int _length_1 = ((Object[])Conversions.unwrapArray(i.getImportedNames().getSimpList(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length_1, true);
                  for(final Integer s : _doubleDotLessThan) {
                    {
                      if (((s).intValue() == 0)) {
                        String _orig = i.getImportedNames().getSimpList().get((s).intValue()).getOrig();
                        _builder.append(_orig);
                      } else {
                        _builder.append(", ");
                        String _orig_1 = i.getImportedNames().getSimpList().get((s).intValue()).getOrig();
                        _builder.append(_orig_1);
                      }
                    }
                    {
                      String _asName = i.getImportedNames().getSimpList().get((s).intValue()).getAsName();
                      boolean _tripleNotEquals_1 = (_asName != null);
                      if (_tripleNotEquals_1) {
                        _builder.append(" as ");
                        String _asName_1 = i.getImportedNames().getSimpList().get((s).intValue()).getAsName();
                        _builder.append(_asName_1);
                      }
                    }
                  }
                }
                {
                  boolean _isComma = i.getImportedNames().isComma();
                  if (_isComma) {
                    _builder.append(" , ... ");
                  }
                }
                _builder.append("}");
              } else {
                _builder.append(".{...}");
                {
                  boolean _isExcept = i.getImportedNames().isExcept();
                  if (_isExcept) {
                    _builder.append(" except ");
                    {
                      String _brack = i.getImportedNames().getSimp().getBrack();
                      boolean _tripleNotEquals_2 = (_brack != null);
                      if (_tripleNotEquals_2) {
                        _builder.append("{");
                        {
                          int _length_2 = ((Object[])Conversions.unwrapArray(i.getImportedNames().getSimp().getNameList(), Object.class)).length;
                          ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_2, true);
                          for(final Integer s_1 : _doubleDotLessThan_1) {
                            {
                              if (((s_1).intValue() == 0)) {
                                String _name = i.getImportedNames().getSimp().getNameList().get((s_1).intValue()).getName();
                                _builder.append(_name);
                              } else {
                                _builder.append(", ");
                                String _name_1 = i.getImportedNames().getSimp().getNameList().get((s_1).intValue()).getName();
                                _builder.append(_name_1);
                              }
                            }
                          }
                        }
                        _builder.append("}");
                      } else {
                        String _name_2 = i.getImportedNames().getSimp().getNameList().get(0).getName();
                        _builder.append(_name_2);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        _builder.newLineIfNotEmpty();
        String _imps_1 = i.getImps();
        _builder.append(_imps_1);
        _builder.append(" ");
        String _api_1 = i.getApi();
        _builder.append(_api_1);
        _builder.append(" ");
        {
          String _brack_1 = i.getAliasedimportedNames().getBrack();
          boolean _tripleNotEquals_3 = (_brack_1 != null);
          if (_tripleNotEquals_3) {
            _builder.append("{");
            {
              int _length_3 = ((Object[])Conversions.unwrapArray(i.getAliasedimportedNames().getNameList(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_3, true);
              for(final Integer s_2 : _doubleDotLessThan_2) {
                {
                  if (((s_2).intValue() == 0)) {
                    String _orig_2 = i.getAliasedimportedNames().getNameList().get(0).getOrig();
                    _builder.append(_orig_2);
                  } else {
                    _builder.append(", ");
                    String _orig_3 = i.getAliasedimportedNames().getNameList().get(0).getOrig();
                    _builder.append(_orig_3);
                  }
                }
                {
                  String _asName_2 = i.getAliasedimportedNames().getNameList().get((s_2).intValue()).getAsName();
                  boolean _tripleNotEquals_4 = (_asName_2 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append(" as ");
                    String _asName_3 = i.getAliasedimportedNames().getNameList().get(0).getAsName();
                    _builder.append(_asName_3);
                  }
                }
              }
            }
            _builder.append("}");
          } else {
            String _orig_4 = i.getAliasedimportedNames().getNameList().get(0).getOrig();
            _builder.append(_orig_4);
            {
              String _asName_4 = i.getAliasedimportedNames().getNameList().get(0).getAsName();
              boolean _tripleNotEquals_5 = (_asName_4 != null);
              if (_tripleNotEquals_5) {
                _builder.append(" as ");
                String _asName_5 = i.getAliasedimportedNames().getNameList().get(0).getAsName();
                _builder.append(_asName_5);
              }
            }
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Export e) {
    StringConcatenation _builder = new StringConcatenation();
    String _exp = e.getExp();
    _builder.append(_exp);
    _builder.append(" ");
    {
      String _brack = e.getBrack();
      boolean _tripleNotEquals = (_brack != null);
      if (_tripleNotEquals) {
        _builder.append("{");
        {
          int _length = ((Object[])Conversions.unwrapArray(e.getExportedName(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
          for(final Integer s : _doubleDotLessThan) {
            {
              if (((s).intValue() == 0)) {
                String _get = e.getExportedName().get((s).intValue());
                _builder.append(_get);
              } else {
                _builder.append(", ");
                String _get_1 = e.getExportedName().get((s).intValue());
                _builder.append(_get_1);
              }
            }
          }
        }
        _builder.append("}");
      } else {
        String _get_2 = e.getExportedName().get(0);
        _builder.append(_get_2);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final ValParam p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = ((Object[])Conversions.unwrapArray(p.getParams(), Object.class)).length;
      boolean _equals = (_length == 0);
      if (_equals) {
      } else {
        {
          String _brack = p.getBrack();
          boolean _tripleEquals = (_brack == null);
          if (_tripleEquals) {
            Param _get = p.getParams().get(0);
            _builder.append(_get);
          } else {
            {
              int _length_1 = ((Object[])Conversions.unwrapArray(p.getParams(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length_1, true);
              for(final Integer s : _doubleDotLessThan) {
                {
                  if (((s).intValue() == 0)) {
                    String _bId = p.getParams().get((s).intValue()).getBId();
                    _builder.append(_bId);
                    _builder.append(":");
                  } else {
                    _builder.append(", ");
                    String _bId_1 = p.getParams().get((s).intValue()).getBId();
                    _builder.append(_bId_1);
                    _builder.append(":");
                  }
                }
                {
                  String _tname = p.getParams().get((s).intValue()).getIstype().getType().getTname();
                  boolean _equals_1 = Objects.equal(_tname, "ZZ32");
                  if (_equals_1) {
                    _builder.append("Int");
                  } else {
                    {
                      String _tname_1 = p.getParams().get((s).intValue()).getIstype().getType().getTname();
                      boolean _equals_2 = Objects.equal(_tname_1, "ZZ64");
                      if (_equals_2) {
                        _builder.append("Long");
                      } else {
                        {
                          String _tname_2 = p.getParams().get((s).intValue()).getIstype().getType().getTname();
                          boolean _equals_3 = Objects.equal(_tname_2, "RR32");
                          if (_equals_3) {
                            _builder.append("Float");
                          } else {
                            {
                              String _tname_3 = p.getParams().get((s).intValue()).getIstype().getType().getTname();
                              boolean _equals_4 = Objects.equal(_tname_3, "RR64");
                              if (_equals_4) {
                                _builder.append("Double");
                              } else {
                                {
                                  String _tname_4 = p.getParams().get((s).intValue()).getIstype().getType().getTname();
                                  boolean _equals_5 = Objects.equal(_tname_4, "String");
                                  if (_equals_5) {
                                    _builder.append("String");
                                  } else {
                                    String _tname_5 = p.getParams().get((s).intValue()).getIstype().getType().getTname();
                                    _builder.append(_tname_5);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Decls d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Decl> _decls = d.getDecls();
      for(final Decl dec : _decls) {
        CharSequence _compile = this.compile(dec);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Decl d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FnDecl _function = d.getFunction();
      boolean _tripleNotEquals = (_function != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(d.getFunction());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        {
          FieldDecl _field = d.getField();
          boolean _tripleNotEquals_1 = (_field != null);
          if (_tripleNotEquals_1) {
            CharSequence _compile_1 = this.compile(d.getField());
            _builder.append(_compile_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final FieldDecl f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      NoNewlineVarWTypes _vars = f.getVars();
      boolean _tripleNotEquals = (_vars != null);
      if (_tripleNotEquals) {
        {
          NoNewlineVarWType _single = f.getVars().getSingle();
          boolean _tripleNotEquals_1 = (_single != null);
          if (_tripleNotEquals_1) {
            {
              String _pri = f.getPri();
              boolean _tripleNotEquals_2 = (_pri != null);
              if (_tripleNotEquals_2) {
                _builder.append("private");
              }
            }
            _builder.append(" static ");
            {
              String _mut = f.getMut();
              boolean _tripleEquals = (_mut == null);
              if (_tripleEquals) {
                {
                  String _immut = f.getInit().getImmut();
                  boolean _tripleNotEquals_3 = (_immut != null);
                  if (_tripleNotEquals_3) {
                    _builder.append(" val ");
                  } else {
                    _builder.append("var ");
                  }
                }
              }
            }
            String _bid = f.getVars().getSingle().getBid();
            _builder.append(_bid);
            _builder.append(":");
            {
              String _tname = f.getVars().getSingle().getIstype().getType().getTname();
              boolean _equals = Objects.equal(_tname, "ZZ32");
              if (_equals) {
                _builder.append("Int = ");
                int _intg = f.getInit().getLit().getLit().getIntg();
                _builder.append(_intg);
                _builder.append("n;");
              } else {
                {
                  String _tname_1 = f.getVars().getSingle().getIstype().getType().getTname();
                  boolean _equals_1 = Objects.equal(_tname_1, "ZZ64");
                  if (_equals_1) {
                    _builder.append("Long = ");
                    int _intg_1 = f.getInit().getLit().getLit().getIntg();
                    _builder.append(_intg_1);
                    _builder.append("l;");
                  } else {
                    {
                      String _tname_2 = f.getVars().getSingle().getIstype().getType().getTname();
                      boolean _equals_2 = Objects.equal(_tname_2, "RR32");
                      if (_equals_2) {
                        _builder.append("Float = ");
                        String _flot = f.getInit().getLit().getLit().getFlot();
                        _builder.append(_flot);
                        _builder.append("f;");
                      } else {
                        {
                          String _tname_3 = f.getVars().getSingle().getIstype().getType().getTname();
                          boolean _equals_3 = Objects.equal(_tname_3, "RR64");
                          if (_equals_3) {
                            _builder.append("Double = ");
                            String _flot_1 = f.getInit().getLit().getLit().getFlot();
                            _builder.append(_flot_1);
                            _builder.append("d;");
                          } else {
                            {
                              String _tname_4 = f.getVars().getSingle().getIstype().getType().getTname();
                              boolean _equals_4 = Objects.equal(_tname_4, "String");
                              if (_equals_4) {
                                _builder.append("String = \"");
                                String _str = f.getInit().getLit().getLit().getStr();
                                _builder.append(_str);
                                _builder.append("\";");
                              } else {
                                String _tname_5 = f.getVars().getSingle().getIstype().getType().getTname();
                                _builder.append(_tname_5);
                                _builder.append(" = ");
                                int _intg_2 = f.getInit().getLit().getLit().getIntg();
                                _builder.append(_intg_2);
                                _builder.append(";");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            {
              int _length = ((Object[])Conversions.unwrapArray(f.getVars().getMultiple(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
              for(final Integer m : _doubleDotLessThan) {
                _builder.newLineIfNotEmpty();
                {
                  String _pri_1 = f.getPri();
                  boolean _tripleNotEquals_4 = (_pri_1 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append("private");
                  }
                }
                _builder.append(" static ");
                {
                  String _mut_1 = f.getMut();
                  boolean _tripleEquals_1 = (_mut_1 == null);
                  if (_tripleEquals_1) {
                    {
                      String _immut_1 = f.getInit().getImmut();
                      boolean _tripleNotEquals_5 = (_immut_1 != null);
                      if (_tripleNotEquals_5) {
                        _builder.append("val ");
                      } else {
                        _builder.append("var ");
                      }
                    }
                  }
                }
                String _bid_1 = f.getVars().getMultiple().get((m).intValue()).getBid();
                _builder.append(_bid_1);
                _builder.append(":");
                {
                  String _tname_6 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getTname();
                  boolean _equals_5 = Objects.equal(_tname_6, "ZZ32");
                  if (_equals_5) {
                    _builder.append("Int = ");
                    int _intg_3 = f.getInit().getLit().getLits().get((m).intValue()).getIntg();
                    _builder.append(_intg_3);
                    _builder.append("n;");
                  } else {
                    {
                      String _tname_7 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getTname();
                      boolean _equals_6 = Objects.equal(_tname_7, "ZZ64");
                      if (_equals_6) {
                        _builder.append("Long = ");
                        int _intg_4 = f.getInit().getLit().getLits().get((m).intValue()).getIntg();
                        _builder.append(_intg_4);
                        _builder.append("l;");
                      } else {
                        {
                          String _tname_8 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getTname();
                          boolean _equals_7 = Objects.equal(_tname_8, "RR32");
                          if (_equals_7) {
                            _builder.append("Float = ");
                            String _flot_2 = f.getInit().getLit().getLits().get((m).intValue()).getFlot();
                            _builder.append(_flot_2);
                            _builder.append("f;");
                          } else {
                            {
                              String _tname_9 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getTname();
                              boolean _equals_8 = Objects.equal(_tname_9, "RR64");
                              if (_equals_8) {
                                _builder.append("Double = ");
                                String _flot_3 = f.getInit().getLit().getLits().get((m).intValue()).getFlot();
                                _builder.append(_flot_3);
                                _builder.append("d;");
                              } else {
                                {
                                  String _tname_10 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getTname();
                                  boolean _equals_9 = Objects.equal(_tname_10, "String");
                                  if (_equals_9) {
                                    _builder.append("String = \"");
                                    String _str_1 = f.getInit().getLit().getLits().get((m).intValue()).getStr();
                                    _builder.append(_str_1);
                                    _builder.append("\";");
                                  } else {
                                    String _tname_11 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getTname();
                                    _builder.append(_tname_11);
                                    _builder.append(" = ");
                                    int _intg_5 = f.getInit().getLit().getLits().get((m).intValue()).getIntg();
                                    _builder.append(_intg_5);
                                    _builder.append(";");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        {
          Type _type = f.getType();
          boolean _tripleNotEquals_6 = (_type != null);
          if (_tripleNotEquals_6) {
            {
              int _length_1 = ((Object[])Conversions.unwrapArray(f.getIdtup().getBid(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_1, true);
              for(final Integer m_1 : _doubleDotLessThan_1) {
                {
                  String _pri_2 = f.getPri();
                  boolean _tripleNotEquals_7 = (_pri_2 != null);
                  if (_tripleNotEquals_7) {
                    _builder.append("private");
                  }
                }
                _builder.append(" static ");
                {
                  String _mut_2 = f.getMut();
                  boolean _tripleEquals_2 = (_mut_2 == null);
                  if (_tripleEquals_2) {
                    {
                      String _immut_2 = f.getInit().getImmut();
                      boolean _tripleNotEquals_8 = (_immut_2 != null);
                      if (_tripleNotEquals_8) {
                        _builder.append("val ");
                      } else {
                        _builder.append("var ");
                      }
                    }
                  }
                }
                String _get = f.getIdtup().getBid().get((m_1).intValue());
                _builder.append(_get);
                _builder.append(": ");
                {
                  String _tname_12 = f.getType().getTname();
                  boolean _equals_10 = Objects.equal(_tname_12, "ZZ32");
                  if (_equals_10) {
                    _builder.append("Int = ");
                    int _intg_6 = f.getInit().getLit().getLits().get((m_1).intValue()).getIntg();
                    _builder.append(_intg_6);
                    _builder.append("n;");
                  } else {
                    {
                      String _tname_13 = f.getType().getTname();
                      boolean _equals_11 = Objects.equal(_tname_13, "ZZ64");
                      if (_equals_11) {
                        _builder.append("Long = ");
                        int _intg_7 = f.getInit().getLit().getLits().get((m_1).intValue()).getIntg();
                        _builder.append(_intg_7);
                        _builder.append("l;");
                      } else {
                        {
                          String _tname_14 = f.getType().getTname();
                          boolean _equals_12 = Objects.equal(_tname_14, "RR32");
                          if (_equals_12) {
                            _builder.append("Float = ");
                            String _flot_4 = f.getInit().getLit().getLits().get((m_1).intValue()).getFlot();
                            _builder.append(_flot_4);
                            _builder.append("f;");
                          } else {
                            {
                              String _tname_15 = f.getType().getTname();
                              boolean _equals_13 = Objects.equal(_tname_15, "RR64");
                              if (_equals_13) {
                                _builder.append("Double = ");
                                String _flot_5 = f.getInit().getLit().getLits().get((m_1).intValue()).getFlot();
                                _builder.append(_flot_5);
                                _builder.append("d;");
                              } else {
                                {
                                  String _tname_16 = f.getType().getTname();
                                  boolean _equals_14 = Objects.equal(_tname_16, "String");
                                  if (_equals_14) {
                                    _builder.append("String = \"");
                                    String _str_2 = f.getInit().getLit().getLits().get((m_1).intValue()).getStr();
                                    _builder.append(_str_2);
                                    _builder.append("\";");
                                  } else {
                                    String _tname_17 = f.getType().getTname();
                                    _builder.append(_tname_17);
                                    _builder.append(" = ");
                                    int _intg_8 = f.getInit().getLit().getLits().get((m_1).intValue()).getIntg();
                                    _builder.append(_intg_8);
                                    _builder.append(";");
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            _builder.newLineIfNotEmpty();
          } else {
            {
              TupleType _tuptype = f.getTuptype();
              boolean _tripleNotEquals_9 = (_tuptype != null);
              if (_tripleNotEquals_9) {
                {
                  int _length_2 = ((Object[])Conversions.unwrapArray(f.getIdtup().getBid(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_2, true);
                  for(final Integer m_2 : _doubleDotLessThan_2) {
                    {
                      String _pri_3 = f.getPri();
                      boolean _tripleNotEquals_10 = (_pri_3 != null);
                      if (_tripleNotEquals_10) {
                        _builder.append("private");
                      }
                    }
                    _builder.append(" static ");
                    {
                      String _mut_3 = f.getMut();
                      boolean _tripleEquals_3 = (_mut_3 == null);
                      if (_tripleEquals_3) {
                        {
                          String _immut_3 = f.getInit().getImmut();
                          boolean _tripleNotEquals_11 = (_immut_3 != null);
                          if (_tripleNotEquals_11) {
                            _builder.append("val ");
                          } else {
                            _builder.append("var ");
                          }
                        }
                      }
                    }
                    String _get_1 = f.getIdtup().getBid().get((m_2).intValue());
                    _builder.append(_get_1);
                    _builder.append(": ");
                    {
                      String _tname_18 = f.getTuptype().getTypes().get((m_2).intValue()).getTname();
                      boolean _equals_15 = Objects.equal(_tname_18, "ZZ32");
                      if (_equals_15) {
                        _builder.append("Int = ");
                        int _intg_9 = f.getInit().getLit().getLits().get((m_2).intValue()).getIntg();
                        _builder.append(_intg_9);
                        _builder.append("n;");
                      } else {
                        {
                          String _tname_19 = f.getTuptype().getTypes().get((m_2).intValue()).getTname();
                          boolean _equals_16 = Objects.equal(_tname_19, "ZZ64");
                          if (_equals_16) {
                            _builder.append("Long = ");
                            int _intg_10 = f.getInit().getLit().getLits().get((m_2).intValue()).getIntg();
                            _builder.append(_intg_10);
                            _builder.append("l;");
                          } else {
                            {
                              String _tname_20 = f.getTuptype().getTypes().get((m_2).intValue()).getTname();
                              boolean _equals_17 = Objects.equal(_tname_20, "RR32");
                              if (_equals_17) {
                                _builder.append("Float = ");
                                String _flot_6 = f.getInit().getLit().getLits().get((m_2).intValue()).getFlot();
                                _builder.append(_flot_6);
                                _builder.append("f;");
                              } else {
                                {
                                  String _tname_21 = f.getTuptype().getTypes().get((m_2).intValue()).getTname();
                                  boolean _equals_18 = Objects.equal(_tname_21, "RR64");
                                  if (_equals_18) {
                                    _builder.append("Double = ");
                                    String _flot_7 = f.getInit().getLit().getLits().get((m_2).intValue()).getFlot();
                                    _builder.append(_flot_7);
                                    _builder.append("d;");
                                  } else {
                                    {
                                      String _tname_22 = f.getTuptype().getTypes().get((m_2).intValue()).getTname();
                                      boolean _equals_19 = Objects.equal(_tname_22, "String");
                                      if (_equals_19) {
                                        _builder.append("String = \"");
                                        String _str_3 = f.getInit().getLit().getLits().get((m_2).intValue()).getStr();
                                        _builder.append(_str_3);
                                        _builder.append("\";");
                                      } else {
                                        String _tname_23 = f.getTuptype().getTypes().get((m_2).intValue()).getTname();
                                        _builder.append(_tname_23);
                                        _builder.append(" = ");
                                        int _intg_11 = f.getInit().getLit().getLits().get((m_2).intValue()).getIntg();
                                        _builder.append(_intg_11);
                                        _builder.append(";");
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t");
              } else {
                {
                  LiteralTuple _litTup = f.getLitTup();
                  boolean _tripleNotEquals_12 = (_litTup != null);
                  if (_tripleNotEquals_12) {
                    {
                      int _length_3 = ((Object[])Conversions.unwrapArray(f.getIdtup().getBid(), Object.class)).length;
                      boolean _equals_20 = (_length_3 == 1);
                      if (_equals_20) {
                        {
                          String _pri_4 = f.getPri();
                          boolean _tripleNotEquals_13 = (_pri_4 != null);
                          if (_tripleNotEquals_13) {
                            _builder.append("private");
                          }
                        }
                        _builder.append(" static val ");
                        String _get_2 = f.getIdtup().getBid().get(0);
                        _builder.append(_get_2);
                        _builder.append(" = ");
                        {
                          String _flot_8 = f.getLitTup().getLit().getFlot();
                          boolean _tripleNotEquals_14 = (_flot_8 != null);
                          if (_tripleNotEquals_14) {
                            String _flot_9 = f.getLitTup().getLit().getFlot();
                            _builder.append(_flot_9);
                            _builder.append("f");
                          } else {
                            {
                              String _str_4 = f.getLitTup().getLit().getStr();
                              boolean _tripleNotEquals_15 = (_str_4 != null);
                              if (_tripleNotEquals_15) {
                                _builder.append("\"");
                                String _str_5 = f.getLitTup().getLit().getStr();
                                _builder.append(_str_5);
                                _builder.append("\"");
                              } else {
                                int _intg_12 = f.getLitTup().getLit().getIntg();
                                _builder.append(_intg_12);
                                _builder.append("n");
                              }
                            }
                          }
                        }
                        _builder.append(";");
                      } else {
                        {
                          int _length_4 = ((Object[])Conversions.unwrapArray(f.getIdtup().getBid(), Object.class)).length;
                          ExclusiveRange _doubleDotLessThan_3 = new ExclusiveRange(0, _length_4, true);
                          for(final Integer m_3 : _doubleDotLessThan_3) {
                            {
                              String _pri_5 = f.getPri();
                              boolean _tripleNotEquals_16 = (_pri_5 != null);
                              if (_tripleNotEquals_16) {
                                _builder.append("private");
                              }
                            }
                            _builder.append(" static val ");
                            String _get_3 = f.getIdtup().getBid().get((m_3).intValue());
                            _builder.append(_get_3);
                            _builder.append(" = ");
                            {
                              String _flot_10 = f.getLitTup().getLits().get((m_3).intValue()).getFlot();
                              boolean _tripleNotEquals_17 = (_flot_10 != null);
                              if (_tripleNotEquals_17) {
                                String _flot_11 = f.getLitTup().getLits().get((m_3).intValue()).getFlot();
                                _builder.append(_flot_11);
                                _builder.append("f");
                              } else {
                                {
                                  String _str_6 = f.getLitTup().getLits().get((m_3).intValue()).getStr();
                                  boolean _tripleNotEquals_18 = (_str_6 != null);
                                  if (_tripleNotEquals_18) {
                                    _builder.append("\"");
                                    String _str_7 = f.getLitTup().getLits().get((m_3).intValue()).getStr();
                                    _builder.append(_str_7);
                                    _builder.append("\"");
                                  } else {
                                    int _intg_13 = f.getLitTup().getLits().get((m_3).intValue()).getIntg();
                                    _builder.append(_intg_13);
                                    _builder.append("n");
                                  }
                                }
                              }
                            }
                            _builder.append(";");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final FnDecl f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _name = f.getName();
      boolean _equals = Objects.equal(_name, "run");
      if (_equals) {
        _builder.append("public static def main(args:Rail[String])");
      } else {
        {
          FnMods _mods = f.getMods();
          boolean _tripleNotEquals = (_mods != null);
          if (_tripleNotEquals) {
            {
              EList<FnMod> _mods_1 = f.getMods().getMods();
              for(final FnMod mod : _mods_1) {
                String _modtype = mod.getModtype();
                _builder.append(_modtype);
              }
            }
          }
        }
        _builder.append(" static def ");
        String _name_1 = f.getName();
        _builder.append(_name_1);
        _builder.append("(");
        {
          ValParam _params = f.getParams();
          boolean _tripleNotEquals_1 = (_params != null);
          if (_tripleNotEquals_1) {
            CharSequence _compile = this.compile(f.getParams());
            _builder.append(_compile);
          }
        }
        _builder.append(")");
        {
          RetType _retVal = f.getRetVal();
          boolean _tripleNotEquals_2 = (_retVal != null);
          if (_tripleNotEquals_2) {
            _builder.append(":");
            {
              String _empty = f.getRetVal().getEmpty();
              boolean _equals_1 = Objects.equal(_empty, "(");
              if (_equals_1) {
                _builder.append("void");
              } else {
                {
                  String _tname = f.getRetVal().getType().getTname();
                  boolean _equals_2 = Objects.equal(_tname, "ZZ32");
                  if (_equals_2) {
                    _builder.append("Int");
                  } else {
                    {
                      String _tname_1 = f.getRetVal().getType().getTname();
                      boolean _equals_3 = Objects.equal(_tname_1, "ZZ64");
                      if (_equals_3) {
                        _builder.append("Long");
                      } else {
                        {
                          String _tname_2 = f.getRetVal().getType().getTname();
                          boolean _equals_4 = Objects.equal(_tname_2, "RR32");
                          if (_equals_4) {
                            _builder.append("Float");
                          } else {
                            {
                              String _tname_3 = f.getRetVal().getType().getTname();
                              boolean _equals_5 = Objects.equal(_tname_3, "RR64");
                              if (_equals_5) {
                                _builder.append("Double");
                              } else {
                                {
                                  String _tname_4 = f.getRetVal().getType().getTname();
                                  boolean _equals_6 = Objects.equal(_tname_4, "String");
                                  if (_equals_6) {
                                    _builder.append("String");
                                  } else {
                                    String _tname_5 = f.getRetVal().getType().getTname();
                                    _builder.append(_tname_5);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.append("{\t");
    _builder.newLineIfNotEmpty();
    {
      boolean _isBody = f.isBody();
      if (_isBody) {
        String _compile_1 = this.compile(f.getFnItself());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public String compile(final Expr e) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(e.getFront());
    _builder.append(_compile);
    {
      EList<ExprTail> _tails = e.getTails();
      boolean _tripleNotEquals = (_tails != null);
      if (_tripleNotEquals) {
        {
          EList<ExprTail> _tails_1 = e.getTails();
          for(final ExprTail t : _tails_1) {
            CharSequence _compile_1 = this.compile(t);
            _builder.append(_compile_1);
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence compile(final ExprTail t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("as ");
    Type _type = t.getType();
    _builder.append(_type, " ");
    return _builder;
  }
  
  public CharSequence compile(final ExprFront ef) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _id = ef.getId();
      boolean _tripleNotEquals = (_id != null);
      if (_tripleNotEquals) {
        String _id_1 = ef.getId();
        _builder.append(_id_1);
      } else {
        {
          DelimitedExpr _delim = ef.getDelim();
          boolean _tripleNotEquals_1 = (_delim != null);
          if (_tripleNotEquals_1) {
            CharSequence _compile = this.compile(ef.getDelim());
            _builder.append(_compile);
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final DelimitedExpr d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Do _dod = d.getDod();
      boolean _tripleNotEquals = (_dod != null);
      if (_tripleNotEquals) {
        CharSequence _compile = this.compile(d.getDod());
        _builder.append(_compile);
      } else {
        _builder.newLineIfNotEmpty();
        {
          String _awhile = d.getAwhile();
          boolean _tripleNotEquals_1 = (_awhile != null);
          if (_tripleNotEquals_1) {
            _builder.append("while(");
            String _compile_1 = this.compile(d.getExpr());
            _builder.append(_compile_1);
            _builder.append(")");
            CharSequence _compile_2 = this.compile(d.getWhiledod());
            _builder.append(_compile_2);
            _builder.newLineIfNotEmpty();
          } else {
            {
              String _afor = d.getAfor();
              boolean _tripleNotEquals_2 = (_afor != null);
              if (_tripleNotEquals_2) {
                {
                  String _seq = d.getGen().getBinding().getSeq();
                  boolean _tripleEquals = (_seq == null);
                  if (_tripleEquals) {
                    _builder.append("finish ");
                  }
                }
                _builder.append("for(");
                CharSequence _compile_3 = this.compile(d.getGen().getBinding());
                _builder.append(_compile_3);
                _builder.append(" in ");
                String _compile_4 = this.compile(d.getGen().getBinding().getExpr());
                _builder.append(_compile_4);
                _builder.append(")");
                {
                  String _seq_1 = d.getGen().getBinding().getSeq();
                  boolean _tripleEquals_1 = (_seq_1 == null);
                  if (_tripleEquals_1) {
                    _builder.newLineIfNotEmpty();
                    _builder.append("async ");
                  }
                }
                {
                  EList<GenClause> _clause = d.getGen().getClause();
                  boolean _tripleNotEquals_3 = (_clause != null);
                  if (_tripleNotEquals_3) {
                    {
                      EList<GenClause> _clause_1 = d.getGen().getClause();
                      for(final GenClause c : _clause_1) {
                        _builder.append("{");
                        _builder.newLineIfNotEmpty();
                        {
                          String _seq_2 = c.getBinding().getSeq();
                          boolean _tripleEquals_2 = (_seq_2 == null);
                          if (_tripleEquals_2) {
                            _builder.append("\t");
                            _builder.append("finish ");
                          }
                        }
                        _builder.append("for(");
                        CharSequence _compile_5 = this.compile(c.getBinding());
                        _builder.append(_compile_5, "\t");
                        _builder.append(" in ");
                        String _compile_6 = this.compile(c.getBinding().getExpr());
                        _builder.append(_compile_6, "\t");
                        _builder.append(")");
                        {
                          String _seq_3 = c.getBinding().getSeq();
                          boolean _tripleEquals_3 = (_seq_3 == null);
                          if (_tripleEquals_3) {
                            _builder.newLineIfNotEmpty();
                            _builder.append("\t");
                            _builder.append("async ");
                          }
                        }
                      }
                    }
                    CharSequence _compile_7 = this.compile(d.getDofront());
                    _builder.append(_compile_7);
                    {
                      int _length = ((Object[])Conversions.unwrapArray(d.getGen().getClause(), Object.class)).length;
                      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
                      for(final Integer c_1 : _doubleDotLessThan) {
                        _builder.newLineIfNotEmpty();
                        _builder.append("}");
                      }
                    }
                  } else {
                    CharSequence _compile_8 = this.compile(d.getDofront());
                    _builder.append(_compile_8);
                  }
                }
                _builder.newLineIfNotEmpty();
              } else {
                {
                  String _anif = d.getAnif();
                  boolean _tripleNotEquals_4 = (_anif != null);
                  if (_tripleNotEquals_4) {
                    _builder.append("if(");
                    String _compile_9 = this.compile(d.getCond());
                    _builder.append(_compile_9);
                    _builder.append(") ");
                    CharSequence _compile_10 = this.compile(d.getBlock());
                    _builder.append(_compile_10);
                    {
                      Elifs _elifs = d.getElifs();
                      boolean _tripleNotEquals_5 = (_elifs != null);
                      if (_tripleNotEquals_5) {
                        CharSequence _compile_11 = this.compile(d.getElifs());
                        _builder.append(_compile_11);
                      }
                    }
                    {
                      Else _els = d.getEls();
                      boolean _tripleNotEquals_6 = (_els != null);
                      if (_tripleNotEquals_6) {
                        _builder.newLineIfNotEmpty();
                        _builder.append("else ");
                        _builder.newLine();
                        _builder.append("\t");
                        CharSequence _compile_12 = this.compile(d.getEls().getBlock());
                        _builder.append(_compile_12, "\t");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  } else {
                    {
                      Expr _par = d.getPar();
                      boolean _tripleNotEquals_7 = (_par != null);
                      if (_tripleNotEquals_7) {
                        _builder.append("(");
                        Expr _exp = d.getPar().getExp();
                        _builder.append(_exp);
                        _builder.append(")");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Elifs el) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Elif> _e = el.getE();
      for(final Elif e : _e) {
        _builder.append("else if(");
        String _compile = this.compile(e.getExpr());
        _builder.append(_compile);
        _builder.append(")");
        CharSequence _compile_1 = this.compile(e.getBlock());
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Binding b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = ((Object[])Conversions.unwrapArray(b.getIdtup().getBid(), Object.class)).length;
      boolean _equals = (_length == 1);
      if (_equals) {
        String _get = b.getIdtup().getBid().get(0);
        _builder.append(_get);
      } else {
        EList<String> _bid = b.getIdtup().getBid();
        _builder.append(_bid);
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Do dobox) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = ((Object[])Conversions.unwrapArray(dobox.getDofs(), Object.class)).length;
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
      for(final Integer d : _doubleDotLessThan) {
        {
          if (((d).intValue() != 0)) {
            _builder.append("async ");
          }
        }
        CharSequence _compile = this.compile(dobox.getDofs().get((d).intValue()));
        _builder.append(_compile);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final DoFront dof) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isAt = dof.isAt();
      if (_isAt) {
        _builder.append("at(");
        String _compile = this.compile(dof.getExp());
        _builder.append(_compile);
        _builder.append(") ");
      }
    }
    {
      boolean _isAtom = dof.isAtom();
      if (_isAtom) {
        _builder.append("atomic ");
      }
    }
    CharSequence _compile_1 = this.compile(dof.getBlock());
    _builder.append(_compile_1);
    return _builder;
  }
  
  public CharSequence compile(final BlockElems bs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = ((Object[])Conversions.unwrapArray(bs.getBlock(), Object.class)).length;
      boolean _equals = (_length == 1);
      if (_equals) {
        _builder.newLineIfNotEmpty();
        String _compile = this.compile(bs.getBlock().get(0).getExp());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        _builder.append("{");
        _builder.newLine();
        {
          int _length_1 = ((Object[])Conversions.unwrapArray(bs.getBlock(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length_1, true);
          for(final Integer b : _doubleDotLessThan) {
            String _compile_1 = this.compile(bs.getBlock().get((b).intValue()).getExp());
            _builder.append(_compile_1);
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
          }
        }
        _builder.append("}");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}

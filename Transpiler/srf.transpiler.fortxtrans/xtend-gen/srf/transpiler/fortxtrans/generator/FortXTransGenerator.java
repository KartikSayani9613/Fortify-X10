/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import srf.transpiler.fortxtrans.fortXTrans.AddExpr;
import srf.transpiler.fortxtrans.fortXTrans.And;
import srf.transpiler.fortxtrans.fortXTrans.Assop;
import srf.transpiler.fortxtrans.fortXTrans.Binding;
import srf.transpiler.fortxtrans.fortXTrans.BlockElem;
import srf.transpiler.fortxtrans.fortXTrans.BlockElems;
import srf.transpiler.fortxtrans.fortXTrans.BoolConst;
import srf.transpiler.fortxtrans.fortXTrans.Comparison;
import srf.transpiler.fortxtrans.fortXTrans.Component;
import srf.transpiler.fortxtrans.fortXTrans.Decl;
import srf.transpiler.fortxtrans.fortXTrans.Decls;
import srf.transpiler.fortxtrans.fortXTrans.DelimitedExpr;
import srf.transpiler.fortxtrans.fortXTrans.DivExpr;
import srf.transpiler.fortxtrans.fortXTrans.Do;
import srf.transpiler.fortxtrans.fortXTrans.DoFront;
import srf.transpiler.fortxtrans.fortXTrans.Elif;
import srf.transpiler.fortxtrans.fortXTrans.Elifs;
import srf.transpiler.fortxtrans.fortXTrans.Else;
import srf.transpiler.fortxtrans.fortXTrans.Equality;
import srf.transpiler.fortxtrans.fortXTrans.ExponentExpr;
import srf.transpiler.fortxtrans.fortXTrans.Export;
import srf.transpiler.fortxtrans.fortXTrans.Expr;
import srf.transpiler.fortxtrans.fortXTrans.ExprList;
import srf.transpiler.fortxtrans.fortXTrans.ExprTail;
import srf.transpiler.fortxtrans.fortXTrans.FCall;
import srf.transpiler.fortxtrans.fortXTrans.FieldDecl;
import srf.transpiler.fortxtrans.fortXTrans.FloatConst;
import srf.transpiler.fortxtrans.fortXTrans.FnDecl;
import srf.transpiler.fortxtrans.fortXTrans.FnMod;
import srf.transpiler.fortxtrans.fortXTrans.FnMods;
import srf.transpiler.fortxtrans.fortXTrans.GenClause;
import srf.transpiler.fortxtrans.fortXTrans.GenSource;
import srf.transpiler.fortxtrans.fortXTrans.Import;
import srf.transpiler.fortxtrans.fortXTrans.IntConst;
import srf.transpiler.fortxtrans.fortXTrans.Literal;
import srf.transpiler.fortxtrans.fortXTrans.LiteralList;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTup;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTuple;
import srf.transpiler.fortxtrans.fortXTrans.LocalVarDecl;
import srf.transpiler.fortxtrans.fortXTrans.MultExpr;
import srf.transpiler.fortxtrans.fortXTrans.Neg;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWType;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWTypes;
import srf.transpiler.fortxtrans.fortXTrans.Not;
import srf.transpiler.fortxtrans.fortXTrans.Or;
import srf.transpiler.fortxtrans.fortXTrans.Param;
import srf.transpiler.fortxtrans.fortXTrans.Paran;
import srf.transpiler.fortxtrans.fortXTrans.Qualified;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedName;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedNameTuple;
import srf.transpiler.fortxtrans.fortXTrans.RetType;
import srf.transpiler.fortxtrans.fortXTrans.SimpleName;
import srf.transpiler.fortxtrans.fortXTrans.Stmnt;
import srf.transpiler.fortxtrans.fortXTrans.StmntList;
import srf.transpiler.fortxtrans.fortXTrans.Stmnts;
import srf.transpiler.fortxtrans.fortXTrans.StrConst;
import srf.transpiler.fortxtrans.fortXTrans.SubExpr;
import srf.transpiler.fortxtrans.fortXTrans.TupleType;
import srf.transpiler.fortxtrans.fortXTrans.ValParam;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class FortXTransGenerator extends AbstractGenerator {
  public String remlast(final String s) {
    int _length = s.length();
    int _minus = (_length - 1);
    return s.substring(0, _minus);
  }
  
  @Inject
  @Extension
  private IQualifiedNameProvider _iQualifiedNameProvider;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<Component> _filter = Iterables.<Component>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Component.class);
    for (final Component c : _filter) {
      String _string = this._iQualifiedNameProvider.getFullyQualifiedName(c).toString("/");
      String _plus = (_string + ".x10");
      fsa.generateFile(_plus, 
        this.compile(c));
    }
  }
  
  public String compile(final Component c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import x10.io.Console;");
    _builder.newLine();
    _builder.append("import x10.lang.Math;");
    _builder.newLine();
    _builder.append("import x10.array.Array_1;");
    _builder.newLine();
    _builder.append("import x10.array.Array_2;");
    _builder.newLine();
    _builder.append("import x10.array.Array_3;");
    _builder.newLine();
    _builder.append("import x10.util.Random;");
    _builder.newLine();
    _builder.append("/*needs to import");
    _builder.newLine();
    {
      EList<Import> _imports = c.getImports();
      for(final Import i : _imports) {
        CharSequence _compile = this.compile(i);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("*/");
    _builder.newLine();
    _builder.append("/*exports");
    _builder.newLine();
    {
      EList<Export> _exports = c.getExports();
      for(final Export e : _exports) {
        CharSequence _compile_1 = this.compile(e);
        _builder.append(_compile_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = c.getName();
    _builder.append(_name);
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Decls> _decls = c.getDecls();
      for(final Decls d : _decls) {
        _builder.append("\t");
        CharSequence _compile_2 = this.compile(d);
        _builder.append(_compile_2, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("public static def println[T](x:T){Console.OUT.println(\"\\n\"+x);}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def print[T](x:T){Console.OUT.print(x);}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static def nanoTime() = System.nanoTime();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def min(x:Double, y:Double) = Math.min(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def min(x:Long, y:Long) = Math.min(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def min(x:Int, y:Int) = Math.min(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def min(x:Float, y:Float) = Math.min(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def max(x:Long, y:Long) = Math.max(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def max(x:Double, y:Double) = Math.max(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def max(x:Int, y:Int) = Math.max(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def max(x:Float, y:Float) = Math.max(x, y);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def random(x:Double){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var r:Random = new Random();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return x*r.nextDouble()-1.0d;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static def sqrt(x:Double) = Math.sqrt(x);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public CharSequence compile(final Import i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _api = i.getApi();
      boolean _tripleEquals = (_api == null);
      if (_tripleEquals) {
        String _imps = i.getImps();
        _builder.append(_imps);
        _builder.append(" ");
        String _compile = this.compile(i.getImportedNames().getImpname());
        _builder.append(_compile);
        {
          String _asname = i.getImportedNames().getAsname();
          boolean _tripleNotEquals = (_asname != null);
          if (_tripleNotEquals) {
            _builder.append("as ");
            String _asname_1 = i.getImportedNames().getAsname();
            _builder.append(_asname_1);
          } else {
            {
              int _length = ((Object[])Conversions.unwrapArray(i.getImportedNames().getSimpList(), Object.class)).length;
              boolean _notEquals = (_length != 0);
              if (_notEquals) {
                _builder.append(".{");
                {
                  int _length_1 = ((Object[])Conversions.unwrapArray(i.getImportedNames().getSimpList(), Object.class)).length;
                  ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length_1, true);
                  for(final Integer s : _doubleDotLessThan) {
                    {
                      if (((s).intValue() == 0)) {
                        String _orig = i.getImportedNames().getSimpList().get((s).intValue()).getOrig();
                        _builder.append(_orig);
                      } else {
                        _builder.append(", ");
                        String _orig_1 = i.getImportedNames().getSimpList().get((s).intValue()).getOrig();
                        _builder.append(_orig_1);
                      }
                    }
                    {
                      String _asName = i.getImportedNames().getSimpList().get((s).intValue()).getAsName();
                      boolean _tripleNotEquals_1 = (_asName != null);
                      if (_tripleNotEquals_1) {
                        _builder.append(" as ");
                        String _asName_1 = i.getImportedNames().getSimpList().get((s).intValue()).getAsName();
                        _builder.append(_asName_1);
                      }
                    }
                  }
                }
                {
                  boolean _isComma = i.getImportedNames().isComma();
                  if (_isComma) {
                    _builder.append(" , ... ");
                  }
                }
                _builder.append("}");
              } else {
                _builder.append(".{...}");
                {
                  boolean _isExcept = i.getImportedNames().isExcept();
                  if (_isExcept) {
                    _builder.append(" except ");
                    {
                      String _brack = i.getImportedNames().getSimp().getBrack();
                      boolean _tripleNotEquals_2 = (_brack != null);
                      if (_tripleNotEquals_2) {
                        _builder.append("{");
                        {
                          int _length_2 = ((Object[])Conversions.unwrapArray(i.getImportedNames().getSimp().getNameList(), Object.class)).length;
                          ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_2, true);
                          for(final Integer s_1 : _doubleDotLessThan_1) {
                            {
                              if (((s_1).intValue() == 0)) {
                                String _name = i.getImportedNames().getSimp().getNameList().get((s_1).intValue()).getName();
                                _builder.append(_name);
                              } else {
                                _builder.append(", ");
                                String _name_1 = i.getImportedNames().getSimp().getNameList().get((s_1).intValue()).getName();
                                _builder.append(_name_1);
                              }
                            }
                          }
                        }
                        _builder.append("}");
                      } else {
                        String _name_2 = i.getImportedNames().getSimp().getNameList().get(0).getName();
                        _builder.append(_name_2);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        _builder.newLineIfNotEmpty();
        String _imps_1 = i.getImps();
        _builder.append(_imps_1);
        _builder.append(" ");
        String _api_1 = i.getApi();
        _builder.append(_api_1);
        _builder.append(" ");
        {
          String _brack_1 = i.getAliasedimportedNames().getBrack();
          boolean _tripleNotEquals_3 = (_brack_1 != null);
          if (_tripleNotEquals_3) {
            _builder.append("{");
            {
              int _length_3 = ((Object[])Conversions.unwrapArray(i.getAliasedimportedNames().getNameList(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_3, true);
              for(final Integer s_2 : _doubleDotLessThan_2) {
                {
                  if (((s_2).intValue() == 0)) {
                    QualifiedName _orig_2 = i.getAliasedimportedNames().getNameList().get(0).getOrig();
                    _builder.append(_orig_2);
                  } else {
                    _builder.append(", ");
                    QualifiedName _orig_3 = i.getAliasedimportedNames().getNameList().get(0).getOrig();
                    _builder.append(_orig_3);
                  }
                }
                {
                  String _asName_2 = i.getAliasedimportedNames().getNameList().get((s_2).intValue()).getAsName();
                  boolean _tripleNotEquals_4 = (_asName_2 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append(" as ");
                    String _asName_3 = i.getAliasedimportedNames().getNameList().get(0).getAsName();
                    _builder.append(_asName_3);
                  }
                }
              }
            }
            _builder.append("}");
          } else {
            QualifiedName _orig_4 = i.getAliasedimportedNames().getNameList().get(0).getOrig();
            _builder.append(_orig_4);
            {
              String _asName_4 = i.getAliasedimportedNames().getNameList().get(0).getAsName();
              boolean _tripleNotEquals_5 = (_asName_4 != null);
              if (_tripleNotEquals_5) {
                _builder.append(" as ");
                String _asName_5 = i.getAliasedimportedNames().getNameList().get(0).getAsName();
                _builder.append(_asName_5);
              }
            }
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Export e) {
    StringConcatenation _builder = new StringConcatenation();
    String _exp = e.getExp();
    _builder.append(_exp);
    _builder.append(" ");
    {
      String _brack = e.getBrack();
      boolean _tripleNotEquals = (_brack != null);
      if (_tripleNotEquals) {
        _builder.append("{");
        {
          int _length = ((Object[])Conversions.unwrapArray(e.getExportedName(), Object.class)).length;
          ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
          for(final Integer k : _doubleDotLessThan) {
            {
              if (((k).intValue() == 0)) {
                String _compile = this.compile(e.getExportedName().get((k).intValue()));
                _builder.append(_compile);
              } else {
                _builder.append(", ");
                String _compile_1 = this.compile(e.getExportedName().get((k).intValue()));
                _builder.append(_compile_1);
              }
            }
          }
        }
        _builder.append("}");
      } else {
        String _compile_2 = this.compile(e.getExportedName().get(0));
        _builder.append(_compile_2);
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String compile(final QualifiedName q) {
    StringConcatenation _builder = new StringConcatenation();
    String s = _builder.toString();
    int _length = ((Object[])Conversions.unwrapArray(q.getS(), Object.class)).length;
    boolean _equals = (_length == 1);
    if (_equals) {
      String _name = q.getS().get(0).getName();
      String _plus = (s + _name);
      s = _plus;
    } else {
      String _name_1 = q.getS().get(0).getName();
      String _plus_1 = (s + _name_1);
      s = _plus_1;
      int _length_1 = ((Object[])Conversions.unwrapArray(q.getS(), Object.class)).length;
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _length_1, true);
      for (final Integer ss : _doubleDotLessThan) {
        String _name_2 = q.getS().get((ss).intValue()).getName();
        String _plus_2 = ((s + ".") + _name_2);
        s = _plus_2;
      }
    }
    String _dots = q.getDots();
    boolean _tripleNotEquals = (_dots != null);
    if (_tripleNotEquals) {
      String _dots_1 = q.getDots();
      String _plus_3 = (s + _dots_1);
      s = _plus_3;
    }
    return s;
  }
  
  public CharSequence compile(final ValParam p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _length = ((Object[])Conversions.unwrapArray(p.getParams(), Object.class)).length;
      boolean _equals = (_length == 0);
      if (_equals) {
      } else {
        {
          String _brack = p.getBrack();
          boolean _tripleEquals = (_brack == null);
          if (_tripleEquals) {
            Param _get = p.getParams().get(0);
            _builder.append(_get);
          } else {
            {
              int _length_1 = ((Object[])Conversions.unwrapArray(p.getParams(), Object.class)).length;
              ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length_1, true);
              for(final Integer s : _doubleDotLessThan) {
                {
                  if (((s).intValue() == 0)) {
                    _builder.newLineIfNotEmpty();
                    String _compile = this.compile(p.getParams().get((s).intValue()).getParId());
                    _builder.append(_compile);
                    _builder.append(":");
                  } else {
                    _builder.append(", ");
                    String _compile_1 = this.compile(p.getParams().get((s).intValue()).getParId());
                    _builder.append(_compile_1);
                    _builder.append(":");
                  }
                }
                {
                  String _name = p.getParams().get((s).intValue()).getIstype().getType().getName();
                  boolean _equals_1 = Objects.equal(_name, "ZZ32");
                  if (_equals_1) {
                    _builder.append("Int");
                  } else {
                    {
                      String _name_1 = p.getParams().get((s).intValue()).getIstype().getType().getName();
                      boolean _equals_2 = Objects.equal(_name_1, "ZZ64");
                      if (_equals_2) {
                        _builder.append("Long");
                      } else {
                        {
                          String _name_2 = p.getParams().get((s).intValue()).getIstype().getType().getName();
                          boolean _equals_3 = Objects.equal(_name_2, "RR32");
                          if (_equals_3) {
                            _builder.append("Float");
                          } else {
                            {
                              String _name_3 = p.getParams().get((s).intValue()).getIstype().getType().getName();
                              boolean _equals_4 = Objects.equal(_name_3, "RR64");
                              if (_equals_4) {
                                _builder.append("Double");
                              } else {
                                {
                                  String _name_4 = p.getParams().get((s).intValue()).getIstype().getType().getName();
                                  boolean _equals_5 = Objects.equal(_name_4, "String");
                                  if (_equals_5) {
                                    _builder.append("String");
                                  } else {
                                    String _name_5 = p.getParams().get((s).intValue()).getIstype().getType().getName();
                                    _builder.append(_name_5);
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Decls d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Decl> _decls = d.getDecls();
      for(final Decl dec : _decls) {
        CharSequence _compile = this.compile(dec);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Decl d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FnDecl _function = d.getFunction();
      boolean _tripleNotEquals = (_function != null);
      if (_tripleNotEquals) {
        String _compile = this.compile(d.getFunction());
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        {
          FieldDecl _field = d.getField();
          boolean _tripleNotEquals_1 = (_field != null);
          if (_tripleNotEquals_1) {
            String _compile_1 = this.compile(d.getField());
            _builder.append(_compile_1);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public String compile(final FieldDecl f) {
    String s = "";
    NoNewlineVarWTypes _vars = f.getVars();
    boolean _tripleNotEquals = (_vars != null);
    if (_tripleNotEquals) {
      NoNewlineVarWType _single = f.getVars().getSingle();
      boolean _tripleNotEquals_1 = (_single != null);
      if (_tripleNotEquals_1) {
        String _pri = f.getPri();
        boolean _tripleNotEquals_2 = (_pri != null);
        if (_tripleNotEquals_2) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("private ");
          String _plus = (s + _builder);
          s = _plus;
        }
        String _mut = f.getMut();
        boolean _tripleEquals = (_mut == null);
        if (_tripleEquals) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("static val ");
          String _plus_1 = (s + _builder_1);
          s = _plus_1;
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("var ");
          String _plus_2 = (s + _builder_2);
          s = _plus_2;
        }
        String _compile = this.compile(f.getVars().getSingle().getBid());
        String _plus_3 = (s + _compile);
        String _plus_4 = (_plus_3 + ":");
        s = _plus_4;
        String type = f.getVars().getSingle().getIstype().getType().getName();
        boolean _equals = Objects.equal(type, "ZZ32");
        if (_equals) {
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("Int = ");
          String _plus_5 = (s + _builder_3);
          String _compile_1 = this.compile(f.getInit());
          String _plus_6 = (_plus_5 + _compile_1);
          String _plus_7 = (_plus_6 + " as Int;");
          s = _plus_7;
        } else {
          boolean _equals_1 = Objects.equal(type, "ZZ64");
          if (_equals_1) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append("Long = ");
            String _plus_8 = (s + _builder_4);
            String _compile_2 = this.compile(f.getInit());
            String _plus_9 = (_plus_8 + _compile_2);
            String _plus_10 = (_plus_9 + " as Long;");
            s = _plus_10;
          } else {
            boolean _equals_2 = Objects.equal(type, "RR32");
            if (_equals_2) {
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("Float = ");
              String _plus_11 = (s + _builder_5);
              String _compile_3 = this.compile(f.getInit());
              String _plus_12 = (_plus_11 + _compile_3);
              String _plus_13 = (_plus_12 + " as Float;");
              s = _plus_13;
            } else {
              boolean _equals_3 = Objects.equal(type, "RR64");
              if (_equals_3) {
                StringConcatenation _builder_6 = new StringConcatenation();
                _builder_6.append("Double = ");
                String _plus_14 = (s + _builder_6);
                String _compile_4 = this.compile(f.getInit());
                String _plus_15 = (_plus_14 + _compile_4);
                String _plus_16 = (_plus_15 + " as Double;");
                s = _plus_16;
              } else {
                boolean _equals_4 = Objects.equal(type, "String");
                if (_equals_4) {
                  StringConcatenation _builder_7 = new StringConcatenation();
                  _builder_7.append("String = ");
                  String _plus_17 = (s + _builder_7);
                  String _compile_5 = this.compile(f.getInit());
                  String _plus_18 = (_plus_17 + _compile_5);
                  String _plus_19 = (_plus_18 + ";");
                  s = _plus_19;
                } else {
                  String _compile_6 = this.compile(f.getInit());
                  String _plus_20 = (((s + type) + "= ") + _compile_6);
                  String _plus_21 = (_plus_20 + ";");
                  s = _plus_21;
                }
              }
            }
          }
        }
      } else {
        String[] attach = this.compile(f.getInit()).split("@");
        int _length = ((Object[])Conversions.unwrapArray(f.getVars().getMultiple(), Object.class)).length;
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
        for (final Integer m : _doubleDotLessThan) {
          {
            String _pri_1 = f.getPri();
            boolean _tripleNotEquals_3 = (_pri_1 != null);
            if (_tripleNotEquals_3) {
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append("private ");
              String _plus_22 = (s + _builder_8);
              s = _plus_22;
            }
            String _mut_1 = f.getMut();
            boolean _tripleEquals_1 = (_mut_1 == null);
            if (_tripleEquals_1) {
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("static val ");
              String _plus_23 = (s + _builder_9);
              s = _plus_23;
            } else {
              StringConcatenation _builder_10 = new StringConcatenation();
              _builder_10.append("var ");
              String _plus_24 = (s + _builder_10);
              s = _plus_24;
            }
            String _compile_7 = this.compile(f.getVars().getMultiple().get((m).intValue()).getBid());
            String _plus_25 = (s + _compile_7);
            String _plus_26 = (_plus_25 + ":");
            s = _plus_26;
            String type_1 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getName();
            boolean _equals_5 = Objects.equal(type_1, "ZZ32");
            if (_equals_5) {
              StringConcatenation _builder_11 = new StringConcatenation();
              _builder_11.append("Int = ");
              String _plus_27 = (s + _builder_11);
              String _get = attach[(m).intValue()];
              String _plus_28 = (_plus_27 + _get);
              String _plus_29 = (_plus_28 + " as Int;");
              s = _plus_29;
            } else {
              boolean _equals_6 = Objects.equal(type_1, "ZZ64");
              if (_equals_6) {
                StringConcatenation _builder_12 = new StringConcatenation();
                _builder_12.append("Long = ");
                String _plus_30 = (s + _builder_12);
                String _get_1 = attach[(m).intValue()];
                String _plus_31 = (_plus_30 + _get_1);
                String _plus_32 = (_plus_31 + " as Long;");
                s = _plus_32;
              } else {
                boolean _equals_7 = Objects.equal(type_1, "RR32");
                if (_equals_7) {
                  StringConcatenation _builder_13 = new StringConcatenation();
                  _builder_13.append("Float = ");
                  String _plus_33 = (s + _builder_13);
                  String _get_2 = attach[(m).intValue()];
                  String _plus_34 = (_plus_33 + _get_2);
                  String _plus_35 = (_plus_34 + " as Float;");
                  s = _plus_35;
                } else {
                  boolean _equals_8 = Objects.equal(type_1, "RR64");
                  if (_equals_8) {
                    StringConcatenation _builder_14 = new StringConcatenation();
                    _builder_14.append("Double = ");
                    String _plus_36 = (s + _builder_14);
                    String _get_3 = attach[(m).intValue()];
                    String _plus_37 = (_plus_36 + _get_3);
                    String _plus_38 = (_plus_37 + " as Double;");
                    s = _plus_38;
                  } else {
                    boolean _equals_9 = Objects.equal(type_1, "String");
                    if (_equals_9) {
                      StringConcatenation _builder_15 = new StringConcatenation();
                      _builder_15.append("String = ");
                      String _plus_39 = (s + _builder_15);
                      String _get_4 = attach[(m).intValue()];
                      String _plus_40 = (_plus_39 + _get_4);
                      String _plus_41 = (_plus_40 + ";");
                      s = _plus_41;
                    } else {
                      String _get_5 = attach[(m).intValue()];
                      String _plus_42 = (((s + type_1) + "= ") + _get_5);
                      String _plus_43 = (_plus_42 + ";");
                      s = _plus_43;
                    }
                  }
                }
              }
            }
            s = (s + "\n");
          }
        }
      }
    } else {
      SimpleName _type = f.getType();
      boolean _tripleNotEquals_3 = (_type != null);
      if (_tripleNotEquals_3) {
        String[] vars = this.compile(f.getIdtup()).split(",");
        String[] vals = this.compile(f.getInit()).split("@");
        int _length_1 = vars.length;
        ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_1, true);
        for (final Integer v : _doubleDotLessThan_1) {
          {
            String _pri_1 = f.getPri();
            boolean _tripleNotEquals_4 = (_pri_1 != null);
            if (_tripleNotEquals_4) {
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append("private ");
              String _plus_22 = (s + _builder_8);
              s = _plus_22;
            }
            String _mut_1 = f.getMut();
            boolean _tripleEquals_1 = (_mut_1 == null);
            if (_tripleEquals_1) {
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("static val ");
              String _plus_23 = (s + _builder_9);
              s = _plus_23;
            } else {
              StringConcatenation _builder_10 = new StringConcatenation();
              _builder_10.append("var ");
              String _plus_24 = (s + _builder_10);
              s = _plus_24;
            }
            String _get = vars[(v).intValue()];
            String _plus_25 = (s + _get);
            String _plus_26 = (_plus_25 + ":");
            s = _plus_26;
            String type_1 = f.getType().getName();
            boolean _equals_5 = Objects.equal(type_1, "ZZ32");
            if (_equals_5) {
              StringConcatenation _builder_11 = new StringConcatenation();
              _builder_11.append("Int = ");
              String _plus_27 = (s + _builder_11);
              String _get_1 = vals[(v).intValue()];
              String _plus_28 = (_plus_27 + _get_1);
              String _plus_29 = (_plus_28 + " as Int;");
              s = _plus_29;
            } else {
              boolean _equals_6 = Objects.equal(type_1, "ZZ64");
              if (_equals_6) {
                StringConcatenation _builder_12 = new StringConcatenation();
                _builder_12.append("Long = ");
                String _plus_30 = (s + _builder_12);
                String _get_2 = vals[(v).intValue()];
                String _plus_31 = (_plus_30 + _get_2);
                String _plus_32 = (_plus_31 + " as Long;");
                s = _plus_32;
              } else {
                boolean _equals_7 = Objects.equal(type_1, "RR32");
                if (_equals_7) {
                  StringConcatenation _builder_13 = new StringConcatenation();
                  _builder_13.append("Float = ");
                  String _plus_33 = (s + _builder_13);
                  String _get_3 = vals[(v).intValue()];
                  String _plus_34 = (_plus_33 + _get_3);
                  String _plus_35 = (_plus_34 + " as Float;");
                  s = _plus_35;
                } else {
                  boolean _equals_8 = Objects.equal(type_1, "RR64");
                  if (_equals_8) {
                    StringConcatenation _builder_14 = new StringConcatenation();
                    _builder_14.append("Double = ");
                    String _plus_36 = (s + _builder_14);
                    String _get_4 = vals[(v).intValue()];
                    String _plus_37 = (_plus_36 + _get_4);
                    String _plus_38 = (_plus_37 + " as Double;");
                    s = _plus_38;
                  } else {
                    boolean _equals_9 = Objects.equal(type_1, "String");
                    if (_equals_9) {
                      StringConcatenation _builder_15 = new StringConcatenation();
                      _builder_15.append("String = ");
                      String _plus_39 = (s + _builder_15);
                      String _get_5 = vals[(v).intValue()];
                      String _plus_40 = (_plus_39 + _get_5);
                      String _plus_41 = (_plus_40 + ";");
                      s = _plus_41;
                    } else {
                      String _get_6 = vals[(v).intValue()];
                      String _plus_42 = (((s + type_1) + "= ") + _get_6);
                      String _plus_43 = (_plus_42 + ";");
                      s = _plus_43;
                    }
                  }
                }
              }
            }
            s = (s + "\n");
          }
        }
      } else {
        TupleType _tuptype = f.getTuptype();
        boolean _tripleNotEquals_4 = (_tuptype != null);
        if (_tripleNotEquals_4) {
          String[] vars_1 = this.compile(f.getIdtup()).split(",");
          String[] types = this.compile(f.getTuptype()).split(",");
          String[] vals_1 = this.compile(f.getInit()).split("@");
          int _length_2 = vars_1.length;
          ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_2, true);
          for (final Integer k : _doubleDotLessThan_2) {
            {
              String _pri_1 = f.getPri();
              boolean _tripleNotEquals_5 = (_pri_1 != null);
              if (_tripleNotEquals_5) {
                StringConcatenation _builder_8 = new StringConcatenation();
                _builder_8.append("private ");
                String _plus_22 = (s + _builder_8);
                s = _plus_22;
              }
              String _mut_1 = f.getMut();
              boolean _tripleEquals_1 = (_mut_1 == null);
              if (_tripleEquals_1) {
                StringConcatenation _builder_9 = new StringConcatenation();
                _builder_9.append("static val ");
                String _plus_23 = (s + _builder_9);
                s = _plus_23;
              } else {
                StringConcatenation _builder_10 = new StringConcatenation();
                _builder_10.append("var ");
                String _plus_24 = (s + _builder_10);
                s = _plus_24;
              }
              String _get = vars_1[(k).intValue()];
              String _plus_25 = (s + _get);
              String _plus_26 = (_plus_25 + ":");
              s = _plus_26;
              String type_1 = types[(k).intValue()];
              boolean _equals_5 = Objects.equal(type_1, "ZZ32");
              if (_equals_5) {
                StringConcatenation _builder_11 = new StringConcatenation();
                _builder_11.append("Int = ");
                String _plus_27 = (s + _builder_11);
                String _get_1 = vals_1[(k).intValue()];
                String _plus_28 = (_plus_27 + _get_1);
                String _plus_29 = (_plus_28 + " as Int;");
                s = _plus_29;
              } else {
                boolean _equals_6 = Objects.equal(type_1, "ZZ64");
                if (_equals_6) {
                  StringConcatenation _builder_12 = new StringConcatenation();
                  _builder_12.append("Long = ");
                  String _plus_30 = (s + _builder_12);
                  String _get_2 = vals_1[(k).intValue()];
                  String _plus_31 = (_plus_30 + _get_2);
                  String _plus_32 = (_plus_31 + " as Long;");
                  s = _plus_32;
                } else {
                  boolean _equals_7 = Objects.equal(type_1, "RR32");
                  if (_equals_7) {
                    StringConcatenation _builder_13 = new StringConcatenation();
                    _builder_13.append("Float = ");
                    String _plus_33 = (s + _builder_13);
                    String _get_3 = vals_1[(k).intValue()];
                    String _plus_34 = (_plus_33 + _get_3);
                    String _plus_35 = (_plus_34 + " as Float;");
                    s = _plus_35;
                  } else {
                    boolean _equals_8 = Objects.equal(type_1, "RR64");
                    if (_equals_8) {
                      StringConcatenation _builder_14 = new StringConcatenation();
                      _builder_14.append("Double = ");
                      String _plus_36 = (s + _builder_14);
                      String _get_4 = vals_1[(k).intValue()];
                      String _plus_37 = (_plus_36 + _get_4);
                      String _plus_38 = (_plus_37 + " as Double;");
                      s = _plus_38;
                    } else {
                      boolean _equals_9 = Objects.equal(type_1, "String");
                      if (_equals_9) {
                        StringConcatenation _builder_15 = new StringConcatenation();
                        _builder_15.append("String = ");
                        String _plus_39 = (s + _builder_15);
                        String _get_5 = vals_1[(k).intValue()];
                        String _plus_40 = (_plus_39 + _get_5);
                        String _plus_41 = (_plus_40 + ";");
                        s = _plus_41;
                      } else {
                        String _get_6 = vals_1[(k).intValue()];
                        String _plus_42 = (((s + type_1) + "= ") + _get_6);
                        String _plus_43 = (_plus_42 + ";");
                        s = _plus_43;
                      }
                    }
                  }
                }
              }
              s = (s + "\n");
            }
          }
        } else {
          String[] vars_2 = this.compile(f.getIdtup()).split(",");
          String[] vals_2 = this.compile(f.getInit()).split("@");
          int _length_3 = vars_2.length;
          ExclusiveRange _doubleDotLessThan_3 = new ExclusiveRange(0, _length_3, true);
          for (final Integer k_1 : _doubleDotLessThan_3) {
            {
              String _pri_1 = f.getPri();
              boolean _tripleNotEquals_5 = (_pri_1 != null);
              if (_tripleNotEquals_5) {
                StringConcatenation _builder_8 = new StringConcatenation();
                _builder_8.append("private ");
                String _plus_22 = (s + _builder_8);
                s = _plus_22;
              }
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("static val ");
              String _plus_23 = (s + _builder_9);
              s = _plus_23;
              String _get = vars_2[(k_1).intValue()];
              String _plus_24 = (s + _get);
              StringConcatenation _builder_10 = new StringConcatenation();
              _builder_10.append(" ");
              _builder_10.append("= ");
              String _plus_25 = (_plus_24 + _builder_10);
              String _get_1 = vals_2[(k_1).intValue()];
              String _plus_26 = (_plus_25 + _get_1);
              s = _plus_26;
            }
          }
        }
      }
    }
    return s;
  }
  
  public String compile(final TupleType tp) {
    String s = "";
    String _name = tp.getTypes().get(0).getName();
    String _plus = (s + _name);
    s = _plus;
    int _length = ((Object[])Conversions.unwrapArray(tp.getTypes(), Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _length, true);
    for (final Integer k : _doubleDotLessThan) {
      String _name_1 = tp.getTypes().get((k).intValue()).getName();
      String _plus_1 = ((s + ",") + _name_1);
      s = _plus_1;
    }
    return s;
  }
  
  public String compile(final LiteralTuple lt) {
    boolean _matched = false;
    if (lt instanceof Qualified) {
      _matched=true;
      return this.compile(((Qualified)lt));
    }
    if (!_matched) {
      if (lt instanceof LiteralTup) {
        _matched=true;
        return this.compile(((LiteralTup)lt));
      }
    }
    return null;
  }
  
  public String compile(final Qualified q) {
    boolean _matched = false;
    if (q instanceof QualifiedName) {
      _matched=true;
      return this.compile(((QualifiedName)q));
    }
    if (!_matched) {
      if (q instanceof QualifiedNameTuple) {
        _matched=true;
        return this.compile(((QualifiedNameTuple)q));
      }
    }
    return null;
  }
  
  public String compile(final QualifiedNameTuple qt) {
    String s = "";
    String _compile = this.compile(qt.getQlist().get(0));
    String _plus = (s + _compile);
    s = _plus;
    int _length = ((Object[])Conversions.unwrapArray(qt.getQlist(), Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _length, true);
    for (final Integer q : _doubleDotLessThan) {
      String _compile_1 = this.compile(qt.getQlist().get((q).intValue()));
      String _plus_1 = ((s + ",") + _compile_1);
      s = _plus_1;
    }
    return s;
  }
  
  public String compile(final LiteralTup lt) {
    boolean _matched = false;
    if (lt instanceof Literal) {
      _matched=true;
      return this.compile(((Literal)lt));
    }
    if (!_matched) {
      if (lt instanceof LiteralList) {
        _matched=true;
        return this.compile(((LiteralList)lt));
      }
    }
    return null;
  }
  
  public String compile(final Literal l) {
    boolean _matched = false;
    if (l instanceof IntConst) {
      _matched=true;
      String _string = Integer.valueOf(((IntConst)l).getValue()).toString();
      return (_string + "n");
    }
    if (!_matched) {
      if (l instanceof FloatConst) {
        _matched=true;
        String _string = ((FloatConst)l).getValue().toString();
        return (_string + "f");
      }
    }
    if (!_matched) {
      if (l instanceof StrConst) {
        _matched=true;
        String _value = ((StrConst)l).getValue();
        String _plus = ("\"" + _value);
        return (_plus + "\"");
      }
    }
    if (!_matched) {
      if (l instanceof BoolConst) {
        _matched=true;
        return ((BoolConst)l).getValue();
      }
    }
    return null;
  }
  
  public String compile(final LiteralList ll) {
    String s = "";
    String _compile = this.compile(ll.getLit().get(0));
    String _plus = (s + _compile);
    s = _plus;
    int _length = ((Object[])Conversions.unwrapArray(ll.getLit(), Object.class)).length;
    ExclusiveRange _doubleDotLessThan = new ExclusiveRange(1, _length, true);
    for (final Integer l : _doubleDotLessThan) {
      String _compile_1 = this.compile(ll.getLit().get((l).intValue()));
      String _plus_1 = ((s + ",") + _compile_1);
      s = _plus_1;
    }
    return s;
  }
  
  public String compile(final FnDecl f) {
    String _xblockexpression = null;
    {
      String s = "";
      String _name = f.getName();
      boolean _equals = Objects.equal(_name, "run");
      if (_equals) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("public static def main(args:Rail[String])");
        String _plus = (s + _builder);
        s = _plus;
      } else {
        FnMods _mods = f.getMods();
        boolean _tripleNotEquals = (_mods != null);
        if (_tripleNotEquals) {
          EList<FnMod> _mods_1 = f.getMods().getMods();
          for (final FnMod m : _mods_1) {
            String _modtype = m.getModtype();
            String _plus_1 = (s + _modtype);
            String _plus_2 = (_plus_1 + " ");
            s = _plus_2;
          }
        }
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("static def ");
        String _plus_3 = (s + _builder_1);
        String _name_1 = f.getName();
        String _plus_4 = (_plus_3 + _name_1);
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("(");
        String _plus_5 = (_plus_4 + _builder_2);
        s = _plus_5;
        ValParam _params = f.getParams();
        boolean _tripleNotEquals_1 = (_params != null);
        if (_tripleNotEquals_1) {
          CharSequence _compile = this.compile(f.getParams());
          String _plus_6 = (s + _compile);
          s = _plus_6;
        }
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append(")");
        String _plus_7 = (s + _builder_3);
        s = _plus_7;
        RetType _retVal = f.getRetVal();
        boolean _tripleNotEquals_2 = (_retVal != null);
        if (_tripleNotEquals_2) {
          String _empty = f.getRetVal().getEmpty();
          boolean _equals_1 = Objects.equal(_empty, "(");
          if (_equals_1) {
            StringConcatenation _builder_4 = new StringConcatenation();
            _builder_4.append(":void");
            String _plus_8 = (s + _builder_4);
            s = _plus_8;
          } else {
            String _name_2 = f.getRetVal().getType().getName();
            boolean _equals_2 = Objects.equal(_name_2, "ZZ32");
            if (_equals_2) {
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append(":Int");
              String _plus_9 = (s + _builder_5);
              s = _plus_9;
            } else {
              String _name_3 = f.getRetVal().getType().getName();
              boolean _equals_3 = Objects.equal(_name_3, "ZZ64");
              if (_equals_3) {
                StringConcatenation _builder_6 = new StringConcatenation();
                _builder_6.append(":Long");
                String _plus_10 = (s + _builder_6);
                s = _plus_10;
              } else {
                String _name_4 = f.getRetVal().getType().getName();
                boolean _equals_4 = Objects.equal(_name_4, "RR32");
                if (_equals_4) {
                  StringConcatenation _builder_7 = new StringConcatenation();
                  _builder_7.append(":Float");
                  String _plus_11 = (s + _builder_7);
                  s = _plus_11;
                } else {
                  String _name_5 = f.getRetVal().getType().getName();
                  boolean _equals_5 = Objects.equal(_name_5, "RR64");
                  if (_equals_5) {
                    StringConcatenation _builder_8 = new StringConcatenation();
                    _builder_8.append(":Double");
                    String _plus_12 = (s + _builder_8);
                    s = _plus_12;
                  } else {
                    String _name_6 = f.getRetVal().getType().getName();
                    String _plus_13 = (s + _name_6);
                    s = _plus_13;
                  }
                }
              }
            }
          }
        }
      }
      String _xifexpression = null;
      boolean _isBody = f.isBody();
      if (_isBody) {
        StringConcatenation _builder_9 = new StringConcatenation();
        _builder_9.append("{");
        String _plus_14 = (s + _builder_9);
        String _plus_15 = (_plus_14 + "\n\t");
        String _compile_1 = this.compile(f.getFnItself());
        String _plus_16 = (_plus_15 + _compile_1);
        String _plus_17 = (_plus_16 + "\n");
        StringConcatenation _builder_10 = new StringConcatenation();
        _builder_10.append("}");
        String _plus_18 = (_plus_17 + _builder_10);
        _xifexpression = s = _plus_18;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String compile(final Stmnts st) {
    Stmnt _front = st.getFront();
    boolean _tripleNotEquals = (_front != null);
    if (_tripleNotEquals) {
      return this.compile(st.getFront());
    } else {
      StmntList _delims = st.getDelims();
      boolean _tripleNotEquals_1 = (_delims != null);
      if (_tripleNotEquals_1) {
        return this.compile(st.getDelims());
      } else {
        LocalVarDecl _locVar = st.getLocVar();
        boolean _tripleNotEquals_2 = (_locVar != null);
        if (_tripleNotEquals_2) {
          return this.compile(st.getLocVar());
        } else {
          Expr _exp = st.getExp();
          boolean _matched = false;
          if (_exp instanceof Assop) {
            _matched=true;
            return this.compile(st.getExp());
          }
          String _compile = this.compile(st.getExp());
          return (_compile + ";");
        }
      }
    }
  }
  
  public String compile(final Stmnt s) {
    DelimitedExpr _delim = s.getDelim();
    boolean _tripleNotEquals = (_delim != null);
    if (_tripleNotEquals) {
      return this.compile(s.getDelim());
    }
    return null;
  }
  
  public String compile(final StmntList d) {
    String s = "finish{";
    EList<Stmnt> _delim = d.getDelim();
    for (final Stmnt dd : _delim) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("async{");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      String _compile = this.compile(dd);
      _builder.append(_compile, "\t\t\t\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      String _plus = (s + _builder);
      s = _plus;
    }
    s = (s + "}");
    return s;
  }
  
  public String compile(final DelimitedExpr d) {
    Do _dod = d.getDod();
    boolean _tripleNotEquals = (_dod != null);
    if (_tripleNotEquals) {
      String _compile = this.compile(d.getDod());
      return (_compile + "\n");
    } else {
      String _ret = d.getRet();
      boolean _tripleNotEquals_1 = (_ret != null);
      if (_tripleNotEquals_1) {
        String _compile_1 = this.compile(d.getBlock());
        String _plus = ("return " + _compile_1);
        return (_plus + ";\n");
      } else {
        String _awhile = d.getAwhile();
        boolean _tripleNotEquals_2 = (_awhile != null);
        if (_tripleNotEquals_2) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("while(");
          String _compile_2 = this.compile(d.getExpr());
          String _plus_1 = (_builder.toString() + _compile_2);
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(")");
          String _plus_2 = (_plus_1 + _builder_1);
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("{");
          String _plus_3 = (_plus_2 + _builder_2);
          String _plus_4 = (_plus_3 + "\n");
          String _compile_3 = this.compile(d.getWhiledod());
          String _plus_5 = (_plus_4 + _compile_3);
          String _plus_6 = (_plus_5 + "\n");
          StringConcatenation _builder_3 = new StringConcatenation();
          _builder_3.append("}");
          String _plus_7 = (_plus_6 + _builder_3);
          return (_plus_7 + "\n");
        } else {
          String _afor = d.getAfor();
          boolean _tripleNotEquals_3 = (_afor != null);
          if (_tripleNotEquals_3) {
            String s = "";
            String _seq = d.getGen().getBinding().getSeq();
            boolean _tripleEquals = (_seq == null);
            if (_tripleEquals) {
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("finish ");
              String _plus_8 = (s + _builder_4);
              s = _plus_8;
            }
            StringConcatenation _builder_5 = new StringConcatenation();
            _builder_5.append("for(");
            String _plus_9 = (s + _builder_5);
            String _compile_4 = this.compile(d.getGen().getBinding());
            String _plus_10 = (_plus_9 + _compile_4);
            StringConcatenation _builder_6 = new StringConcatenation();
            _builder_6.append(" ");
            _builder_6.append("in ");
            String _plus_11 = (_plus_10 + _builder_6);
            String _compile_5 = this.compile(d.getGen().getBinding().getG());
            String _plus_12 = (_plus_11 + _compile_5);
            StringConcatenation _builder_7 = new StringConcatenation();
            _builder_7.append(")");
            String _plus_13 = (_plus_12 + _builder_7);
            s = _plus_13;
            String _seq_1 = d.getGen().getBinding().getSeq();
            boolean _tripleEquals_1 = (_seq_1 == null);
            if (_tripleEquals_1) {
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append(" ");
              _builder_8.append("async{");
              String _plus_14 = (s + _builder_8);
              String _plus_15 = (_plus_14 + "\n\t");
              s = _plus_15;
            } else {
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("{");
              String _plus_16 = (s + _builder_9);
              String _plus_17 = (_plus_16 + "\n\t");
              s = _plus_17;
            }
            EList<GenClause> _clause = d.getGen().getClause();
            boolean _tripleNotEquals_4 = (_clause != null);
            if (_tripleNotEquals_4) {
              EList<GenClause> _clause_1 = d.getGen().getClause();
              for (final GenClause c : _clause_1) {
                {
                  StringConcatenation _builder_10 = new StringConcatenation();
                  _builder_10.append("{");
                  String _plus_18 = (s + _builder_10);
                  String _plus_19 = (_plus_18 + "\n");
                  s = _plus_19;
                  String _seq_2 = c.getBinding().getSeq();
                  boolean _tripleEquals_2 = (_seq_2 == null);
                  if (_tripleEquals_2) {
                    StringConcatenation _builder_11 = new StringConcatenation();
                    _builder_11.append("finish ");
                    String _plus_20 = ((s + "\t") + _builder_11);
                    s = _plus_20;
                  }
                  StringConcatenation _builder_12 = new StringConcatenation();
                  _builder_12.append("for(");
                  String _plus_21 = (s + _builder_12);
                  String _compile_6 = this.compile(c.getBinding());
                  String _plus_22 = (_plus_21 + _compile_6);
                  StringConcatenation _builder_13 = new StringConcatenation();
                  _builder_13.append("in");
                  String _plus_23 = (_plus_22 + _builder_13);
                  String _compile_7 = this.compile(c.getBinding().getG());
                  String _plus_24 = (_plus_23 + _compile_7);
                  StringConcatenation _builder_14 = new StringConcatenation();
                  _builder_14.append(")");
                  String _plus_25 = (_plus_24 + _builder_14);
                  s = _plus_25;
                  String _seq_3 = c.getBinding().getSeq();
                  boolean _tripleEquals_3 = (_seq_3 == null);
                  if (_tripleEquals_3) {
                    StringConcatenation _builder_15 = new StringConcatenation();
                    _builder_15.append(" ");
                    _builder_15.append("async{");
                    String _plus_26 = (s + _builder_15);
                    String _plus_27 = (_plus_26 + "\n\t");
                    s = _plus_27;
                  } else {
                    StringConcatenation _builder_16 = new StringConcatenation();
                    _builder_16.append("{");
                    String _plus_28 = (s + _builder_16);
                    String _plus_29 = (_plus_28 + "\n\t");
                    s = _plus_29;
                  }
                }
              }
              String _compile_6 = this.compile(d.getDofront());
              String _plus_18 = (s + _compile_6);
              s = _plus_18;
              EList<GenClause> _clause_2 = d.getGen().getClause();
              for (final GenClause c_1 : _clause_2) {
                StringConcatenation _builder_10 = new StringConcatenation();
                _builder_10.append("}");
                String _plus_19 = ((s + "\n\t") + _builder_10);
                s = _plus_19;
              }
            } else {
              String _compile_7 = this.compile(d.getDofront());
              String _plus_20 = (s + _compile_7);
              s = _plus_20;
            }
            StringConcatenation _builder_11 = new StringConcatenation();
            _builder_11.append("}");
            String _plus_21 = ((s + "\n\t") + _builder_11);
            String _plus_22 = (_plus_21 + "\n");
            s = _plus_22;
            return s;
          } else {
            String _anif = d.getAnif();
            boolean _tripleNotEquals_5 = (_anif != null);
            if (_tripleNotEquals_5) {
              StringConcatenation _builder_12 = new StringConcatenation();
              _builder_12.append("if(");
              String _compile_8 = this.compile(d.getCond());
              String _plus_23 = (_builder_12.toString() + _compile_8);
              StringConcatenation _builder_13 = new StringConcatenation();
              _builder_13.append(")");
              String _plus_24 = (_plus_23 + _builder_13);
              StringConcatenation _builder_14 = new StringConcatenation();
              _builder_14.append("{");
              String _plus_25 = (_plus_24 + _builder_14);
              String _plus_26 = (_plus_25 + "\n");
              CharSequence _compile_9 = this.compile(d.getBlocks());
              String _plus_27 = (_plus_26 + _compile_9);
              String _plus_28 = (_plus_27 + "\n");
              StringConcatenation _builder_15 = new StringConcatenation();
              _builder_15.append("}");
              String _plus_29 = (_plus_28 + _builder_15);
              String s_1 = (_plus_29 + "\n");
              Elifs _elifs = d.getElifs();
              boolean _tripleNotEquals_6 = (_elifs != null);
              if (_tripleNotEquals_6) {
                String _compile_10 = this.compile(d.getElifs());
                String _plus_30 = (s_1 + _compile_10);
                s_1 = _plus_30;
              }
              Else _els = d.getEls();
              boolean _tripleNotEquals_7 = (_els != null);
              if (_tripleNotEquals_7) {
                String _compile_11 = this.compile(d.getEls());
                String _plus_31 = (s_1 + _compile_11);
                s_1 = _plus_31;
              }
              return s_1;
            }
          }
        }
      }
    }
    return null;
  }
  
  public String compile(final GenSource g) {
    boolean _matched = false;
    if (g instanceof Expr) {
      _matched=true;
      return this.compile(((Expr)g));
    }
    if (!_matched) {
      if (g instanceof GenSource) {
        _matched=true;
        String _compile = this.compile(g.getStart());
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("..");
        String _plus = (_compile + _builder);
        String _compile_1 = this.compile(g.getEnd());
        return (_plus + _compile_1);
      }
    }
    return null;
  }
  
  public String compile(final Binding b) {
    Qualified _idtup = b.getIdtup();
    boolean _matched = false;
    if (_idtup instanceof QualifiedName) {
      _matched=true;
      return this.compile(b.getIdtup());
    }
    if (!_matched) {
      if (_idtup instanceof QualifiedNameTuple) {
        _matched=true;
        String _compile = this.compile(b.getIdtup());
        String _plus = ("[" + _compile);
        return (_plus + "]");
      }
    }
    return null;
  }
  
  public String compile(final Elifs el) {
    String s = "";
    EList<Elif> _e = el.getE();
    for (final Elif e : _e) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("else if(");
      String _plus = (s + _builder);
      String _compile = this.compile(e.getExpr());
      String _plus_1 = (_plus + _compile);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append(")");
      String _plus_2 = (_plus_1 + _builder_1);
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("{");
      String _plus_3 = (_plus_2 + _builder_2);
      String _plus_4 = (_plus_3 + "\n");
      CharSequence _compile_1 = this.compile(e.getBlock());
      String _plus_5 = (_plus_4 + _compile_1);
      String _plus_6 = (_plus_5 + "\n");
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("}");
      String _plus_7 = (_plus_6 + _builder_3);
      s = _plus_7;
    }
    return s;
  }
  
  public String compile(final Else e) {
    String _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("else{");
      String s = (_builder.toString() + "\n");
      CharSequence _compile = this.compile(e.getBlock());
      String _plus = (s + _compile);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("}");
      String _plus_1 = (_plus + _builder_1);
      String _plus_2 = (_plus_1 + "\n");
      _xblockexpression = s = _plus_2;
    }
    return _xblockexpression;
  }
  
  public String compile(final Do dobox) {
    String s = "";
    int _length = ((Object[])Conversions.unwrapArray(dobox.getDofs(), Object.class)).length;
    boolean _equals = (_length == 1);
    if (_equals) {
      String _compile = this.compile(dobox.getDofs().get(0));
      String _plus = (s + _compile);
      s = _plus;
    } else {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("finish{");
      _builder.newLine();
      String _plus_1 = (s + _builder);
      s = _plus_1;
      EList<DoFront> _dofs = dobox.getDofs();
      for (final DoFront d : _dofs) {
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append("async{");
        _builder_1.newLine();
        _builder_1.append("\t");
        String _compile_1 = this.compile(d);
        _builder_1.append(_compile_1, "\t");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("}");
        _builder_1.newLine();
        String _plus_2 = (s + _builder_1);
        s = _plus_2;
      }
      StringConcatenation _builder_2 = new StringConcatenation();
      _builder_2.append("}");
      String _plus_3 = (s + _builder_2);
      s = _plus_3;
    }
    return s;
  }
  
  public String compile(final DoFront dof) {
    String s = "";
    boolean _isAt = dof.isAt();
    if (_isAt) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("at(");
      String _compile = this.compile(dof.getExp());
      _builder.append(_compile);
      _builder.append(") ");
      String _plus = (s + _builder);
      s = _plus;
    }
    boolean _isAtom = dof.isAtom();
    if (_isAtom) {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("atomic{");
      _builder_1.newLine();
      _builder_1.append("\t");
      CharSequence _compile_1 = this.compile(dof.getBlock());
      _builder_1.append(_compile_1, "\t");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("}");
      String _plus_1 = (s + _builder_1);
      s = _plus_1;
    } else {
      CharSequence _compile_2 = this.compile(dof.getBlock());
      String _plus_2 = (s + _compile_2);
      s = _plus_2;
    }
    return s;
  }
  
  public CharSequence compile(final BlockElems bs) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<BlockElem> _block = bs.getBlock();
      for(final BlockElem b : _block) {
        CharSequence _compile = this.compile(b);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final BlockElem b) {
    StringConcatenation _builder = new StringConcatenation();
    String _compile = this.compile(b.getSt());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public String compile(final LocalVarDecl f) {
    String s = "";
    NoNewlineVarWTypes _vars = f.getVars();
    boolean _tripleNotEquals = (_vars != null);
    if (_tripleNotEquals) {
      NoNewlineVarWType _single = f.getVars().getSingle();
      boolean _tripleNotEquals_1 = (_single != null);
      if (_tripleNotEquals_1) {
        String _mut = f.getMut();
        boolean _tripleEquals = (_mut == null);
        if (_tripleEquals) {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("val ");
          String _plus = (s + _builder);
          s = _plus;
        } else {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("var ");
          String _plus_1 = (s + _builder_1);
          s = _plus_1;
        }
        String _compile = this.compile(f.getVars().getSingle().getBid());
        String _plus_2 = (s + _compile);
        String _plus_3 = (_plus_2 + ":");
        s = _plus_3;
        String type = f.getVars().getSingle().getIstype().getType().getName();
        boolean _equals = Objects.equal(type, "ZZ32");
        if (_equals) {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append("Int = ");
          String _plus_4 = (s + _builder_2);
          String _compile_1 = this.compile(f.getInit());
          String _plus_5 = (_plus_4 + _compile_1);
          String _plus_6 = (_plus_5 + " as Int;");
          s = _plus_6;
        } else {
          boolean _equals_1 = Objects.equal(type, "ZZ64");
          if (_equals_1) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("Long = ");
            String _plus_7 = (s + _builder_3);
            String _compile_2 = this.compile(f.getInit());
            String _plus_8 = (_plus_7 + _compile_2);
            String _plus_9 = (_plus_8 + " as Long;");
            s = _plus_9;
          } else {
            boolean _equals_2 = Objects.equal(type, "RR32");
            if (_equals_2) {
              StringConcatenation _builder_4 = new StringConcatenation();
              _builder_4.append("Float = ");
              String _plus_10 = (s + _builder_4);
              String _compile_3 = this.compile(f.getInit());
              String _plus_11 = (_plus_10 + _compile_3);
              String _plus_12 = (_plus_11 + " as Float;");
              s = _plus_12;
            } else {
              boolean _equals_3 = Objects.equal(type, "RR64");
              if (_equals_3) {
                StringConcatenation _builder_5 = new StringConcatenation();
                _builder_5.append("Double = ");
                String _plus_13 = (s + _builder_5);
                String _compile_4 = this.compile(f.getInit());
                String _plus_14 = (_plus_13 + _compile_4);
                String _plus_15 = (_plus_14 + " as Double;");
                s = _plus_15;
              } else {
                boolean _equals_4 = Objects.equal(type, "String");
                if (_equals_4) {
                  StringConcatenation _builder_6 = new StringConcatenation();
                  _builder_6.append("String = ");
                  String _plus_16 = (s + _builder_6);
                  String _compile_5 = this.compile(f.getInit());
                  String _plus_17 = (_plus_16 + _compile_5);
                  String _plus_18 = (_plus_17 + ";");
                  s = _plus_18;
                } else {
                  String _compile_6 = this.compile(f.getInit());
                  String _plus_19 = (((s + type) + "= ") + _compile_6);
                  String _plus_20 = (_plus_19 + ";");
                  s = _plus_20;
                }
              }
            }
          }
        }
      } else {
        String[] attach = this.compile(f.getInit()).split("@");
        int _length = ((Object[])Conversions.unwrapArray(f.getVars().getMultiple(), Object.class)).length;
        ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length, true);
        for (final Integer m : _doubleDotLessThan) {
          {
            String _mut_1 = f.getMut();
            boolean _tripleEquals_1 = (_mut_1 == null);
            if (_tripleEquals_1) {
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append("val ");
              String _plus_21 = (s + _builder_7);
              s = _plus_21;
            } else {
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append("var ");
              String _plus_22 = (s + _builder_8);
              s = _plus_22;
            }
            String _compile_7 = this.compile(f.getVars().getMultiple().get((m).intValue()).getBid());
            String _plus_23 = (s + _compile_7);
            String _plus_24 = (_plus_23 + ":");
            s = _plus_24;
            String type_1 = f.getVars().getMultiple().get((m).intValue()).getIstype().getType().getName();
            boolean _equals_5 = Objects.equal(type_1, "ZZ32");
            if (_equals_5) {
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("Int = ");
              String _plus_25 = (s + _builder_9);
              String _get = attach[(m).intValue()];
              String _plus_26 = (_plus_25 + _get);
              String _plus_27 = (_plus_26 + " as Int;");
              s = _plus_27;
            } else {
              boolean _equals_6 = Objects.equal(type_1, "ZZ64");
              if (_equals_6) {
                StringConcatenation _builder_10 = new StringConcatenation();
                _builder_10.append("Long = ");
                String _plus_28 = (s + _builder_10);
                String _get_1 = attach[(m).intValue()];
                String _plus_29 = (_plus_28 + _get_1);
                String _plus_30 = (_plus_29 + " as Long;");
                s = _plus_30;
              } else {
                boolean _equals_7 = Objects.equal(type_1, "RR32");
                if (_equals_7) {
                  StringConcatenation _builder_11 = new StringConcatenation();
                  _builder_11.append("Float = ");
                  String _plus_31 = (s + _builder_11);
                  String _get_2 = attach[(m).intValue()];
                  String _plus_32 = (_plus_31 + _get_2);
                  String _plus_33 = (_plus_32 + " as Float;");
                  s = _plus_33;
                } else {
                  boolean _equals_8 = Objects.equal(type_1, "RR64");
                  if (_equals_8) {
                    StringConcatenation _builder_12 = new StringConcatenation();
                    _builder_12.append("Double = ");
                    String _plus_34 = (s + _builder_12);
                    String _get_3 = attach[(m).intValue()];
                    String _plus_35 = (_plus_34 + _get_3);
                    String _plus_36 = (_plus_35 + " as Double;");
                    s = _plus_36;
                  } else {
                    boolean _equals_9 = Objects.equal(type_1, "String");
                    if (_equals_9) {
                      StringConcatenation _builder_13 = new StringConcatenation();
                      _builder_13.append("String = ");
                      String _plus_37 = (s + _builder_13);
                      String _get_4 = attach[(m).intValue()];
                      String _plus_38 = (_plus_37 + _get_4);
                      String _plus_39 = (_plus_38 + ";");
                      s = _plus_39;
                    } else {
                      String _get_5 = attach[(m).intValue()];
                      String _plus_40 = (((s + type_1) + "= ") + _get_5);
                      String _plus_41 = (_plus_40 + ";");
                      s = _plus_41;
                    }
                  }
                }
              }
            }
            s = (s + "\n");
          }
        }
      }
    } else {
      SimpleName _type = f.getType();
      boolean _tripleNotEquals_2 = (_type != null);
      if (_tripleNotEquals_2) {
        String[] vars = this.compile(f.getIdtup()).split(",");
        String[] vals = this.compile(f.getInit()).split("@");
        int _length_1 = vars.length;
        ExclusiveRange _doubleDotLessThan_1 = new ExclusiveRange(0, _length_1, true);
        for (final Integer v : _doubleDotLessThan_1) {
          {
            String _mut_1 = f.getMut();
            boolean _tripleEquals_1 = (_mut_1 == null);
            if (_tripleEquals_1) {
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append("val ");
              String _plus_21 = (s + _builder_7);
              s = _plus_21;
            } else {
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append("var ");
              String _plus_22 = (s + _builder_8);
              s = _plus_22;
            }
            String _get = vars[(v).intValue()];
            String _plus_23 = (s + _get);
            String _plus_24 = (_plus_23 + ":");
            s = _plus_24;
            String type_1 = f.getType().getName();
            boolean _equals_5 = Objects.equal(type_1, "ZZ32");
            if (_equals_5) {
              StringConcatenation _builder_9 = new StringConcatenation();
              _builder_9.append("Int = ");
              String _plus_25 = (s + _builder_9);
              String _get_1 = vals[(v).intValue()];
              String _plus_26 = (_plus_25 + _get_1);
              String _plus_27 = (_plus_26 + " as Int;");
              s = _plus_27;
            } else {
              boolean _equals_6 = Objects.equal(type_1, "ZZ64");
              if (_equals_6) {
                StringConcatenation _builder_10 = new StringConcatenation();
                _builder_10.append("Long = ");
                String _plus_28 = (s + _builder_10);
                String _get_2 = vals[(v).intValue()];
                String _plus_29 = (_plus_28 + _get_2);
                String _plus_30 = (_plus_29 + " as Long;");
                s = _plus_30;
              } else {
                boolean _equals_7 = Objects.equal(type_1, "RR32");
                if (_equals_7) {
                  StringConcatenation _builder_11 = new StringConcatenation();
                  _builder_11.append("Float = ");
                  String _plus_31 = (s + _builder_11);
                  String _get_3 = vals[(v).intValue()];
                  String _plus_32 = (_plus_31 + _get_3);
                  String _plus_33 = (_plus_32 + " as Float;");
                  s = _plus_33;
                } else {
                  boolean _equals_8 = Objects.equal(type_1, "RR64");
                  if (_equals_8) {
                    StringConcatenation _builder_12 = new StringConcatenation();
                    _builder_12.append("Double = ");
                    String _plus_34 = (s + _builder_12);
                    String _get_4 = vals[(v).intValue()];
                    String _plus_35 = (_plus_34 + _get_4);
                    String _plus_36 = (_plus_35 + " as Double;");
                    s = _plus_36;
                  } else {
                    boolean _equals_9 = Objects.equal(type_1, "String");
                    if (_equals_9) {
                      StringConcatenation _builder_13 = new StringConcatenation();
                      _builder_13.append("String = ");
                      String _plus_37 = (s + _builder_13);
                      String _get_5 = vals[(v).intValue()];
                      String _plus_38 = (_plus_37 + _get_5);
                      String _plus_39 = (_plus_38 + ";");
                      s = _plus_39;
                    } else {
                      String _get_6 = vals[(v).intValue()];
                      String _plus_40 = (((s + type_1) + "= ") + _get_6);
                      String _plus_41 = (_plus_40 + ";");
                      s = _plus_41;
                    }
                  }
                }
              }
            }
            s = (s + "\n");
          }
        }
      } else {
        TupleType _tuptype = f.getTuptype();
        boolean _tripleNotEquals_3 = (_tuptype != null);
        if (_tripleNotEquals_3) {
          String[] vars_1 = this.compile(f.getIdtup()).split(",");
          String[] types = this.compile(f.getTuptype()).split(",");
          String[] vals_1 = this.compile(f.getInit()).split("@");
          int _length_2 = vars_1.length;
          ExclusiveRange _doubleDotLessThan_2 = new ExclusiveRange(0, _length_2, true);
          for (final Integer k : _doubleDotLessThan_2) {
            {
              String _mut_1 = f.getMut();
              boolean _tripleEquals_1 = (_mut_1 == null);
              if (_tripleEquals_1) {
                StringConcatenation _builder_7 = new StringConcatenation();
                _builder_7.append("val ");
                String _plus_21 = (s + _builder_7);
                s = _plus_21;
              } else {
                StringConcatenation _builder_8 = new StringConcatenation();
                _builder_8.append("var ");
                String _plus_22 = (s + _builder_8);
                s = _plus_22;
              }
              String _get = vars_1[(k).intValue()];
              String _plus_23 = (s + _get);
              String _plus_24 = (_plus_23 + ":");
              s = _plus_24;
              String type_1 = types[(k).intValue()];
              boolean _equals_5 = Objects.equal(type_1, "ZZ32");
              if (_equals_5) {
                StringConcatenation _builder_9 = new StringConcatenation();
                _builder_9.append("Int = ");
                String _plus_25 = (s + _builder_9);
                String _get_1 = vals_1[(k).intValue()];
                String _plus_26 = (_plus_25 + _get_1);
                String _plus_27 = (_plus_26 + " as Int;");
                s = _plus_27;
              } else {
                boolean _equals_6 = Objects.equal(type_1, "ZZ64");
                if (_equals_6) {
                  StringConcatenation _builder_10 = new StringConcatenation();
                  _builder_10.append("Long = ");
                  String _plus_28 = (s + _builder_10);
                  String _get_2 = vals_1[(k).intValue()];
                  String _plus_29 = (_plus_28 + _get_2);
                  String _plus_30 = (_plus_29 + " as Long;");
                  s = _plus_30;
                } else {
                  boolean _equals_7 = Objects.equal(type_1, "RR32");
                  if (_equals_7) {
                    StringConcatenation _builder_11 = new StringConcatenation();
                    _builder_11.append("Float = ");
                    String _plus_31 = (s + _builder_11);
                    String _get_3 = vals_1[(k).intValue()];
                    String _plus_32 = (_plus_31 + _get_3);
                    String _plus_33 = (_plus_32 + " as Float;");
                    s = _plus_33;
                  } else {
                    boolean _equals_8 = Objects.equal(type_1, "RR64");
                    if (_equals_8) {
                      StringConcatenation _builder_12 = new StringConcatenation();
                      _builder_12.append("Double = ");
                      String _plus_34 = (s + _builder_12);
                      String _get_4 = vals_1[(k).intValue()];
                      String _plus_35 = (_plus_34 + _get_4);
                      String _plus_36 = (_plus_35 + " as Double;");
                      s = _plus_36;
                    } else {
                      boolean _equals_9 = Objects.equal(type_1, "String");
                      if (_equals_9) {
                        StringConcatenation _builder_13 = new StringConcatenation();
                        _builder_13.append("String = ");
                        String _plus_37 = (s + _builder_13);
                        String _get_5 = vals_1[(k).intValue()];
                        String _plus_38 = (_plus_37 + _get_5);
                        String _plus_39 = (_plus_38 + ";");
                        s = _plus_39;
                      } else {
                        String _get_6 = vals_1[(k).intValue()];
                        String _plus_40 = (((s + type_1) + "= ") + _get_6);
                        String _plus_41 = (_plus_40 + ";");
                        s = _plus_41;
                      }
                    }
                  }
                }
              }
              s = (s + "\n");
            }
          }
        } else {
          String[] vars_2 = this.compile(f.getIdtup()).split(",");
          String[] vals_2 = this.compile(f.getInit()).split("@");
          int _length_3 = vars_2.length;
          ExclusiveRange _doubleDotLessThan_3 = new ExclusiveRange(0, _length_3, true);
          for (final Integer k_1 : _doubleDotLessThan_3) {
            {
              StringConcatenation _builder_7 = new StringConcatenation();
              _builder_7.append("val ");
              String _plus_21 = (s + _builder_7);
              s = _plus_21;
              String _get = vars_2[(k_1).intValue()];
              String _plus_22 = (s + _get);
              StringConcatenation _builder_8 = new StringConcatenation();
              _builder_8.append(" ");
              _builder_8.append("= ");
              String _plus_23 = (_plus_22 + _builder_8);
              String _get_1 = vals_2[(k_1).intValue()];
              String _plus_24 = (_plus_23 + _get_1);
              String _plus_25 = (_plus_24 + ";\n");
              s = _plus_25;
            }
          }
        }
      }
    }
    return s;
  }
  
  public String compile(final Expr e) {
    String s = "";
    boolean _matched = false;
    if (e instanceof Or) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("(");
      String _compile = this.compile(((Or)e).getLeft());
      _builder.append(_compile);
      _builder.append("||");
      String _compile_1 = this.compile(((Or)e).getRight());
      _builder.append(_compile_1);
      _builder.append(")");
      String _plus = (s + _builder);
      s = _plus;
    }
    if (!_matched) {
      if (e instanceof And) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((And)e).getLeft());
        _builder.append(_compile);
        _builder.append("&&");
        String _compile_1 = this.compile(((And)e).getRight());
        _builder.append(_compile_1);
        _builder.append(")");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof Equality) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((Equality)e).getLeft());
        _builder.append(_compile);
        String _plus = (s + _builder);
        s = _plus;
        if ((Objects.equal(((Equality)e).getOp(), "===") || Objects.equal(((Equality)e).getOp(), "EQ"))) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(" ");
          _builder_1.append("== ");
          String _plus_1 = (s + _builder_1);
          s = _plus_1;
        } else {
          StringConcatenation _builder_2 = new StringConcatenation();
          _builder_2.append(" ");
          _builder_2.append("!= ");
          String _plus_2 = (s + _builder_2);
          s = _plus_2;
        }
        StringConcatenation _builder_3 = new StringConcatenation();
        String _compile_1 = this.compile(((Equality)e).getRight());
        _builder_3.append(_compile_1);
        _builder_3.append(")");
        String _plus_3 = (s + _builder_3);
        s = _plus_3;
      }
    }
    if (!_matched) {
      if (e instanceof Comparison) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((Comparison)e).getLeft());
        _builder.append(_compile);
        String _plus = (s + _builder);
        s = _plus;
        if ((Objects.equal(((Comparison)e).getOp(), ">=") || Objects.equal(((Comparison)e).getOp(), "GE"))) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append(" ");
          _builder_1.append(">= ");
          String _plus_1 = (s + _builder_1);
          s = _plus_1;
        } else {
          if ((Objects.equal(((Comparison)e).getOp(), "<=") || Objects.equal(((Comparison)e).getOp(), "LT"))) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append(" ");
            _builder_2.append("<= ");
            String _plus_2 = (s + _builder_2);
            s = _plus_2;
          } else {
            if ((Objects.equal(((Comparison)e).getOp(), "<") || Objects.equal(((Comparison)e).getOp(), "LT"))) {
              StringConcatenation _builder_3 = new StringConcatenation();
              _builder_3.append(" ");
              _builder_3.append("< ");
              String _plus_3 = (s + _builder_3);
              s = _plus_3;
            } else {
              if ((Objects.equal(((Comparison)e).getOp(), ">") || Objects.equal(((Comparison)e).getOp(), "GT"))) {
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append(" ");
                _builder_4.append("> ");
                String _plus_4 = (s + _builder_4);
                s = _plus_4;
              }
            }
          }
        }
        StringConcatenation _builder_5 = new StringConcatenation();
        String _compile_1 = this.compile(((Comparison)e).getRight());
        _builder_5.append(_compile_1);
        _builder_5.append(")");
        String _plus_5 = (s + _builder_5);
        s = _plus_5;
      }
    }
    if (!_matched) {
      if (e instanceof AddExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((AddExpr)e).getLeft());
        _builder.append(_compile);
        _builder.append("+");
        String _compile_1 = this.compile(((AddExpr)e).getRight());
        _builder.append(_compile_1);
        _builder.append(")");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof SubExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((SubExpr)e).getLeft());
        _builder.append(_compile);
        _builder.append("-");
        String _compile_1 = this.compile(((SubExpr)e).getRight());
        _builder.append(_compile_1);
        _builder.append(")");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof DivExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((DivExpr)e).getLeft());
        _builder.append(_compile);
        _builder.append("/");
        String _compile_1 = this.compile(((DivExpr)e).getRight());
        _builder.append(_compile_1);
        _builder.append(")");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof MultExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _compile = this.compile(((MultExpr)e).getLeft());
        _builder.append(_compile);
        _builder.append("*");
        String _compile_1 = this.compile(((MultExpr)e).getRight());
        _builder.append(_compile_1);
        _builder.append(")");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof ExponentExpr) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(Math.pow(");
        String _compile = this.compile(((ExponentExpr)e).getLeft());
        _builder.append(_compile);
        _builder.append(",");
        String _compile_1 = this.compile(((ExponentExpr)e).getRight());
        _builder.append(_compile_1);
        _builder.append("))");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof Not) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _plus = ((s + "!") + _builder);
        String _compile = this.compile(((Not)e).getExpression());
        String _plus_1 = (_plus + _compile);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(")");
        String _plus_2 = (_plus_1 + _builder_1);
        s = _plus_2;
      }
    }
    if (!_matched) {
      if (e instanceof Neg) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("(");
        String _plus = ((s + "-") + _builder);
        String _compile = this.compile(((Neg)e).getExpression());
        String _plus_1 = (_plus + _compile);
        StringConcatenation _builder_1 = new StringConcatenation();
        _builder_1.append(")");
        String _plus_2 = (_plus_1 + _builder_1);
        s = _plus_2;
      }
    }
    if (!_matched) {
      if (e instanceof Paran) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _compile = this.compile(((Paran)e).getExp());
        _builder.append(_compile);
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof FCall) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _compile = this.compile(((FCall)e).getLeft());
        _builder.append(_compile);
        _builder.append("(");
        {
          ExprList _right = ((FCall)e).getRight();
          boolean _tripleNotEquals = (_right != null);
          if (_tripleNotEquals) {
            String _replace = this.compile(((FCall)e).getRight()).replace("@", ",");
            _builder.append(_replace);
          }
        }
        _builder.append(")");
        String _plus = (s + _builder);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof LiteralTuple) {
        _matched=true;
        String _compile = this.compile(((LiteralTuple)e));
        String _plus = (s + _compile);
        s = _plus;
      }
    }
    if (!_matched) {
      if (e instanceof Assop) {
        _matched=true;
        s = this.compile(((Assop)e));
      }
    }
    EList<ExprTail> _tail = e.getTail();
    boolean _tripleNotEquals = (_tail != null);
    if (_tripleNotEquals) {
      EList<ExprTail> _tail_1 = e.getTail();
      for (final ExprTail t : _tail_1) {
        {
          StringConcatenation _builder = new StringConcatenation();
          _builder.append(" ");
          _builder.append("as ");
          String _plus = (s + _builder);
          s = _plus;
          String tp = t.getType().getName();
          boolean _equals = Objects.equal(tp, "ZZ32");
          if (_equals) {
            StringConcatenation _builder_1 = new StringConcatenation();
            _builder_1.append("Int");
            String _plus_1 = (s + _builder_1);
            s = _plus_1;
          } else {
            boolean _equals_1 = Objects.equal(tp, "ZZ64");
            if (_equals_1) {
              StringConcatenation _builder_2 = new StringConcatenation();
              _builder_2.append("Long");
              String _plus_2 = (s + _builder_2);
              s = _plus_2;
            } else {
              boolean _equals_2 = Objects.equal(tp, "RR32");
              if (_equals_2) {
                StringConcatenation _builder_3 = new StringConcatenation();
                _builder_3.append("Float");
                String _plus_3 = (s + _builder_3);
                s = _plus_3;
              } else {
                boolean _equals_3 = Objects.equal(tp, "RR64");
                if (_equals_3) {
                  StringConcatenation _builder_4 = new StringConcatenation();
                  _builder_4.append("Double");
                  String _plus_4 = (s + _builder_4);
                  s = _plus_4;
                } else {
                  s = (s + tp);
                }
              }
            }
          }
        }
      }
    }
    return s;
  }
  
  public String compile(final Assop a) {
    String s = "";
    String[] lefts = this.compile(a.getLeft()).split(",");
    String[] rights = this.compile(a.getRight()).split("@");
    int _length = lefts.length;
    boolean _equals = (_length == 1);
    if (_equals) {
      String _get = lefts[0];
      String _plus = (s + _get);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append(" ");
      _builder.append("= ");
      String _plus_1 = (_plus + _builder);
      String _get_1 = rights[0];
      String _plus_2 = (_plus_1 + _get_1);
      String _plus_3 = (_plus_2 + ";\n");
      s = _plus_3;
    } else {
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("finish {");
      _builder_1.newLine();
      String _plus_4 = (s + _builder_1);
      s = _plus_4;
      int _length_1 = lefts.length;
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _length_1, true);
      for (final Integer k : _doubleDotLessThan) {
        StringConcatenation _builder_2 = new StringConcatenation();
        _builder_2.append("async{ ");
        String _plus_5 = (s + _builder_2);
        String _get_2 = lefts[(k).intValue()];
        String _plus_6 = (_plus_5 + _get_2);
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append(" ");
        _builder_3.append("= ");
        String _plus_7 = (_plus_6 + _builder_3);
        String _get_3 = rights[(k).intValue()];
        String _plus_8 = (_plus_7 + _get_3);
        StringConcatenation _builder_4 = new StringConcatenation();
        _builder_4.append("}");
        String _plus_9 = (_plus_8 + _builder_4);
        String _plus_10 = (_plus_9 + ";\n");
        s = _plus_10;
      }
      StringConcatenation _builder_5 = new StringConcatenation();
      _builder_5.append("}");
      String _plus_11 = (s + _builder_5);
      String _plus_12 = (_plus_11 + "\n");
      s = _plus_12;
    }
    return s;
  }
  
  public String compile(final ExprList e) {
    String s = "";
    String _compile = this.compile(e.getExps());
    String _plus = (s + _compile);
    s = _plus;
    EList<Expr> _exp = e.getExp();
    for (final Expr ex : _exp) {
      String _compile_1 = this.compile(ex);
      String _plus_1 = ((s + "@") + _compile_1);
      s = _plus_1;
    }
    return s;
  }
}

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
grammar InternalFortXTrans;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package srf.transpiler.fortxtrans.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package srf.transpiler.fortxtrans.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import srf.transpiler.fortxtrans.services.FortXTransGrammarAccess;

}

@parser::members {

 	private FortXTransGrammarAccess grammarAccess;

    public InternalFortXTransParser(TokenStream input, FortXTransGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected FortXTransGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getModelAccess().getComponentParserRuleCall_0());
		}
		this_Component_0=ruleComponent
		{
			$current = $this_Component_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getModelAccess().getAPIParserRuleCall_1());
		}
		this_API_1=ruleAPI
		{
			$current = $this_API_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleComponent
entryRuleComponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComponentRule()); }
	iv_ruleComponent=ruleComponent
	{ $current=$iv_ruleComponent.current; }
	EOF;

// Rule Component
ruleComponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='component'
		{
			newLeafNode(otherlv_0, grammarAccess.getComponentAccess().getComponentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getComponentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComponentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getImportsImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"srf.transpiler.fortxtrans.FortXTrans.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getExportsExportParserRuleCall_3_0());
				}
				lv_exports_3_0=ruleExport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					add(
						$current,
						"exports",
						lv_exports_3_0,
						"srf.transpiler.fortxtrans.FortXTrans.Export");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getComponentAccess().getDeclsDeclsParserRuleCall_4_0());
				}
				lv_decls_4_0=ruleDecls
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComponentRule());
					}
					add(
						$current,
						"decls",
						lv_decls_4_0,
						"srf.transpiler.fortxtrans.FortXTrans.Decls");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5='end'
		{
			newLeafNode(otherlv_5, grammarAccess.getComponentAccess().getEndKeyword_5());
		}
	)
;

// Entry rule entryRuleAPI
entryRuleAPI returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAPIRule()); }
	iv_ruleAPI=ruleAPI
	{ $current=$iv_ruleAPI.current; }
	EOF;

// Rule API
ruleAPI returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='api'
		{
			newLeafNode(otherlv_0, grammarAccess.getAPIAccess().getApiKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getAPIAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAPIRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAPIAccess().getImportsImportParserRuleCall_2_0());
				}
				lv_imports_2_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAPIRule());
					}
					add(
						$current,
						"imports",
						lv_imports_2_0,
						"srf.transpiler.fortxtrans.FortXTrans.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getAPIAccess().getEndKeyword_3());
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_imps_0_0='import'
					{
						newLeafNode(lv_imps_0_0, grammarAccess.getImportAccess().getImpsImportKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportRule());
						}
						setWithLastConsumed($current, "imps", lv_imps_0_0, "import");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getImportedNamesImportedNamesParserRuleCall_0_1_0());
					}
					lv_importedNames_1_0=ruleImportedNames
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						set(
							$current,
							"importedNames",
							lv_importedNames_1_0,
							"srf.transpiler.fortxtrans.FortXTrans.ImportedNames");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_imps_2_0='import'
					{
						newLeafNode(lv_imps_2_0, grammarAccess.getImportAccess().getImpsImportKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportRule());
						}
						setWithLastConsumed($current, "imps", lv_imps_2_0, "import");
					}
				)
			)
			(
				(
					lv_api_3_0='api'
					{
						newLeafNode(lv_api_3_0, grammarAccess.getImportAccess().getApiApiKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportRule());
						}
						setWithLastConsumed($current, "api", lv_api_3_0, "api");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getImportAccess().getAliasedimportedNamesAliasedAPINamesParserRuleCall_1_2_0());
					}
					lv_aliasedimportedNames_4_0=ruleAliasedAPINames
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportRule());
						}
						set(
							$current,
							"aliasedimportedNames",
							lv_aliasedimportedNames_4_0,
							"srf.transpiler.fortxtrans.FortXTrans.AliasedAPINames");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExport
entryRuleExport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExportRule()); }
	iv_ruleExport=ruleExport
	{ $current=$iv_ruleExport.current; }
	EOF;

// Rule Export
ruleExport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_exp_0_0='export'
					{
						newLeafNode(lv_exp_0_0, grammarAccess.getExportAccess().getExpExportKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExportRule());
						}
						setWithLastConsumed($current, "exp", lv_exp_0_0, "export");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExportAccess().getExportedNameAPINameParserRuleCall_0_1_0());
					}
					lv_exportedName_1_0=ruleAPIName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportRule());
						}
						add(
							$current,
							"exportedName",
							lv_exportedName_1_0,
							"srf.transpiler.fortxtrans.FortXTrans.APIName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_exp_2_0='export'
					{
						newLeafNode(lv_exp_2_0, grammarAccess.getExportAccess().getExpExportKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExportRule());
						}
						setWithLastConsumed($current, "exp", lv_exp_2_0, "export");
					}
				)
			)
			(
				(
					lv_brack_3_0='{'
					{
						newLeafNode(lv_brack_3_0, grammarAccess.getExportAccess().getBrackLeftCurlyBracketKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExportRule());
						}
						setWithLastConsumed($current, "brack", lv_brack_3_0, "{");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExportAccess().getExportedNameAPINameParserRuleCall_1_2_0());
					}
					lv_exportedName_4_0=ruleAPIName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExportRule());
						}
						add(
							$current,
							"exportedName",
							lv_exportedName_4_0,
							"srf.transpiler.fortxtrans.FortXTrans.APIName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getExportAccess().getCommaKeyword_1_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExportAccess().getExportedNameAPINameParserRuleCall_1_3_1_0());
						}
						lv_exportedName_6_0=ruleAPIName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExportRule());
							}
							add(
								$current,
								"exportedName",
								lv_exportedName_6_0,
								"srf.transpiler.fortxtrans.FortXTrans.APIName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getExportAccess().getRightCurlyBracketKeyword_1_4());
			}
		)
	)
;

// Entry rule entryRuleImportedNames
entryRuleImportedNames returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportedNamesRule()); }
	iv_ruleImportedNames=ruleImportedNames
	{ $current=$iv_ruleImportedNames.current; }
	EOF;

// Rule ImportedNames
ruleImportedNames returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getImportedNamesAccess().getImpnameAPINameParserRuleCall_0_0_0());
					}
					lv_impname_0_0=ruleAPIName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportedNamesRule());
						}
						set(
							$current,
							"impname",
							lv_impname_0_0,
							"srf.transpiler.fortxtrans.FortXTrans.APIName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getImportedNamesAccess().getFullStopKeyword_0_1());
			}
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getImportedNamesAccess().getLeftCurlyBracketKeyword_0_2());
			}
			this_DOTS_3=RULE_DOTS
			{
				newLeafNode(this_DOTS_3, grammarAccess.getImportedNamesAccess().getDOTSTerminalRuleCall_0_3());
			}
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getImportedNamesAccess().getRightCurlyBracketKeyword_0_4());
			}
			(
				(
					(
						lv_except_5_0='except'
						{
							newLeafNode(lv_except_5_0, grammarAccess.getImportedNamesAccess().getExceptExceptKeyword_0_5_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getImportedNamesRule());
							}
							setWithLastConsumed($current, "except", true, "except");
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getImportedNamesAccess().getSimpSimpleNamesParserRuleCall_0_5_1_0());
						}
						lv_simp_6_0=ruleSimpleNames
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImportedNamesRule());
							}
							set(
								$current,
								"simp",
								lv_simp_6_0,
								"srf.transpiler.fortxtrans.FortXTrans.SimpleNames");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getImportedNamesAccess().getImpnameAPINameParserRuleCall_1_0_0());
					}
					lv_impname_7_0=ruleAPIName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportedNamesRule());
						}
						set(
							$current,
							"impname",
							lv_impname_7_0,
							"srf.transpiler.fortxtrans.FortXTrans.APIName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8='.'
			{
				newLeafNode(otherlv_8, grammarAccess.getImportedNamesAccess().getFullStopKeyword_1_1());
			}
			otherlv_9='{'
			{
				newLeafNode(otherlv_9, grammarAccess.getImportedNamesAccess().getLeftCurlyBracketKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportedNamesAccess().getSimpListAliasedSimpleNameParserRuleCall_1_3_0());
					}
					lv_simpList_10_0=ruleAliasedSimpleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportedNamesRule());
						}
						add(
							$current,
							"simpList",
							lv_simpList_10_0,
							"srf.transpiler.fortxtrans.FortXTrans.AliasedSimpleName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_11=','
				{
					newLeafNode(otherlv_11, grammarAccess.getImportedNamesAccess().getCommaKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getImportedNamesAccess().getSimpListAliasedSimpleNameParserRuleCall_1_4_1_0());
						}
						lv_simpList_12_0=ruleAliasedSimpleName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImportedNamesRule());
							}
							add(
								$current,
								"simpList",
								lv_simpList_12_0,
								"srf.transpiler.fortxtrans.FortXTrans.AliasedSimpleName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				(
					(
						lv_comma_13_0=','
						{
							newLeafNode(lv_comma_13_0, grammarAccess.getImportedNamesAccess().getCommaCommaKeyword_1_5_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getImportedNamesRule());
							}
							setWithLastConsumed($current, "comma", true, ",");
						}
					)
				)
				(
					(
						lv_dots_14_0=RULE_DOTS
						{
							newLeafNode(lv_dots_14_0, grammarAccess.getImportedNamesAccess().getDotsDOTSTerminalRuleCall_1_5_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getImportedNamesRule());
							}
							setWithLastConsumed(
								$current,
								"dots",
								true,
								"srf.transpiler.fortxtrans.FortXTrans.DOTS");
						}
					)
				)
			)?
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getImportedNamesAccess().getRightCurlyBracketKeyword_1_6());
			}
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getImportedNamesAccess().getImpnameAPINameParserRuleCall_2_0_0());
					}
					lv_impname_16_0=ruleAPIName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportedNamesRule());
						}
						set(
							$current,
							"impname",
							lv_impname_16_0,
							"srf.transpiler.fortxtrans.FortXTrans.APIName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_17='as'
				{
					newLeafNode(otherlv_17, grammarAccess.getImportedNamesAccess().getAsKeyword_2_1_0());
				}
				(
					(
						lv_asname_18_0=RULE_ID
						{
							newLeafNode(lv_asname_18_0, grammarAccess.getImportedNamesAccess().getAsnameIDTerminalRuleCall_2_1_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getImportedNamesRule());
							}
							setWithLastConsumed(
								$current,
								"asname",
								lv_asname_18_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0_0());
			}
			this_DOTS_1=RULE_DOTS
			{
				$current.merge(this_DOTS_1);
			}
			{
				newLeafNode(this_DOTS_1, grammarAccess.getQualifiedNameAccess().getDOTSTerminalRuleCall_0_1());
			}
		)
		    |
		(
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_0());
			}
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_1_0());
				}
				this_ID_4=RULE_ID
				{
					$current.merge(this_ID_4);
				}
				{
					newLeafNode(this_ID_4, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1_1());
				}
			)*
			this_DOTS_5=RULE_DOTS
			{
				$current.merge(this_DOTS_5);
			}
			{
				newLeafNode(this_DOTS_5, grammarAccess.getQualifiedNameAccess().getDOTSTerminalRuleCall_1_2());
			}
		)
		    |
		(
			this_ID_6=RULE_ID
			{
				$current.merge(this_ID_6);
			}
			{
				newLeafNode(this_ID_6, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_2_0());
			}
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_2_1_0());
				}
				this_ID_8=RULE_ID
				{
					$current.merge(this_ID_8);
				}
				{
					newLeafNode(this_ID_8, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_2_1_1());
				}
			)*
		)
	)
;

// Entry rule entryRuleAPIName
entryRuleAPIName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAPINameRule()); }
	iv_ruleAPIName=ruleAPIName
	{ $current=$iv_ruleAPIName.current.getText(); }
	EOF;

// Rule APIName
ruleAPIName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getAPINameAccess().getIDTerminalRuleCall_0_0());
			}
			this_DOTS_1=RULE_DOTS
			{
				$current.merge(this_DOTS_1);
			}
			{
				newLeafNode(this_DOTS_1, grammarAccess.getAPINameAccess().getDOTSTerminalRuleCall_0_1());
			}
		)
		    |
		(
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getAPINameAccess().getIDTerminalRuleCall_1_0());
			}
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAPINameAccess().getFullStopKeyword_1_1_0());
				}
				this_ID_4=RULE_ID
				{
					$current.merge(this_ID_4);
				}
				{
					newLeafNode(this_ID_4, grammarAccess.getAPINameAccess().getIDTerminalRuleCall_1_1_1());
				}
			)*
			this_DOTS_5=RULE_DOTS
			{
				$current.merge(this_DOTS_5);
			}
			{
				newLeafNode(this_DOTS_5, grammarAccess.getAPINameAccess().getDOTSTerminalRuleCall_1_2());
			}
		)
		    |
		(
			this_ID_6=RULE_ID
			{
				$current.merge(this_ID_6);
			}
			{
				newLeafNode(this_ID_6, grammarAccess.getAPINameAccess().getIDTerminalRuleCall_2_0());
			}
			(
				kw='.'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAPINameAccess().getFullStopKeyword_2_1_0());
				}
				this_ID_8=RULE_ID
				{
					$current.merge(this_ID_8);
				}
				{
					newLeafNode(this_ID_8, grammarAccess.getAPINameAccess().getIDTerminalRuleCall_2_1_1());
				}
			)*
		)
	)
;

// Entry rule entryRuleSimpleNames
entryRuleSimpleNames returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleNamesRule()); }
	iv_ruleSimpleNames=ruleSimpleNames
	{ $current=$iv_ruleSimpleNames.current; }
	EOF;

// Rule SimpleNames
ruleSimpleNames returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleNamesAccess().getNameListSimpleNameParserRuleCall_0_0());
				}
				lv_nameList_0_0=ruleSimpleName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSimpleNamesRule());
					}
					add(
						$current,
						"nameList",
						lv_nameList_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.SimpleName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_brack_1_0='{'
					{
						newLeafNode(lv_brack_1_0, grammarAccess.getSimpleNamesAccess().getBrackLeftCurlyBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleNamesRule());
						}
						setWithLastConsumed($current, "brack", lv_brack_1_0, "{");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleNamesAccess().getNameListSimpleNameParserRuleCall_1_1_0());
					}
					lv_nameList_2_0=ruleSimpleName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleNamesRule());
						}
						add(
							$current,
							"nameList",
							lv_nameList_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.SimpleName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getSimpleNamesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleNamesAccess().getNameListSimpleNameParserRuleCall_1_2_1_0());
						}
						lv_nameList_4_0=ruleSimpleName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleNamesRule());
							}
							add(
								$current,
								"nameList",
								lv_nameList_4_0,
								"srf.transpiler.fortxtrans.FortXTrans.SimpleName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getSimpleNamesAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleSimpleName
entryRuleSimpleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleNameRule()); }
	iv_ruleSimpleName=ruleSimpleName
	{ $current=$iv_ruleSimpleName.current; }
	EOF;

// Rule SimpleName
ruleSimpleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getSimpleNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSimpleNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleAliasedSimpleName
entryRuleAliasedSimpleName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAliasedSimpleNameRule()); }
	iv_ruleAliasedSimpleName=ruleAliasedSimpleName
	{ $current=$iv_ruleAliasedSimpleName.current; }
	EOF;

// Rule AliasedSimpleName
ruleAliasedSimpleName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_orig_0_0=RULE_ID
				{
					newLeafNode(lv_orig_0_0, grammarAccess.getAliasedSimpleNameAccess().getOrigIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAliasedSimpleNameRule());
					}
					setWithLastConsumed(
						$current,
						"orig",
						lv_orig_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getAliasedSimpleNameAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_asName_2_0=RULE_ID
					{
						newLeafNode(lv_asName_2_0, grammarAccess.getAliasedSimpleNameAccess().getAsNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAliasedSimpleNameRule());
						}
						setWithLastConsumed(
							$current,
							"asName",
							lv_asName_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAliasedAPINames
entryRuleAliasedAPINames returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAliasedAPINamesRule()); }
	iv_ruleAliasedAPINames=ruleAliasedAPINames
	{ $current=$iv_ruleAliasedAPINames.current; }
	EOF;

// Rule AliasedAPINames
ruleAliasedAPINames returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAliasedAPINamesAccess().getNameListAliasedAPINameParserRuleCall_0_0());
				}
				lv_nameList_0_0=ruleAliasedAPIName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAliasedAPINamesRule());
					}
					add(
						$current,
						"nameList",
						lv_nameList_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.AliasedAPIName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_brack_1_0='{'
					{
						newLeafNode(lv_brack_1_0, grammarAccess.getAliasedAPINamesAccess().getBrackLeftCurlyBracketKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAliasedAPINamesRule());
						}
						setWithLastConsumed($current, "brack", lv_brack_1_0, "{");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAliasedAPINamesAccess().getNameListAliasedAPINameParserRuleCall_1_1_0());
					}
					lv_nameList_2_0=ruleAliasedAPIName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAliasedAPINamesRule());
						}
						add(
							$current,
							"nameList",
							lv_nameList_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.AliasedAPIName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getAliasedAPINamesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAliasedAPINamesAccess().getNameListAliasedAPINameParserRuleCall_1_2_1_0());
						}
						lv_nameList_4_0=ruleAliasedAPIName
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAliasedAPINamesRule());
							}
							add(
								$current,
								"nameList",
								lv_nameList_4_0,
								"srf.transpiler.fortxtrans.FortXTrans.AliasedAPIName");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='}'
			{
				newLeafNode(otherlv_5, grammarAccess.getAliasedAPINamesAccess().getRightCurlyBracketKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleAliasedAPIName
entryRuleAliasedAPIName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAliasedAPINameRule()); }
	iv_ruleAliasedAPIName=ruleAliasedAPIName
	{ $current=$iv_ruleAliasedAPIName.current; }
	EOF;

// Rule AliasedAPIName
ruleAliasedAPIName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAliasedAPINameAccess().getOrigAPINameParserRuleCall_0_0());
				}
				lv_orig_0_0=ruleAPIName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAliasedAPINameRule());
					}
					set(
						$current,
						"orig",
						lv_orig_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.APIName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='as'
			{
				newLeafNode(otherlv_1, grammarAccess.getAliasedAPINameAccess().getAsKeyword_1_0());
			}
			(
				(
					lv_asName_2_0=RULE_ID
					{
						newLeafNode(lv_asName_2_0, grammarAccess.getAliasedAPINameAccess().getAsNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAliasedAPINameRule());
						}
						setWithLastConsumed(
							$current,
							"asName",
							lv_asName_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleDecls
entryRuleDecls returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclsRule()); }
	iv_ruleDecls=ruleDecls
	{ $current=$iv_ruleDecls.current; }
	EOF;

// Rule Decls
ruleDecls returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDeclsAccess().getDeclsDeclParserRuleCall_0());
			}
			lv_decls_0_0=ruleDecl
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDeclsRule());
				}
				add(
					$current,
					"decls",
					lv_decls_0_0,
					"srf.transpiler.fortxtrans.FortXTrans.Decl");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	iv_ruleDecl=ruleDecl
	{ $current=$iv_ruleDecl.current; }
	EOF;

// Rule Decl
ruleDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclAccess().getFunctionFnDeclParserRuleCall_0_0());
				}
				lv_function_0_0=ruleFnDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclRule());
					}
					set(
						$current,
						"function",
						lv_function_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.FnDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclAccess().getFieldFieldDeclParserRuleCall_1_0());
				}
				lv_field_1_0=ruleFieldDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclRule());
					}
					set(
						$current,
						"field",
						lv_field_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.FieldDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFnMods
entryRuleFnMods returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFnModsRule()); }
	iv_ruleFnMods=ruleFnMods
	{ $current=$iv_ruleFnMods.current; }
	EOF;

// Rule FnMods
ruleFnMods returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getFnModsAccess().getModsFnModParserRuleCall_0());
			}
			lv_mods_0_0=ruleFnMod
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getFnModsRule());
				}
				add(
					$current,
					"mods",
					lv_mods_0_0,
					"srf.transpiler.fortxtrans.FortXTrans.FnMod");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleFnMod
entryRuleFnMod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFnModRule()); }
	iv_ruleFnMod=ruleFnMod
	{ $current=$iv_ruleFnMod.current; }
	EOF;

// Rule FnMod
ruleFnMod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_modtype_0_0='private'
				{
					newLeafNode(lv_modtype_0_0, grammarAccess.getFnModAccess().getModtypePrivateKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFnModRule());
					}
					setWithLastConsumed($current, "modtype", lv_modtype_0_0, "private");
				}
			)
		)
		    |
		(
			(
				lv_modtype_1_0='test'
				{
					newLeafNode(lv_modtype_1_0, grammarAccess.getFnModAccess().getModtypeTestKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFnModRule());
					}
					setWithLastConsumed($current, "modtype", lv_modtype_1_0, "test");
				}
			)
		)
		    |
		(
			(
				lv_modtype_2_0='atomic'
				{
					newLeafNode(lv_modtype_2_0, grammarAccess.getFnModAccess().getModtypeAtomicKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFnModRule());
					}
					setWithLastConsumed($current, "modtype", lv_modtype_2_0, "atomic");
				}
			)
		)
		    |
		(
			(
				lv_modtype_3_0='io'
				{
					newLeafNode(lv_modtype_3_0, grammarAccess.getFnModAccess().getModtypeIoKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFnModRule());
					}
					setWithLastConsumed($current, "modtype", lv_modtype_3_0, "io");
				}
			)
		)
	)
;

// Entry rule entryRuleValParam
entryRuleValParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValParamRule()); }
	iv_ruleValParam=ruleValParam
	{ $current=$iv_ruleValParam.current; }
	EOF;

// Rule ValParam
ruleValParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValParamAccess().getParamsParamParserRuleCall_0_0());
				}
				lv_params_0_0=ruleParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValParamRule());
					}
					add(
						$current,
						"params",
						lv_params_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.Param");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_brack_1_0='('
					{
						newLeafNode(lv_brack_1_0, grammarAccess.getValParamAccess().getBrackLeftParenthesisKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getValParamRule());
						}
						setWithLastConsumed($current, "brack", lv_brack_1_0, "(");
					}
				)
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getValParamAccess().getParamsParamParserRuleCall_1_1_0_0());
						}
						lv_params_2_0=ruleParam
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getValParamRule());
							}
							add(
								$current,
								"params",
								lv_params_2_0,
								"srf.transpiler.fortxtrans.FortXTrans.Param");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_3=','
					{
						newLeafNode(otherlv_3, grammarAccess.getValParamAccess().getCommaKeyword_1_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getValParamAccess().getParamsParamParserRuleCall_1_1_1_1_0());
							}
							lv_params_4_0=ruleParam
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getValParamRule());
								}
								add(
									$current,
									"params",
									lv_params_4_0,
									"srf.transpiler.fortxtrans.FortXTrans.Param");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getValParamAccess().getRightParenthesisKeyword_1_2());
			}
		)
	)
;

// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	iv_ruleParam=ruleParam
	{ $current=$iv_ruleParam.current; }
	EOF;

// Rule Param
ruleParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAccess().getBIdBindIdParserRuleCall_0_0());
				}
				lv_bId_0_0=ruleBindId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamRule());
					}
					set(
						$current,
						"bId",
						lv_bId_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.BindId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getParamAccess().getIstypeIsTypeParserRuleCall_1_0());
				}
				lv_istype_1_0=ruleIsType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParamRule());
					}
					set(
						$current,
						"istype",
						lv_istype_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.IsType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleRetType
entryRuleRetType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRetTypeRule()); }
	iv_ruleRetType=ruleRetType
	{ $current=$iv_ruleRetType.current; }
	EOF;

// Rule RetType
ruleRetType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=':'
			{
				newLeafNode(otherlv_0, grammarAccess.getRetTypeAccess().getColonKeyword_0_0());
			}
			(
				(
					lv_empty_1_0='('
					{
						newLeafNode(lv_empty_1_0, grammarAccess.getRetTypeAccess().getEmptyLeftParenthesisKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getRetTypeRule());
						}
						setWithLastConsumed($current, "empty", lv_empty_1_0, "(");
					}
				)
			)
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getRetTypeAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3=':'
			{
				newLeafNode(otherlv_3, grammarAccess.getRetTypeAccess().getColonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRetTypeAccess().getTypeTypeParserRuleCall_1_1_0());
					}
					lv_type_4_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRetTypeRule());
						}
						set(
							$current,
							"type",
							lv_type_4_0,
							"srf.transpiler.fortxtrans.FortXTrans.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleTupleType
entryRuleTupleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleTypeRule()); }
	iv_ruleTupleType=ruleTupleType
	{ $current=$iv_ruleTupleType.current; }
	EOF;

// Rule TupleType
ruleTupleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getTupleTypeAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTupleTypeAccess().getTypesTypeParserRuleCall_1_0());
				}
				lv_types_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTupleTypeRule());
					}
					add(
						$current,
						"types",
						lv_types_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getTupleTypeAccess().getCommaKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTupleTypeAccess().getTypesTypeParserRuleCall_2_1_0());
					}
					lv_types_3_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTupleTypeRule());
						}
						add(
							$current,
							"types",
							lv_types_3_0,
							"srf.transpiler.fortxtrans.FortXTrans.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getTupleTypeAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_tname_0_0=RULE_ID
			{
				newLeafNode(lv_tname_0_0, grammarAccess.getTypeAccess().getTnameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getTypeRule());
				}
				setWithLastConsumed(
					$current,
					"tname",
					lv_tname_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFnDecl
entryRuleFnDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFnDeclRule()); }
	iv_ruleFnDecl=ruleFnDecl
	{ $current=$iv_ruleFnDecl.current; }
	EOF;

// Rule FnDecl
ruleFnDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFnDeclAccess().getModsFnModsParserRuleCall_0_0());
				}
				lv_mods_0_0=ruleFnMods
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFnDeclRule());
					}
					set(
						$current,
						"mods",
						lv_mods_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.FnMods");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFnDeclAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFnDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFnDeclAccess().getParamsValParamParserRuleCall_2_0());
				}
				lv_params_2_0=ruleValParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFnDeclRule());
					}
					set(
						$current,
						"params",
						lv_params_2_0,
						"srf.transpiler.fortxtrans.FortXTrans.ValParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFnDeclAccess().getRetValRetTypeParserRuleCall_3_0());
				}
				lv_retVal_3_0=ruleRetType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFnDeclRule());
					}
					set(
						$current,
						"retVal",
						lv_retVal_3_0,
						"srf.transpiler.fortxtrans.FortXTrans.RetType");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					lv_body_4_0='='
					{
						newLeafNode(lv_body_4_0, grammarAccess.getFnDeclAccess().getBodyEqualsSignKeyword_4_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFnDeclRule());
						}
						setWithLastConsumed($current, "body", true, "=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFnDeclAccess().getFnItselfExprParserRuleCall_4_1_0());
					}
					lv_fnItself_5_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFnDeclRule());
						}
						set(
							$current,
							"fnItself",
							lv_fnItself_5_0,
							"srf.transpiler.fortxtrans.FortXTrans.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprAccess().getFrontExprFrontParserRuleCall_0_0());
				}
				lv_front_0_0=ruleExprFront
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprRule());
					}
					set(
						$current,
						"front",
						lv_front_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.ExprFront");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExprAccess().getTailsExprTailParserRuleCall_1_0());
				}
				lv_tails_1_0=ruleExprTail
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprRule());
					}
					add(
						$current,
						"tails",
						lv_tails_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.ExprTail");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleExprFront
entryRuleExprFront returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprFrontRule()); }
	iv_ruleExprFront=ruleExprFront
	{ $current=$iv_ruleExprFront.current; }
	EOF;

// Rule ExprFront
ruleExprFront returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprFrontAccess().getDelimDelimitedExprParserRuleCall_0_0());
				}
				lv_delim_0_0=ruleDelimitedExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprFrontRule());
					}
					set(
						$current,
						"delim",
						lv_delim_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.DelimitedExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprFrontAccess().getIdQualifiedNameParserRuleCall_1_0());
				}
				lv_id_1_0=ruleQualifiedName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprFrontRule());
					}
					set(
						$current,
						"id",
						lv_id_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.QualifiedName");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprTail
entryRuleExprTail returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprTailRule()); }
	iv_ruleExprTail=ruleExprTail
	{ $current=$iv_ruleExprTail.current; }
	EOF;

// Rule ExprTail
ruleExprTail returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='as'
		{
			newLeafNode(otherlv_0, grammarAccess.getExprTailAccess().getAsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprTailAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprTailRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDelimitedExpr
entryRuleDelimitedExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDelimitedExprRule()); }
	iv_ruleDelimitedExpr=ruleDelimitedExpr
	{ $current=$iv_ruleDelimitedExpr.current; }
	EOF;

// Rule DelimitedExpr
ruleDelimitedExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDelimitedExprAccess().getDodDoParserRuleCall_0_0());
				}
				lv_dod_0_0=ruleDo
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
					}
					set(
						$current,
						"dod",
						lv_dod_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.Do");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					lv_awhile_1_0='while'
					{
						newLeafNode(lv_awhile_1_0, grammarAccess.getDelimitedExprAccess().getAwhileWhileKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDelimitedExprRule());
						}
						setWithLastConsumed($current, "awhile", lv_awhile_1_0, "while");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getExprExprParserRuleCall_1_1_0());
					}
					lv_expr_2_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"expr",
							lv_expr_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getWhiledodDoParserRuleCall_1_2_0());
					}
					lv_whiledod_3_0=ruleDo
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"whiledod",
							lv_whiledod_3_0,
							"srf.transpiler.fortxtrans.FortXTrans.Do");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_afor_4_0='for'
					{
						newLeafNode(lv_afor_4_0, grammarAccess.getDelimitedExprAccess().getAforForKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDelimitedExprRule());
						}
						setWithLastConsumed($current, "afor", lv_afor_4_0, "for");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getGenGeneratorsParserRuleCall_2_1_0());
					}
					lv_gen_5_0=ruleGenerators
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"gen",
							lv_gen_5_0,
							"srf.transpiler.fortxtrans.FortXTrans.Generators");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getDofrontDoFrontParserRuleCall_2_2_0());
					}
					lv_dofront_6_0=ruleDoFront
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"dofront",
							lv_dofront_6_0,
							"srf.transpiler.fortxtrans.FortXTrans.DoFront");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_7='end'
			{
				newLeafNode(otherlv_7, grammarAccess.getDelimitedExprAccess().getEndKeyword_2_3());
			}
		)
		    |
		(
			(
				(
					lv_anif_8_0='if'
					{
						newLeafNode(lv_anif_8_0, grammarAccess.getDelimitedExprAccess().getAnifIfKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDelimitedExprRule());
						}
						setWithLastConsumed($current, "anif", lv_anif_8_0, "if");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getCondExprParserRuleCall_3_1_0());
					}
					lv_cond_9_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"cond",
							lv_cond_9_0,
							"srf.transpiler.fortxtrans.FortXTrans.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_10='then'
			{
				newLeafNode(otherlv_10, grammarAccess.getDelimitedExprAccess().getThenKeyword_3_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getBlockBlockElemsParserRuleCall_3_3_0());
					}
					lv_block_11_0=ruleBlockElems
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"block",
							lv_block_11_0,
							"srf.transpiler.fortxtrans.FortXTrans.BlockElems");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getElifsElifsParserRuleCall_3_4_0());
					}
					lv_elifs_12_0=ruleElifs
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"elifs",
							lv_elifs_12_0,
							"srf.transpiler.fortxtrans.FortXTrans.Elifs");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getDelimitedExprAccess().getElsElseParserRuleCall_3_5_0());
					}
					lv_els_13_0=ruleElse
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
						}
						set(
							$current,
							"els",
							lv_els_13_0,
							"srf.transpiler.fortxtrans.FortXTrans.Else");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_14='end'
			{
				newLeafNode(otherlv_14, grammarAccess.getDelimitedExprAccess().getEndKeyword_3_6());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDelimitedExprAccess().getParParanthesizedParserRuleCall_4_0());
				}
				lv_par_15_0=ruleParanthesized
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDelimitedExprRule());
					}
					set(
						$current,
						"par",
						lv_par_15_0,
						"srf.transpiler.fortxtrans.FortXTrans.Paranthesized");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElifs
entryRuleElifs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElifsRule()); }
	iv_ruleElifs=ruleElifs
	{ $current=$iv_ruleElifs.current; }
	EOF;

// Rule Elifs
ruleElifs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getElifsAccess().getEElifParserRuleCall_0_0());
				}
				lv_e_0_0=ruleElif
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElifsRule());
					}
					add(
						$current,
						"e",
						lv_e_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.Elif");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getElifsAccess().getEElifParserRuleCall_1_0());
				}
				lv_e_1_0=ruleElif
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElifsRule());
					}
					add(
						$current,
						"e",
						lv_e_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Elif");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleElif
entryRuleElif returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElifRule()); }
	iv_ruleElif=ruleElif
	{ $current=$iv_ruleElif.current; }
	EOF;

// Rule Elif
ruleElif returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='elif'
		{
			newLeafNode(otherlv_0, grammarAccess.getElifAccess().getElifKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElifAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElifRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='then'
		{
			newLeafNode(otherlv_2, grammarAccess.getElifAccess().getThenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElifAccess().getBlockBlockElemsParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlockElems
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElifRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"srf.transpiler.fortxtrans.FortXTrans.BlockElems");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleElse
entryRuleElse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElseRule()); }
	iv_ruleElse=ruleElse
	{ $current=$iv_ruleElse.current; }
	EOF;

// Rule Else
ruleElse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='else'
		{
			newLeafNode(otherlv_0, grammarAccess.getElseAccess().getElseKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getElseAccess().getBlockBlockElemsParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlockElems
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getElseRule());
					}
					set(
						$current,
						"block",
						lv_block_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.BlockElems");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGenerators
entryRuleGenerators returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeneratorsRule()); }
	iv_ruleGenerators=ruleGenerators
	{ $current=$iv_ruleGenerators.current; }
	EOF;

// Rule Generators
ruleGenerators returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGeneratorsAccess().getBindingBindingParserRuleCall_0_0());
				}
				lv_binding_0_0=ruleBinding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGeneratorsRule());
					}
					set(
						$current,
						"binding",
						lv_binding_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.Binding");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getGeneratorsAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGeneratorsAccess().getClauseGenClauseParserRuleCall_1_1_0());
					}
					lv_clause_2_0=ruleGenClause
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGeneratorsRule());
						}
						add(
							$current,
							"clause",
							lv_clause_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.GenClause");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBinding
entryRuleBinding returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBindingRule()); }
	iv_ruleBinding=ruleBinding
	{ $current=$iv_ruleBinding.current; }
	EOF;

// Rule Binding
ruleBinding returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBindingAccess().getIdtupIdOrTupleParserRuleCall_0_0_0());
					}
					lv_idtup_0_0=ruleIdOrTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBindingRule());
						}
						set(
							$current,
							"idtup",
							lv_idtup_0_0,
							"srf.transpiler.fortxtrans.FortXTrans.IdOrTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='<-'
			{
				newLeafNode(otherlv_1, grammarAccess.getBindingAccess().getLessThanSignHyphenMinusKeyword_0_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBindingAccess().getExprExprParserRuleCall_0_2_0());
					}
					lv_expr_2_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBindingRule());
						}
						set(
							$current,
							"expr",
							lv_expr_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBindingAccess().getIdtupIdOrTupleParserRuleCall_1_0_0());
					}
					lv_idtup_3_0=ruleIdOrTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBindingRule());
						}
						set(
							$current,
							"idtup",
							lv_idtup_3_0,
							"srf.transpiler.fortxtrans.FortXTrans.IdOrTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='<-'
			{
				newLeafNode(otherlv_4, grammarAccess.getBindingAccess().getLessThanSignHyphenMinusKeyword_1_1());
			}
			(
				(
					lv_seq_5_0='seq'
					{
						newLeafNode(lv_seq_5_0, grammarAccess.getBindingAccess().getSeqSeqKeyword_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBindingRule());
						}
						setWithLastConsumed($current, "seq", lv_seq_5_0, "seq");
					}
				)
			)
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getBindingAccess().getLeftParenthesisKeyword_1_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBindingAccess().getExprExprParserRuleCall_1_4_0());
					}
					lv_expr_7_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBindingRule());
						}
						set(
							$current,
							"expr",
							lv_expr_7_0,
							"srf.transpiler.fortxtrans.FortXTrans.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getBindingAccess().getRightParenthesisKeyword_1_5());
			}
		)
	)
;

// Entry rule entryRuleGenClause
entryRuleGenClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGenClauseRule()); }
	iv_ruleGenClause=ruleGenClause
	{ $current=$iv_ruleGenClause.current; }
	EOF;

// Rule GenClause
ruleGenClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGenClauseAccess().getBindingBindingParserRuleCall_0_0());
				}
				lv_binding_0_0=ruleBinding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenClauseRule());
					}
					set(
						$current,
						"binding",
						lv_binding_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.Binding");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getGenClauseAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGenClauseRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlockElems
entryRuleBlockElems returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockElemsRule()); }
	iv_ruleBlockElems=ruleBlockElems
	{ $current=$iv_ruleBlockElems.current; }
	EOF;

// Rule BlockElems
ruleBlockElems returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockElemsAccess().getBlockBlockElemParserRuleCall_0_0());
				}
				lv_block_0_0=ruleBlockElem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockElemsRule());
					}
					add(
						$current,
						"block",
						lv_block_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.BlockElem");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockElemsAccess().getBlockBlockElemParserRuleCall_1_0());
				}
				lv_block_1_0=ruleBlockElem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockElemsRule());
					}
					add(
						$current,
						"block",
						lv_block_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.BlockElem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleBlockElem
entryRuleBlockElem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockElemRule()); }
	iv_ruleBlockElem=ruleBlockElem
	{ $current=$iv_ruleBlockElem.current; }
	EOF;

// Rule BlockElem
ruleBlockElem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBlockElemAccess().getExpExprParserRuleCall_0());
			}
			lv_exp_0_0=ruleExpr
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBlockElemRule());
				}
				set(
					$current,
					"exp",
					lv_exp_0_0,
					"srf.transpiler.fortxtrans.FortXTrans.Expr");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleParanthesized
entryRuleParanthesized returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParanthesizedRule()); }
	iv_ruleParanthesized=ruleParanthesized
	{ $current=$iv_ruleParanthesized.current; }
	EOF;

// Rule Paranthesized
ruleParanthesized returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParanthesizedAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getParanthesizedAccess().getExprExprParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParanthesizedRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getParanthesizedAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleDo
entryRuleDo returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoRule()); }
	iv_ruleDo=ruleDo
	{ $current=$iv_ruleDo.current; }
	EOF;

// Rule Do
ruleDo returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDoAccess().getDofsDoFrontParserRuleCall_0_0());
				}
				lv_dofs_0_0=ruleDoFront
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoRule());
					}
					add(
						$current,
						"dofs",
						lv_dofs_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.DoFront");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='also'
			{
				newLeafNode(otherlv_1, grammarAccess.getDoAccess().getAlsoKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDoAccess().getDofsDoFrontParserRuleCall_1_1_0());
					}
					lv_dofs_2_0=ruleDoFront
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDoRule());
						}
						add(
							$current,
							"dofs",
							lv_dofs_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.DoFront");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_3='end'
		{
			newLeafNode(otherlv_3, grammarAccess.getDoAccess().getEndKeyword_2());
		}
	)
;

// Entry rule entryRuleDoFront
entryRuleDoFront returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoFrontRule()); }
	iv_ruleDoFront=ruleDoFront
	{ $current=$iv_ruleDoFront.current; }
	EOF;

// Rule DoFront
ruleDoFront returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_at_0_0='at'
					{
						newLeafNode(lv_at_0_0, grammarAccess.getDoFrontAccess().getAtAtKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDoFrontRule());
						}
						setWithLastConsumed($current, "at", true, "at");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDoFrontAccess().getExpExprParserRuleCall_0_1_0());
					}
					lv_exp_1_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDoFrontRule());
						}
						set(
							$current,
							"exp",
							lv_exp_1_0,
							"srf.transpiler.fortxtrans.FortXTrans.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				lv_atom_2_0='atomic'
				{
					newLeafNode(lv_atom_2_0, grammarAccess.getDoFrontAccess().getAtomAtomicKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDoFrontRule());
					}
					setWithLastConsumed($current, "atom", true, "atomic");
				}
			)
		)?
		otherlv_3='do'
		{
			newLeafNode(otherlv_3, grammarAccess.getDoFrontAccess().getDoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoFrontAccess().getBlockBlockElemsParserRuleCall_3_0());
				}
				lv_block_4_0=ruleBlockElems
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoFrontRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"srf.transpiler.fortxtrans.FortXTrans.BlockElems");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIdOrTuple
entryRuleIdOrTuple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdOrTupleRule()); }
	iv_ruleIdOrTuple=ruleIdOrTuple
	{ $current=$iv_ruleIdOrTuple.current; }
	EOF;

// Rule IdOrTuple
ruleIdOrTuple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getIdOrTupleAccess().getBidBindIdParserRuleCall_0_0());
				}
				lv_bid_0_0=ruleBindId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdOrTupleRule());
					}
					add(
						$current,
						"bid",
						lv_bid_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.BindId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getIdOrTupleAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIdOrTupleAccess().getBidBindIdParserRuleCall_1_1_0());
					}
					lv_bid_2_0=ruleBindId
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIdOrTupleRule());
						}
						add(
							$current,
							"bid",
							lv_bid_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.BindId");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getIdOrTupleAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getIdOrTupleAccess().getBidBindIdParserRuleCall_1_2_1_0());
						}
						lv_bid_4_0=ruleBindId
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIdOrTupleRule());
							}
							add(
								$current,
								"bid",
								lv_bid_4_0,
								"srf.transpiler.fortxtrans.FortXTrans.BindId");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getIdOrTupleAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleBindId
entryRuleBindId returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBindIdRule()); }
	iv_ruleBindId=ruleBindId
	{ $current=$iv_ruleBindId.current.getText(); }
	EOF;

// Rule BindId
ruleBindId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getBindIdAccess().getIDTerminalRuleCall_0());
		}
		    |
		kw='_'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBindIdAccess().get_Keyword_1());
		}
	)
;

// Entry rule entryRuleIsType
entryRuleIsType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIsTypeRule()); }
	iv_ruleIsType=ruleIsType
	{ $current=$iv_ruleIsType.current; }
	EOF;

// Rule IsType
ruleIsType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getIsTypeAccess().getColonKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIsTypeAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIsTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFieldDecl
entryRuleFieldDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_ruleFieldDecl=ruleFieldDecl
	{ $current=$iv_ruleFieldDecl.current; }
	EOF;

// Rule FieldDecl
ruleFieldDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_pri_0_0='private'
					{
						newLeafNode(lv_pri_0_0, grammarAccess.getFieldDeclAccess().getPriPrivateKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "pri", lv_pri_0_0, "private");
					}
				)
			)?
			(
				(
					lv_mut_1_0='var'
					{
						newLeafNode(lv_mut_1_0, grammarAccess.getFieldDeclAccess().getMutVarKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "mut", lv_mut_1_0, "var");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getVarsNoNewlineVarWTypesParserRuleCall_0_2_0());
					}
					lv_vars_2_0=ruleNoNewlineVarWTypes
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"vars",
							lv_vars_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.NoNewlineVarWTypes");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getInitInitValParserRuleCall_0_3_0());
					}
					lv_init_3_0=ruleInitVal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"init",
							lv_init_3_0,
							"srf.transpiler.fortxtrans.FortXTrans.InitVal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_pri_4_0='private'
					{
						newLeafNode(lv_pri_4_0, grammarAccess.getFieldDeclAccess().getPriPrivateKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "pri", lv_pri_4_0, "private");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getIdtupIdOrTupleParserRuleCall_1_1_0());
					}
					lv_idtup_5_0=ruleIdOrTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"idtup",
							lv_idtup_5_0,
							"srf.transpiler.fortxtrans.FortXTrans.IdOrTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6='='
			{
				newLeafNode(otherlv_6, grammarAccess.getFieldDeclAccess().getEqualsSignKeyword_1_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getLitTupLiteralTupleParserRuleCall_1_3_0());
					}
					lv_litTup_7_0=ruleLiteralTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"litTup",
							lv_litTup_7_0,
							"srf.transpiler.fortxtrans.FortXTrans.LiteralTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_pri_8_0='private'
					{
						newLeafNode(lv_pri_8_0, grammarAccess.getFieldDeclAccess().getPriPrivateKeyword_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "pri", lv_pri_8_0, "private");
					}
				)
			)?
			(
				(
					lv_mut_9_0='var'
					{
						newLeafNode(lv_mut_9_0, grammarAccess.getFieldDeclAccess().getMutVarKeyword_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "mut", lv_mut_9_0, "var");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getIdtupIdOrTupleParserRuleCall_2_2_0());
					}
					lv_idtup_10_0=ruleIdOrTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"idtup",
							lv_idtup_10_0,
							"srf.transpiler.fortxtrans.FortXTrans.IdOrTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11=':'
			{
				newLeafNode(otherlv_11, grammarAccess.getFieldDeclAccess().getColonKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeTypeParserRuleCall_2_4_0());
					}
					lv_type_12_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"type",
							lv_type_12_0,
							"srf.transpiler.fortxtrans.FortXTrans.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_DOTS_13=RULE_DOTS
			{
				newLeafNode(this_DOTS_13, grammarAccess.getFieldDeclAccess().getDOTSTerminalRuleCall_2_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getInitInitValParserRuleCall_2_6_0());
					}
					lv_init_14_0=ruleInitVal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"init",
							lv_init_14_0,
							"srf.transpiler.fortxtrans.FortXTrans.InitVal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_pri_15_0='private'
					{
						newLeafNode(lv_pri_15_0, grammarAccess.getFieldDeclAccess().getPriPrivateKeyword_3_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "pri", lv_pri_15_0, "private");
					}
				)
			)?
			(
				(
					lv_mut_16_0='var'
					{
						newLeafNode(lv_mut_16_0, grammarAccess.getFieldDeclAccess().getMutVarKeyword_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFieldDeclRule());
						}
						setWithLastConsumed($current, "mut", lv_mut_16_0, "var");
					}
				)
			)?
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getIdtupIdOrTupleParserRuleCall_3_2_0());
					}
					lv_idtup_17_0=ruleIdOrTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"idtup",
							lv_idtup_17_0,
							"srf.transpiler.fortxtrans.FortXTrans.IdOrTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_18=':'
			{
				newLeafNode(otherlv_18, grammarAccess.getFieldDeclAccess().getColonKeyword_3_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getTuptypeTupleTypeParserRuleCall_3_4_0());
					}
					lv_tuptype_19_0=ruleTupleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"tuptype",
							lv_tuptype_19_0,
							"srf.transpiler.fortxtrans.FortXTrans.TupleType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getFieldDeclAccess().getInitInitValParserRuleCall_3_5_0());
					}
					lv_init_20_0=ruleInitVal
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFieldDeclRule());
						}
						set(
							$current,
							"init",
							lv_init_20_0,
							"srf.transpiler.fortxtrans.FortXTrans.InitVal");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNoNewlineVarWTypes
entryRuleNoNewlineVarWTypes returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoNewlineVarWTypesRule()); }
	iv_ruleNoNewlineVarWTypes=ruleNoNewlineVarWTypes
	{ $current=$iv_ruleNoNewlineVarWTypes.current; }
	EOF;

// Rule NoNewlineVarWTypes
ruleNoNewlineVarWTypes returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNoNewlineVarWTypesAccess().getSingleNoNewlineVarWTypeParserRuleCall_0_0());
				}
				lv_single_0_0=ruleNoNewlineVarWType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoNewlineVarWTypesRule());
					}
					set(
						$current,
						"single",
						lv_single_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.NoNewlineVarWType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getNoNewlineVarWTypesAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getNoNewlineVarWTypesAccess().getMultipleNoNewlineVarWTypeParserRuleCall_1_1_0());
					}
					lv_multiple_2_0=ruleNoNewlineVarWType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getNoNewlineVarWTypesRule());
						}
						add(
							$current,
							"multiple",
							lv_multiple_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.NoNewlineVarWType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getNoNewlineVarWTypesAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getNoNewlineVarWTypesAccess().getMultipleNoNewlineVarWTypeParserRuleCall_1_2_1_0());
						}
						lv_multiple_4_0=ruleNoNewlineVarWType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getNoNewlineVarWTypesRule());
							}
							add(
								$current,
								"multiple",
								lv_multiple_4_0,
								"srf.transpiler.fortxtrans.FortXTrans.NoNewlineVarWType");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getNoNewlineVarWTypesAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleNoNewlineVarWType
entryRuleNoNewlineVarWType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoNewlineVarWTypeRule()); }
	iv_ruleNoNewlineVarWType=ruleNoNewlineVarWType
	{ $current=$iv_ruleNoNewlineVarWType.current; }
	EOF;

// Rule NoNewlineVarWType
ruleNoNewlineVarWType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getNoNewlineVarWTypeAccess().getBidBindIdParserRuleCall_0_0());
				}
				lv_bid_0_0=ruleBindId
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoNewlineVarWTypeRule());
					}
					set(
						$current,
						"bid",
						lv_bid_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.BindId");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNoNewlineVarWTypeAccess().getIstypeIsTypeParserRuleCall_1_0());
				}
				lv_istype_1_0=ruleIsType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoNewlineVarWTypeRule());
					}
					set(
						$current,
						"istype",
						lv_istype_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.IsType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInitVal
entryRuleInitVal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitValRule()); }
	iv_ruleInitVal=ruleInitVal
	{ $current=$iv_ruleInitVal.current; }
	EOF;

// Rule InitVal
ruleInitVal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_mut_0_0=':='
					{
						newLeafNode(lv_mut_0_0, grammarAccess.getInitValAccess().getMutColonEqualsSignKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInitValRule());
						}
						setWithLastConsumed($current, "mut", lv_mut_0_0, ":=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInitValAccess().getLitLiteralTupleParserRuleCall_0_1_0());
					}
					lv_lit_1_0=ruleLiteralTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitValRule());
						}
						set(
							$current,
							"lit",
							lv_lit_1_0,
							"srf.transpiler.fortxtrans.FortXTrans.LiteralTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				(
					lv_immut_2_0='='
					{
						newLeafNode(lv_immut_2_0, grammarAccess.getInitValAccess().getImmutEqualsSignKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInitValRule());
						}
						setWithLastConsumed($current, "immut", lv_immut_2_0, "=");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getInitValAccess().getLitLiteralTupleParserRuleCall_1_1_0());
					}
					lv_lit_3_0=ruleLiteralTuple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitValRule());
						}
						set(
							$current,
							"lit",
							lv_lit_3_0,
							"srf.transpiler.fortxtrans.FortXTrans.LiteralTuple");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleLiteralTuple
entryRuleLiteralTuple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralTupleRule()); }
	iv_ruleLiteralTuple=ruleLiteralTuple
	{ $current=$iv_ruleLiteralTuple.current; }
	EOF;

// Rule LiteralTuple
ruleLiteralTuple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralTupleAccess().getLitLiteralParserRuleCall_0_0());
				}
				lv_lit_0_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralTupleRule());
					}
					set(
						$current,
						"lit",
						lv_lit_0_0,
						"srf.transpiler.fortxtrans.FortXTrans.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_1='('
			{
				newLeafNode(otherlv_1, grammarAccess.getLiteralTupleAccess().getLeftParenthesisKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLiteralTupleAccess().getLitsLiteralParserRuleCall_1_1_0());
					}
					lv_lits_2_0=ruleLiteral
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLiteralTupleRule());
						}
						add(
							$current,
							"lits",
							lv_lits_2_0,
							"srf.transpiler.fortxtrans.FortXTrans.Literal");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getLiteralTupleAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLiteralTupleAccess().getLitsLiteralParserRuleCall_1_2_1_0());
						}
						lv_lits_4_0=ruleLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLiteralTupleRule());
							}
							add(
								$current,
								"lits",
								lv_lits_4_0,
								"srf.transpiler.fortxtrans.FortXTrans.Literal");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)+
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getLiteralTupleAccess().getRightParenthesisKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_intg_0_0=RULE_INT
				{
					newLeafNode(lv_intg_0_0, grammarAccess.getLiteralAccess().getIntgINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"intg",
						lv_intg_0_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_flot_1_0=RULE_FLOAT
				{
					newLeafNode(lv_flot_1_0, grammarAccess.getLiteralAccess().getFlotFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"flot",
						lv_flot_1_0,
						"srf.transpiler.fortxtrans.FortXTrans.FLOAT");
				}
			)
		)
		    |
		(
			(
				lv_str_2_0=RULE_STRING
				{
					newLeafNode(lv_str_2_0, grammarAccess.getLiteralAccess().getStrSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"str",
						lv_str_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

RULE_ML_COMMENT : '(*' ( options {greedy=false;} : . )*'*)';

RULE_FLOAT : RULE_INT '.' RULE_INT;

fragment RULE_GREATERS : '>' (RULE_SD '>')*;

fragment RULE_LESSES : '<' (RULE_SD '<')*;

fragment RULE_BARS : '|' (RULE_SD '|')*;

fragment RULE_SLASHES : '/' (RULE_SD '/')*;

fragment RULE_SD : ('.'|'*')?;

RULE_LEFT_ENCLOSER : ('(' ('/'+|'\\'+)|'[/\\/\\/'|'[/\\/'|'[' RULE_SD RULE_SLASHES|RULE_LESSES RULE_SD (RULE_SLASHES|RULE_BARS)|RULE_BARS RULE_SD RULE_SLASHES|('{*'|'[*')|('((>'|'(<'));

RULE_RIGHT_ENCLOSER : ('/'+ ')'|'\\'+ ')'|RULE_SLASHES RULE_SD (RULE_GREATERS|RULE_BARS|('\\'|']'))|RULE_BARS RULE_SD RULE_GREATERS|('*]'|'*}')|']'|('>)'|'<))')|'/\\/\\/]'|'/\\/]');

RULE_DOTS : '...';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import srf.transpiler.fortxtrans.fortXTrans.API;
import srf.transpiler.fortxtrans.fortXTrans.AddExpr;
import srf.transpiler.fortxtrans.fortXTrans.AliasedAPIName;
import srf.transpiler.fortxtrans.fortXTrans.AliasedAPINames;
import srf.transpiler.fortxtrans.fortXTrans.AliasedSimpleName;
import srf.transpiler.fortxtrans.fortXTrans.BindId;
import srf.transpiler.fortxtrans.fortXTrans.Binding;
import srf.transpiler.fortxtrans.fortXTrans.BlockElem;
import srf.transpiler.fortxtrans.fortXTrans.BlockElems;
import srf.transpiler.fortxtrans.fortXTrans.CommaExpr;
import srf.transpiler.fortxtrans.fortXTrans.Component;
import srf.transpiler.fortxtrans.fortXTrans.Decl;
import srf.transpiler.fortxtrans.fortXTrans.Decls;
import srf.transpiler.fortxtrans.fortXTrans.DelimitedExpr;
import srf.transpiler.fortxtrans.fortXTrans.DelimitedExprList;
import srf.transpiler.fortxtrans.fortXTrans.DivExpr;
import srf.transpiler.fortxtrans.fortXTrans.Do;
import srf.transpiler.fortxtrans.fortXTrans.DoFront;
import srf.transpiler.fortxtrans.fortXTrans.Elif;
import srf.transpiler.fortxtrans.fortXTrans.Elifs;
import srf.transpiler.fortxtrans.fortXTrans.Else;
import srf.transpiler.fortxtrans.fortXTrans.Export;
import srf.transpiler.fortxtrans.fortXTrans.Expr;
import srf.transpiler.fortxtrans.fortXTrans.ExprFront;
import srf.transpiler.fortxtrans.fortXTrans.ExprTail;
import srf.transpiler.fortxtrans.fortXTrans.FieldDecl;
import srf.transpiler.fortxtrans.fortXTrans.FnDecl;
import srf.transpiler.fortxtrans.fortXTrans.FnMod;
import srf.transpiler.fortxtrans.fortXTrans.FnMods;
import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.GenClause;
import srf.transpiler.fortxtrans.fortXTrans.Generators;
import srf.transpiler.fortxtrans.fortXTrans.IdOrTuple;
import srf.transpiler.fortxtrans.fortXTrans.Import;
import srf.transpiler.fortxtrans.fortXTrans.ImportedNames;
import srf.transpiler.fortxtrans.fortXTrans.InitVal;
import srf.transpiler.fortxtrans.fortXTrans.IsType;
import srf.transpiler.fortxtrans.fortXTrans.Literal;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTup;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTuple;
import srf.transpiler.fortxtrans.fortXTrans.LocalVarDecl;
import srf.transpiler.fortxtrans.fortXTrans.MultExpr;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWType;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWTypes;
import srf.transpiler.fortxtrans.fortXTrans.Param;
import srf.transpiler.fortxtrans.fortXTrans.Primary;
import srf.transpiler.fortxtrans.fortXTrans.Qualified;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedName;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedNameTuple;
import srf.transpiler.fortxtrans.fortXTrans.RetType;
import srf.transpiler.fortxtrans.fortXTrans.SimpleName;
import srf.transpiler.fortxtrans.fortXTrans.SimpleNames;
import srf.transpiler.fortxtrans.fortXTrans.Stmnt;
import srf.transpiler.fortxtrans.fortXTrans.Stmnts;
import srf.transpiler.fortxtrans.fortXTrans.SubExpr;
import srf.transpiler.fortxtrans.fortXTrans.TupleType;
import srf.transpiler.fortxtrans.fortXTrans.ValParam;
import srf.transpiler.fortxtrans.services.FortXTransGrammarAccess;

@SuppressWarnings("all")
public class FortXTransSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FortXTransGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FortXTransPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FortXTransPackage.API:
				sequence_API(context, (API) semanticObject); 
				return; 
			case FortXTransPackage.ADD_EXPR:
				sequence_AddExpr(context, (AddExpr) semanticObject); 
				return; 
			case FortXTransPackage.ALIASED_API_NAME:
				sequence_AliasedAPIName(context, (AliasedAPIName) semanticObject); 
				return; 
			case FortXTransPackage.ALIASED_API_NAMES:
				sequence_AliasedAPINames(context, (AliasedAPINames) semanticObject); 
				return; 
			case FortXTransPackage.ALIASED_SIMPLE_NAME:
				sequence_AliasedSimpleName(context, (AliasedSimpleName) semanticObject); 
				return; 
			case FortXTransPackage.BIND_ID:
				sequence_BindId(context, (BindId) semanticObject); 
				return; 
			case FortXTransPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case FortXTransPackage.BLOCK_ELEM:
				sequence_BlockElem(context, (BlockElem) semanticObject); 
				return; 
			case FortXTransPackage.BLOCK_ELEMS:
				sequence_BlockElems(context, (BlockElems) semanticObject); 
				return; 
			case FortXTransPackage.COMMA_EXPR:
				sequence_CommaExpr(context, (CommaExpr) semanticObject); 
				return; 
			case FortXTransPackage.COMPONENT:
				sequence_Component(context, (Component) semanticObject); 
				return; 
			case FortXTransPackage.DECL:
				sequence_Decl(context, (Decl) semanticObject); 
				return; 
			case FortXTransPackage.DECLS:
				sequence_Decls(context, (Decls) semanticObject); 
				return; 
			case FortXTransPackage.DELIMITED_EXPR:
				sequence_DelimitedExpr(context, (DelimitedExpr) semanticObject); 
				return; 
			case FortXTransPackage.DELIMITED_EXPR_LIST:
				sequence_DelimitedExprList(context, (DelimitedExprList) semanticObject); 
				return; 
			case FortXTransPackage.DIV_EXPR:
				sequence_DivExpr(context, (DivExpr) semanticObject); 
				return; 
			case FortXTransPackage.DO:
				sequence_Do(context, (Do) semanticObject); 
				return; 
			case FortXTransPackage.DO_FRONT:
				sequence_DoFront(context, (DoFront) semanticObject); 
				return; 
			case FortXTransPackage.ELIF:
				sequence_Elif(context, (Elif) semanticObject); 
				return; 
			case FortXTransPackage.ELIFS:
				sequence_Elifs(context, (Elifs) semanticObject); 
				return; 
			case FortXTransPackage.ELSE:
				sequence_Else(context, (Else) semanticObject); 
				return; 
			case FortXTransPackage.EXPORT:
				sequence_Export(context, (Export) semanticObject); 
				return; 
			case FortXTransPackage.EXPR:
				if (rule == grammarAccess.getExprRule()) {
					sequence_Expr(context, (Expr) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getCommaExprRule()
						|| action == grammarAccess.getCommaExprAccess().getCommaExprLeftAction_1_0()
						|| rule == grammarAccess.getAddExprRule()
						|| action == grammarAccess.getAddExprAccess().getAddExprLeftAction_1_0()
						|| rule == grammarAccess.getSubExprRule()
						|| action == grammarAccess.getSubExprAccess().getSubExprLeftAction_1_0()
						|| rule == grammarAccess.getDivExprRule()
						|| action == grammarAccess.getDivExprAccess().getDivExprLeftAction_1_0()
						|| rule == grammarAccess.getMultExprRule()
						|| action == grammarAccess.getMultExprAccess().getMultExprLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_Primary(context, (Expr) semanticObject); 
					return; 
				}
				else break;
			case FortXTransPackage.EXPR_FRONT:
				sequence_ExprFront(context, (ExprFront) semanticObject); 
				return; 
			case FortXTransPackage.EXPR_TAIL:
				sequence_ExprTail(context, (ExprTail) semanticObject); 
				return; 
			case FortXTransPackage.FIELD_DECL:
				sequence_FieldDecl(context, (FieldDecl) semanticObject); 
				return; 
			case FortXTransPackage.FN_DECL:
				sequence_FnDecl(context, (FnDecl) semanticObject); 
				return; 
			case FortXTransPackage.FN_MOD:
				sequence_FnMod(context, (FnMod) semanticObject); 
				return; 
			case FortXTransPackage.FN_MODS:
				sequence_FnMods(context, (FnMods) semanticObject); 
				return; 
			case FortXTransPackage.GEN_CLAUSE:
				sequence_GenClause(context, (GenClause) semanticObject); 
				return; 
			case FortXTransPackage.GENERATORS:
				sequence_Generators(context, (Generators) semanticObject); 
				return; 
			case FortXTransPackage.ID_OR_TUPLE:
				sequence_IdOrTuple(context, (IdOrTuple) semanticObject); 
				return; 
			case FortXTransPackage.IMPORT:
				sequence_Import(context, (Import) semanticObject); 
				return; 
			case FortXTransPackage.IMPORTED_NAMES:
				sequence_ImportedNames(context, (ImportedNames) semanticObject); 
				return; 
			case FortXTransPackage.INIT_VAL:
				sequence_InitVal(context, (InitVal) semanticObject); 
				return; 
			case FortXTransPackage.IS_TYPE:
				sequence_IsType(context, (IsType) semanticObject); 
				return; 
			case FortXTransPackage.LITERAL:
				sequence_Literal(context, (Literal) semanticObject); 
				return; 
			case FortXTransPackage.LITERAL_TUP:
				sequence_LiteralTup(context, (LiteralTup) semanticObject); 
				return; 
			case FortXTransPackage.LITERAL_TUPLE:
				sequence_LiteralTuple(context, (LiteralTuple) semanticObject); 
				return; 
			case FortXTransPackage.LOCAL_VAR_DECL:
				sequence_LocalVarDecl(context, (LocalVarDecl) semanticObject); 
				return; 
			case FortXTransPackage.MULT_EXPR:
				sequence_MultExpr(context, (MultExpr) semanticObject); 
				return; 
			case FortXTransPackage.NO_NEWLINE_VAR_WTYPE:
				sequence_NoNewlineVarWType(context, (NoNewlineVarWType) semanticObject); 
				return; 
			case FortXTransPackage.NO_NEWLINE_VAR_WTYPES:
				sequence_NoNewlineVarWTypes(context, (NoNewlineVarWTypes) semanticObject); 
				return; 
			case FortXTransPackage.PARAM:
				sequence_Param(context, (Param) semanticObject); 
				return; 
			case FortXTransPackage.PRIMARY:
				if (rule == grammarAccess.getCommaExprRule()
						|| action == grammarAccess.getCommaExprAccess().getCommaExprLeftAction_1_0()
						|| rule == grammarAccess.getAddExprRule()
						|| action == grammarAccess.getAddExprAccess().getAddExprLeftAction_1_0()
						|| rule == grammarAccess.getSubExprRule()
						|| action == grammarAccess.getSubExprAccess().getSubExprLeftAction_1_0()
						|| rule == grammarAccess.getDivExprRule()
						|| action == grammarAccess.getDivExprAccess().getDivExprLeftAction_1_0()
						|| rule == grammarAccess.getMultExprRule()
						|| action == grammarAccess.getMultExprAccess().getMultExprLeftAction_1_0()
						|| rule == grammarAccess.getPrimaryRule()) {
					sequence_Primary(context, (Primary) semanticObject); 
					return; 
				}
				else if (action == grammarAccess.getPrimaryAccess().getPrimaryFnameAction_0_2_0()) {
					sequence_Primary_Primary_0_2_0(context, (Primary) semanticObject); 
					return; 
				}
				else break;
			case FortXTransPackage.QUALIFIED:
				sequence_Qualified(context, (Qualified) semanticObject); 
				return; 
			case FortXTransPackage.QUALIFIED_NAME:
				sequence_QualifiedName(context, (QualifiedName) semanticObject); 
				return; 
			case FortXTransPackage.QUALIFIED_NAME_TUPLE:
				sequence_QualifiedNameTuple(context, (QualifiedNameTuple) semanticObject); 
				return; 
			case FortXTransPackage.RET_TYPE:
				sequence_RetType(context, (RetType) semanticObject); 
				return; 
			case FortXTransPackage.SIMPLE_NAME:
				sequence_SimpleName(context, (SimpleName) semanticObject); 
				return; 
			case FortXTransPackage.SIMPLE_NAMES:
				sequence_SimpleNames(context, (SimpleNames) semanticObject); 
				return; 
			case FortXTransPackage.STMNT:
				sequence_Stmnt(context, (Stmnt) semanticObject); 
				return; 
			case FortXTransPackage.STMNTS:
				sequence_Stmnts(context, (Stmnts) semanticObject); 
				return; 
			case FortXTransPackage.SUB_EXPR:
				sequence_SubExpr(context, (SubExpr) semanticObject); 
				return; 
			case FortXTransPackage.TUPLE_TYPE:
				sequence_TupleType(context, (TupleType) semanticObject); 
				return; 
			case FortXTransPackage.VAL_PARAM:
				sequence_ValParam(context, (ValParam) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Model returns API
	 *     API returns API
	 *
	 * Constraint:
	 *     (name=ID imports+=Import*)
	 */
	protected void sequence_API(ISerializationContext context, API semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns AddExpr
	 *     CommaExpr.CommaExpr_1_0 returns AddExpr
	 *     AddExpr returns AddExpr
	 *     AddExpr.AddExpr_1_0 returns AddExpr
	 *
	 * Constraint:
	 *     (left=AddExpr_AddExpr_1_0 right=SubExpr)
	 */
	protected void sequence_AddExpr(ISerializationContext context, AddExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddExprAccess().getAddExprLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAddExprAccess().getRightSubExprParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AliasedAPIName returns AliasedAPIName
	 *
	 * Constraint:
	 *     (orig=QualifiedName asName=ID?)
	 */
	protected void sequence_AliasedAPIName(ISerializationContext context, AliasedAPIName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AliasedAPINames returns AliasedAPINames
	 *
	 * Constraint:
	 *     (nameList+=AliasedAPIName | (brack='{' nameList+=AliasedAPIName nameList+=AliasedAPIName*))
	 */
	protected void sequence_AliasedAPINames(ISerializationContext context, AliasedAPINames semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AliasedSimpleName returns AliasedSimpleName
	 *
	 * Constraint:
	 *     (orig=ID asName=ID?)
	 */
	protected void sequence_AliasedSimpleName(ISerializationContext context, AliasedSimpleName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BindId returns BindId
	 *
	 * Constraint:
	 *     (s=SimpleName | undsc='_')
	 */
	protected void sequence_BindId(ISerializationContext context, BindId semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     ((idtup=IdOrTuple expr=Expr) | (idtup=IdOrTuple seq='seq' expr=Expr))
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BlockElem returns BlockElem
	 *
	 * Constraint:
	 *     st=Stmnts
	 */
	protected void sequence_BlockElem(ISerializationContext context, BlockElem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.BLOCK_ELEM__ST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.BLOCK_ELEM__ST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBlockElemAccess().getStStmntsParserRuleCall_0(), semanticObject.getSt());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BlockElems returns BlockElems
	 *
	 * Constraint:
	 *     (block+=BlockElem block+=BlockElem*)
	 */
	protected void sequence_BlockElems(ISerializationContext context, BlockElems semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns CommaExpr
	 *     CommaExpr.CommaExpr_1_0 returns CommaExpr
	 *
	 * Constraint:
	 *     (left=CommaExpr_CommaExpr_1_0 right=AddExpr)
	 */
	protected void sequence_CommaExpr(ISerializationContext context, CommaExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCommaExprAccess().getCommaExprLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getCommaExprAccess().getRightAddExprParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Component
	 *     Component returns Component
	 *
	 * Constraint:
	 *     (name=ID imports+=Import* exports+=Export+ decls+=Decls*)
	 */
	protected void sequence_Component(ISerializationContext context, Component semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decl returns Decl
	 *
	 * Constraint:
	 *     (function=FnDecl | field=FieldDecl)
	 */
	protected void sequence_Decl(ISerializationContext context, Decl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Decls returns Decls
	 *
	 * Constraint:
	 *     decls+=Decl+
	 */
	protected void sequence_Decls(ISerializationContext context, Decls semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DelimitedExprList returns DelimitedExprList
	 *
	 * Constraint:
	 *     (delim+=DelimitedExpr delim+=DelimitedExpr+)
	 */
	protected void sequence_DelimitedExprList(ISerializationContext context, DelimitedExprList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DelimitedExpr returns DelimitedExpr
	 *
	 * Constraint:
	 *     (
	 *         dod=Do | 
	 *         (ret='return' block=BlockElem) | 
	 *         (awhile='while' expr=Expr whiledod=Do) | 
	 *         (afor='for' gen=Generators dofront=DoFront) | 
	 *         (anif='if' cond=Expr blocks=BlockElems elifs=Elifs? els=Else?)
	 *     )
	 */
	protected void sequence_DelimitedExpr(ISerializationContext context, DelimitedExpr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns DivExpr
	 *     CommaExpr.CommaExpr_1_0 returns DivExpr
	 *     AddExpr returns DivExpr
	 *     AddExpr.AddExpr_1_0 returns DivExpr
	 *     SubExpr returns DivExpr
	 *     SubExpr.SubExpr_1_0 returns DivExpr
	 *     DivExpr returns DivExpr
	 *     DivExpr.DivExpr_1_0 returns DivExpr
	 *
	 * Constraint:
	 *     (left=DivExpr_DivExpr_1_0 right=MultExpr)
	 */
	protected void sequence_DivExpr(ISerializationContext context, DivExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDivExprAccess().getDivExprLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDivExprAccess().getRightMultExprParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DoFront returns DoFront
	 *
	 * Constraint:
	 *     ((at?='at' exp=Expr)? atom?='atomic'? block=BlockElems)
	 */
	protected void sequence_DoFront(ISerializationContext context, DoFront semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Do returns Do
	 *
	 * Constraint:
	 *     (dofs+=DoFront dofs+=DoFront*)
	 */
	protected void sequence_Do(ISerializationContext context, Do semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Elif returns Elif
	 *
	 * Constraint:
	 *     (expr=Expr block=BlockElems)
	 */
	protected void sequence_Elif(ISerializationContext context, Elif semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.ELIF__EXPR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.ELIF__EXPR));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.ELIF__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.ELIF__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElifAccess().getExprExprParserRuleCall_1_0(), semanticObject.getExpr());
		feeder.accept(grammarAccess.getElifAccess().getBlockBlockElemsParserRuleCall_3_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Elifs returns Elifs
	 *
	 * Constraint:
	 *     (e+=Elif e+=Elif*)
	 */
	protected void sequence_Elifs(ISerializationContext context, Elifs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Else returns Else
	 *
	 * Constraint:
	 *     block=BlockElems
	 */
	protected void sequence_Else(ISerializationContext context, Else semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.ELSE__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.ELSE__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getElseAccess().getBlockBlockElemsParserRuleCall_1_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Export returns Export
	 *
	 * Constraint:
	 *     ((exp='export' exportedName+=QualifiedName) | (exp='export' brack='{' exportedName+=QualifiedName exportedName+=QualifiedName*))
	 */
	protected void sequence_Export(ISerializationContext context, Export semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExprFront returns ExprFront
	 *
	 * Constraint:
	 *     add=CommaExpr
	 */
	protected void sequence_ExprFront(ISerializationContext context, ExprFront semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.EXPR_FRONT__ADD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.EXPR_FRONT__ADD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprFrontAccess().getAddCommaExprParserRuleCall_0(), semanticObject.getAdd());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExprTail returns ExprTail
	 *
	 * Constraint:
	 *     type=SimpleName
	 */
	protected void sequence_ExprTail(ISerializationContext context, ExprTail semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.EXPR_TAIL__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.EXPR_TAIL__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExprTailAccess().getTypeSimpleNameParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expr returns Expr
	 *
	 * Constraint:
	 *     (front=ExprFront tail+=ExprTail*)
	 */
	protected void sequence_Expr(ISerializationContext context, Expr semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FieldDecl returns FieldDecl
	 *
	 * Constraint:
	 *     (
	 *         (pri='private'? mut='var'? vars=NoNewlineVarWTypes init=InitVal) | 
	 *         (pri='private'? idtup=IdOrTuple litTup=LiteralTuple) | 
	 *         (pri='private'? mut='var'? idtup=IdOrTuple type=SimpleName init=InitVal) | 
	 *         (pri='private'? mut='var'? idtup=IdOrTuple tuptype=TupleType init=InitVal)
	 *     )
	 */
	protected void sequence_FieldDecl(ISerializationContext context, FieldDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FnDecl returns FnDecl
	 *
	 * Constraint:
	 *     (mods=FnMods? name=ID params=ValParam retVal=RetType? (body?='=' fnItself=Stmnts)?)
	 */
	protected void sequence_FnDecl(ISerializationContext context, FnDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FnMod returns FnMod
	 *
	 * Constraint:
	 *     (modtype='private' | modtype='test' | modtype='atomic' | modtype='io')
	 */
	protected void sequence_FnMod(ISerializationContext context, FnMod semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FnMods returns FnMods
	 *
	 * Constraint:
	 *     mods+=FnMod+
	 */
	protected void sequence_FnMods(ISerializationContext context, FnMods semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GenClause returns GenClause
	 *
	 * Constraint:
	 *     (binding=Binding | expr=Expr)
	 */
	protected void sequence_GenClause(ISerializationContext context, GenClause semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Generators returns Generators
	 *
	 * Constraint:
	 *     (binding=Binding clause+=GenClause*)
	 */
	protected void sequence_Generators(ISerializationContext context, Generators semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IdOrTuple returns IdOrTuple
	 *
	 * Constraint:
	 *     (bid+=BindId | (bid+=BindId bid+=BindId*))
	 */
	protected void sequence_IdOrTuple(ISerializationContext context, IdOrTuple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Import returns Import
	 *
	 * Constraint:
	 *     ((imps='import' importedNames=ImportedNames) | (imps='import' api='api' aliasedimportedNames=AliasedAPINames))
	 */
	protected void sequence_Import(ISerializationContext context, Import semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImportedNames returns ImportedNames
	 *
	 * Constraint:
	 *     (
	 *         (impname=QualifiedName (except?='except' simp=SimpleNames)?) | 
	 *         (impname=QualifiedName simpList+=AliasedSimpleName simpList+=AliasedSimpleName* (comma?=',' dots?=DOTS)?) | 
	 *         (impname=QualifiedName asname=ID?)
	 *     )
	 */
	protected void sequence_ImportedNames(ISerializationContext context, ImportedNames semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitVal returns InitVal
	 *
	 * Constraint:
	 *     ((mut=':=' lit=LiteralTuple) | (immut='=' lit=LiteralTuple))
	 */
	protected void sequence_InitVal(ISerializationContext context, InitVal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     IsType returns IsType
	 *
	 * Constraint:
	 *     type=SimpleName
	 */
	protected void sequence_IsType(ISerializationContext context, IsType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.IS_TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.IS_TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIsTypeAccess().getTypeSimpleNameParserRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     LiteralTup returns LiteralTup
	 *
	 * Constraint:
	 *     (lit=Literal | (lits+=Literal lits+=Literal+))
	 */
	protected void sequence_LiteralTup(ISerializationContext context, LiteralTup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns LiteralTuple
	 *     CommaExpr.CommaExpr_1_0 returns LiteralTuple
	 *     AddExpr returns LiteralTuple
	 *     AddExpr.AddExpr_1_0 returns LiteralTuple
	 *     SubExpr returns LiteralTuple
	 *     SubExpr.SubExpr_1_0 returns LiteralTuple
	 *     DivExpr returns LiteralTuple
	 *     DivExpr.DivExpr_1_0 returns LiteralTuple
	 *     MultExpr returns LiteralTuple
	 *     MultExpr.MultExpr_1_0 returns LiteralTuple
	 *     Primary returns LiteralTuple
	 *     LiteralTuple returns LiteralTuple
	 *
	 * Constraint:
	 *     (lit=LiteralTup | qname=QualifiedName | qlist=QualifiedNameTuple)
	 */
	protected void sequence_LiteralTuple(ISerializationContext context, LiteralTuple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Literal returns Literal
	 *
	 * Constraint:
	 *     (intg=INT | flot=FLOAT | str=STRING)
	 */
	protected void sequence_Literal(ISerializationContext context, Literal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LocalVarDecl returns LocalVarDecl
	 *
	 * Constraint:
	 *     (
	 *         (mut='var'? vars=NoNewlineVarWTypes init=Expr) | 
	 *         (idtup=IdOrTuple litTup=LiteralTuple) | 
	 *         (mut='var'? idtup=IdOrTuple type=SimpleName init=Expr) | 
	 *         (mut='var'? idtup=IdOrTuple tuptype=TupleType init=Expr)
	 *     )
	 */
	protected void sequence_LocalVarDecl(ISerializationContext context, LocalVarDecl semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns MultExpr
	 *     CommaExpr.CommaExpr_1_0 returns MultExpr
	 *     AddExpr returns MultExpr
	 *     AddExpr.AddExpr_1_0 returns MultExpr
	 *     SubExpr returns MultExpr
	 *     SubExpr.SubExpr_1_0 returns MultExpr
	 *     DivExpr returns MultExpr
	 *     DivExpr.DivExpr_1_0 returns MultExpr
	 *     MultExpr returns MultExpr
	 *     MultExpr.MultExpr_1_0 returns MultExpr
	 *
	 * Constraint:
	 *     (left=MultExpr_MultExpr_1_0 right=Primary)
	 */
	protected void sequence_MultExpr(ISerializationContext context, MultExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMultExprAccess().getMultExprLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getMultExprAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NoNewlineVarWType returns NoNewlineVarWType
	 *
	 * Constraint:
	 *     (bid=BindId istype=IsType)
	 */
	protected void sequence_NoNewlineVarWType(ISerializationContext context, NoNewlineVarWType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.NO_NEWLINE_VAR_WTYPE__BID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.NO_NEWLINE_VAR_WTYPE__BID));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.NO_NEWLINE_VAR_WTYPE__ISTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.NO_NEWLINE_VAR_WTYPE__ISTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNoNewlineVarWTypeAccess().getBidBindIdParserRuleCall_0_0(), semanticObject.getBid());
		feeder.accept(grammarAccess.getNoNewlineVarWTypeAccess().getIstypeIsTypeParserRuleCall_1_0(), semanticObject.getIstype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NoNewlineVarWTypes returns NoNewlineVarWTypes
	 *
	 * Constraint:
	 *     (single=NoNewlineVarWType | (multiple+=NoNewlineVarWType multiple+=NoNewlineVarWType+))
	 */
	protected void sequence_NoNewlineVarWTypes(ISerializationContext context, NoNewlineVarWTypes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Param returns Param
	 *
	 * Constraint:
	 *     (bId=BindId istype=IsType)
	 */
	protected void sequence_Param(ISerializationContext context, Param semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.PARAM__BID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.PARAM__BID));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.PARAM__ISTYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.PARAM__ISTYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParamAccess().getBIdBindIdParserRuleCall_0_0(), semanticObject.getBId());
		feeder.accept(grammarAccess.getParamAccess().getIstypeIsTypeParserRuleCall_1_0(), semanticObject.getIstype());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns Expr
	 *     CommaExpr.CommaExpr_1_0 returns Expr
	 *     AddExpr returns Expr
	 *     AddExpr.AddExpr_1_0 returns Expr
	 *     SubExpr returns Expr
	 *     SubExpr.SubExpr_1_0 returns Expr
	 *     DivExpr returns Expr
	 *     DivExpr.DivExpr_1_0 returns Expr
	 *     MultExpr returns Expr
	 *     MultExpr.MultExpr_1_0 returns Expr
	 *     Primary returns Expr
	 *
	 * Constraint:
	 *     exp=Expr
	 */
	protected void sequence_Primary(ISerializationContext context, Expr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.EXPR__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.EXPR__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getExpExprParserRuleCall_2_1_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns Primary
	 *     CommaExpr.CommaExpr_1_0 returns Primary
	 *     AddExpr returns Primary
	 *     AddExpr.AddExpr_1_0 returns Primary
	 *     SubExpr returns Primary
	 *     SubExpr.SubExpr_1_0 returns Primary
	 *     DivExpr returns Primary
	 *     DivExpr.DivExpr_1_0 returns Primary
	 *     MultExpr returns Primary
	 *     MultExpr.MultExpr_1_0 returns Primary
	 *     Primary returns Primary
	 *
	 * Constraint:
	 *     ((left=Primary_Primary_0_1_0 exp=Expr) | (Fname=Primary_Primary_0_2_0 fargs=Expr))
	 */
	protected void sequence_Primary(ISerializationContext context, Primary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Primary.Primary_0_2_0 returns Primary
	 *
	 * Constraint:
	 *     (left=Primary_Primary_0_1_0 exp=Expr)
	 */
	protected void sequence_Primary_Primary_0_2_0(ISerializationContext context, Primary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.EXPR__EXP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.EXPR__EXP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPrimaryAccess().getPrimaryLeftAction_0_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getPrimaryAccess().getExpExprParserRuleCall_0_1_2_0(), semanticObject.getExp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QualifiedNameTuple returns QualifiedNameTuple
	 *
	 * Constraint:
	 *     (qlist+=QualifiedName qlist+=QualifiedName*)
	 */
	protected void sequence_QualifiedNameTuple(ISerializationContext context, QualifiedNameTuple semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QualifiedName returns QualifiedName
	 *
	 * Constraint:
	 *     ((s+=SimpleName dots=DOTS?) | (s+=SimpleName s+=SimpleName+ dots=DOTS?))
	 */
	protected void sequence_QualifiedName(ISerializationContext context, QualifiedName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Qualified returns Qualified
	 *     CommaExpr returns Qualified
	 *     CommaExpr.CommaExpr_1_0 returns Qualified
	 *     AddExpr returns Qualified
	 *     AddExpr.AddExpr_1_0 returns Qualified
	 *     SubExpr returns Qualified
	 *     SubExpr.SubExpr_1_0 returns Qualified
	 *     DivExpr returns Qualified
	 *     DivExpr.DivExpr_1_0 returns Qualified
	 *     MultExpr returns Qualified
	 *     MultExpr.MultExpr_1_0 returns Qualified
	 *     Primary returns Qualified
	 *     Primary.Primary_0_1_0 returns Qualified
	 *     Primary.Primary_0_2_0 returns Qualified
	 *
	 * Constraint:
	 *     (q=QualifiedName | qlist=QualifiedNameTuple)
	 */
	protected void sequence_Qualified(ISerializationContext context, Qualified semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RetType returns RetType
	 *
	 * Constraint:
	 *     (empty='(' | type=SimpleName)
	 */
	protected void sequence_RetType(ISerializationContext context, RetType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleName returns SimpleName
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SimpleName(ISerializationContext context, SimpleName semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.SIMPLE_NAME__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.SIMPLE_NAME__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleNameAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SimpleNames returns SimpleNames
	 *
	 * Constraint:
	 *     (nameList+=SimpleName | (brack='{' nameList+=SimpleName nameList+=SimpleName*))
	 */
	protected void sequence_SimpleNames(ISerializationContext context, SimpleNames semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stmnt returns Stmnt
	 *
	 * Constraint:
	 *     (delim=DelimitedExpr | (brack='(' delimList=DelimitedExprList))
	 */
	protected void sequence_Stmnt(ISerializationContext context, Stmnt semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Stmnts returns Stmnts
	 *
	 * Constraint:
	 *     (front=Stmnt | locVar=LocalVarDecl | exp=Expr)
	 */
	protected void sequence_Stmnts(ISerializationContext context, Stmnts semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommaExpr returns SubExpr
	 *     CommaExpr.CommaExpr_1_0 returns SubExpr
	 *     AddExpr returns SubExpr
	 *     AddExpr.AddExpr_1_0 returns SubExpr
	 *     SubExpr returns SubExpr
	 *     SubExpr.SubExpr_1_0 returns SubExpr
	 *
	 * Constraint:
	 *     (left=SubExpr_SubExpr_1_0 right=DivExpr)
	 */
	protected void sequence_SubExpr(ISerializationContext context, SubExpr semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__LEFT));
			if (transientValues.isValueTransient(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FortXTransPackage.Literals.COMMA_EXPR__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSubExprAccess().getSubExprLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getSubExprAccess().getRightDivExprParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TupleType returns TupleType
	 *
	 * Constraint:
	 *     (types+=SimpleName types+=SimpleName*)
	 */
	protected void sequence_TupleType(ISerializationContext context, TupleType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValParam returns ValParam
	 *
	 * Constraint:
	 *     (params+=Param | (brack='(' (params+=Param params+=Param*)?))
	 */
	protected void sequence_ValParam(ISerializationContext context, ValParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

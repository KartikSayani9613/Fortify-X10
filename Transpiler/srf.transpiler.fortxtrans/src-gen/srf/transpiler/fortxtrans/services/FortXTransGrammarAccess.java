/*
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FortXTransGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cComponentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAPIParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Model:
		//	Component
		//	| API;
		@Override public ParserRule getRule() { return rule; }
		
		//Component | API
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Component
		public RuleCall getComponentParserRuleCall_0() { return cComponentParserRuleCall_0; }
		
		//API
		public RuleCall getAPIParserRuleCall_1() { return cAPIParserRuleCall_1; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cExportsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExportsExportParserRuleCall_3_0 = (RuleCall)cExportsAssignment_3.eContents().get(0);
		private final Assignment cDeclsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDeclsDeclsParserRuleCall_4_0 = (RuleCall)cDeclsAssignment_4.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Component:
		//	'component' name=ID imports+=Import* exports+=Export+ decls+=Decls* 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'component' name=ID imports+=Import* exports+=Export+ decls+=Decls* 'end'
		public Group getGroup() { return cGroup; }
		
		//'component'
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		//exports+=Export+
		public Assignment getExportsAssignment_3() { return cExportsAssignment_3; }
		
		//Export
		public RuleCall getExportsExportParserRuleCall_3_0() { return cExportsExportParserRuleCall_3_0; }
		
		//decls+=Decls*
		public Assignment getDeclsAssignment_4() { return cDeclsAssignment_4; }
		
		//Decls
		public RuleCall getDeclsDeclsParserRuleCall_4_0() { return cDeclsDeclsParserRuleCall_4_0; }
		
		//'end'
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }
	}
	public class APIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.API");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cApiKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//API:
		//	'api' name=ID imports+=Import* /*(absDecls+=AbsDecls)**/ 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//'api' name=ID imports+=Import* /*(absDecls+=AbsDecls)**/ 'end'
		public Group getGroup() { return cGroup; }
		
		//'api'
		public Keyword getApiKeyword_0() { return cApiKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//imports+=Import*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_2_0() { return cImportsImportParserRuleCall_2_0; }
		
		///*(absDecls+=AbsDecls)**/ 'end'
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cImpsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cImpsImportKeyword_0_0_0 = (Keyword)cImpsAssignment_0_0.eContents().get(0);
		private final Assignment cImportedNamesAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportedNamesImportedNamesParserRuleCall_0_1_0 = (RuleCall)cImportedNamesAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cImpsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cImpsImportKeyword_1_0_0 = (Keyword)cImpsAssignment_1_0.eContents().get(0);
		private final Assignment cApiAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cApiApiKeyword_1_1_0 = (Keyword)cApiAssignment_1_1.eContents().get(0);
		private final Assignment cAliasedimportedNamesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAliasedimportedNamesAliasedAPINamesParserRuleCall_1_2_0 = (RuleCall)cAliasedimportedNamesAssignment_1_2.eContents().get(0);
		
		//Import:
		//	imps='import' importedNames=ImportedNames
		//	| imps='import' api='api' aliasedimportedNames=AliasedAPINames;
		@Override public ParserRule getRule() { return rule; }
		
		//imps='import' importedNames=ImportedNames | imps='import' api='api' aliasedimportedNames=AliasedAPINames
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//imps='import' importedNames=ImportedNames
		public Group getGroup_0() { return cGroup_0; }
		
		//imps='import'
		public Assignment getImpsAssignment_0_0() { return cImpsAssignment_0_0; }
		
		//'import'
		public Keyword getImpsImportKeyword_0_0_0() { return cImpsImportKeyword_0_0_0; }
		
		//importedNames=ImportedNames
		public Assignment getImportedNamesAssignment_0_1() { return cImportedNamesAssignment_0_1; }
		
		//ImportedNames
		public RuleCall getImportedNamesImportedNamesParserRuleCall_0_1_0() { return cImportedNamesImportedNamesParserRuleCall_0_1_0; }
		
		//imps='import' api='api' aliasedimportedNames=AliasedAPINames
		public Group getGroup_1() { return cGroup_1; }
		
		//imps='import'
		public Assignment getImpsAssignment_1_0() { return cImpsAssignment_1_0; }
		
		//'import'
		public Keyword getImpsImportKeyword_1_0_0() { return cImpsImportKeyword_1_0_0; }
		
		//api='api'
		public Assignment getApiAssignment_1_1() { return cApiAssignment_1_1; }
		
		//'api'
		public Keyword getApiApiKeyword_1_1_0() { return cApiApiKeyword_1_1_0; }
		
		//aliasedimportedNames=AliasedAPINames
		public Assignment getAliasedimportedNamesAssignment_1_2() { return cAliasedimportedNamesAssignment_1_2; }
		
		//AliasedAPINames
		public RuleCall getAliasedimportedNamesAliasedAPINamesParserRuleCall_1_2_0() { return cAliasedimportedNamesAliasedAPINamesParserRuleCall_1_2_0; }
	}
	public class ExportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Export");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cExpExportKeyword_0_0_0 = (Keyword)cExpAssignment_0_0.eContents().get(0);
		private final Assignment cExportedNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExportedNameAPINameParserRuleCall_0_1_0 = (RuleCall)cExportedNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cExpAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cExpExportKeyword_1_0_0 = (Keyword)cExpAssignment_1_0.eContents().get(0);
		private final Assignment cBrackAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cBrackLeftCurlyBracketKeyword_1_1_0 = (Keyword)cBrackAssignment_1_1.eContents().get(0);
		private final Assignment cExportedNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExportedNameAPINameParserRuleCall_1_2_0 = (RuleCall)cExportedNameAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cCommaKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cExportedNameAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cExportedNameAPINameParserRuleCall_1_3_1_0 = (RuleCall)cExportedNameAssignment_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		
		//Export:
		//	exp='export' exportedName+=APIName
		//	| exp='export' brack='{' exportedName+=APIName ("," exportedName+=APIName)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//exp='export' exportedName+=APIName | exp='export' brack='{' exportedName+=APIName ("," exportedName+=APIName)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//exp='export' exportedName+=APIName
		public Group getGroup_0() { return cGroup_0; }
		
		//exp='export'
		public Assignment getExpAssignment_0_0() { return cExpAssignment_0_0; }
		
		//'export'
		public Keyword getExpExportKeyword_0_0_0() { return cExpExportKeyword_0_0_0; }
		
		//exportedName+=APIName
		public Assignment getExportedNameAssignment_0_1() { return cExportedNameAssignment_0_1; }
		
		//APIName
		public RuleCall getExportedNameAPINameParserRuleCall_0_1_0() { return cExportedNameAPINameParserRuleCall_0_1_0; }
		
		//exp='export' brack='{' exportedName+=APIName ("," exportedName+=APIName)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//exp='export'
		public Assignment getExpAssignment_1_0() { return cExpAssignment_1_0; }
		
		//'export'
		public Keyword getExpExportKeyword_1_0_0() { return cExpExportKeyword_1_0_0; }
		
		//brack='{'
		public Assignment getBrackAssignment_1_1() { return cBrackAssignment_1_1; }
		
		//'{'
		public Keyword getBrackLeftCurlyBracketKeyword_1_1_0() { return cBrackLeftCurlyBracketKeyword_1_1_0; }
		
		//exportedName+=APIName
		public Assignment getExportedNameAssignment_1_2() { return cExportedNameAssignment_1_2; }
		
		//APIName
		public RuleCall getExportedNameAPINameParserRuleCall_1_2_0() { return cExportedNameAPINameParserRuleCall_1_2_0; }
		
		//("," exportedName+=APIName)*
		public Group getGroup_1_3() { return cGroup_1_3; }
		
		//","
		public Keyword getCommaKeyword_1_3_0() { return cCommaKeyword_1_3_0; }
		
		//exportedName+=APIName
		public Assignment getExportedNameAssignment_1_3_1() { return cExportedNameAssignment_1_3_1; }
		
		//APIName
		public RuleCall getExportedNameAPINameParserRuleCall_1_3_1_0() { return cExportedNameAPINameParserRuleCall_1_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_4() { return cRightCurlyBracketKeyword_1_4; }
	}
	public class ImportedNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.ImportedNames");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cImpnameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cImpnameAPINameParserRuleCall_0_0_0 = (RuleCall)cImpnameAssignment_0_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cDOTSTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_0_5 = (Group)cGroup_0.eContents().get(5);
		private final Assignment cExceptAssignment_0_5_0 = (Assignment)cGroup_0_5.eContents().get(0);
		private final Keyword cExceptExceptKeyword_0_5_0_0 = (Keyword)cExceptAssignment_0_5_0.eContents().get(0);
		private final Assignment cSimpAssignment_0_5_1 = (Assignment)cGroup_0_5.eContents().get(1);
		private final RuleCall cSimpSimpleNamesParserRuleCall_0_5_1_0 = (RuleCall)cSimpAssignment_0_5_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cImpnameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cImpnameAPINameParserRuleCall_1_0_0 = (RuleCall)cImpnameAssignment_1_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSimpListAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSimpListAliasedSimpleNameParserRuleCall_1_3_0 = (RuleCall)cSimpListAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cCommaKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cSimpListAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cSimpListAliasedSimpleNameParserRuleCall_1_4_1_0 = (RuleCall)cSimpListAssignment_1_4_1.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Assignment cCommaAssignment_1_5_0 = (Assignment)cGroup_1_5.eContents().get(0);
		private final Keyword cCommaCommaKeyword_1_5_0_0 = (Keyword)cCommaAssignment_1_5_0.eContents().get(0);
		private final Assignment cDotsAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cDotsDOTSTerminalRuleCall_1_5_1_0 = (RuleCall)cDotsAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cImpnameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cImpnameAPINameParserRuleCall_2_0_0 = (RuleCall)cImpnameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cAsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAsnameAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAsnameIDTerminalRuleCall_2_1_1_0 = (RuleCall)cAsnameAssignment_2_1_1.eContents().get(0);
		
		//ImportedNames:
		//	impname=APIName '.' '{' DOTS '}' (except?='except' simp=SimpleNames)?
		//	| impname=APIName '.' '{' simpList+=AliasedSimpleName (',' simpList+=AliasedSimpleName)* (comma?=',' dots?=DOTS)? '}'
		//	| impname=APIName ('as' asname=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//impname=APIName '.' '{' DOTS '}' (except?='except' simp=SimpleNames)? | impname=APIName '.' '{'
		//simpList+=AliasedSimpleName (',' simpList+=AliasedSimpleName)* (comma?=',' dots?=DOTS)? '}' | impname=APIName ('as'
		//asname=ID)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//impname=APIName '.' '{' DOTS '}' (except?='except' simp=SimpleNames)?
		public Group getGroup_0() { return cGroup_0; }
		
		//impname=APIName
		public Assignment getImpnameAssignment_0_0() { return cImpnameAssignment_0_0; }
		
		//APIName
		public RuleCall getImpnameAPINameParserRuleCall_0_0_0() { return cImpnameAPINameParserRuleCall_0_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_0_3() { return cDOTSTerminalRuleCall_0_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//(except?='except' simp=SimpleNames)?
		public Group getGroup_0_5() { return cGroup_0_5; }
		
		//except?='except'
		public Assignment getExceptAssignment_0_5_0() { return cExceptAssignment_0_5_0; }
		
		//'except'
		public Keyword getExceptExceptKeyword_0_5_0_0() { return cExceptExceptKeyword_0_5_0_0; }
		
		//simp=SimpleNames
		public Assignment getSimpAssignment_0_5_1() { return cSimpAssignment_0_5_1; }
		
		//SimpleNames
		public RuleCall getSimpSimpleNamesParserRuleCall_0_5_1_0() { return cSimpSimpleNamesParserRuleCall_0_5_1_0; }
		
		//impname=APIName '.' '{' simpList+=AliasedSimpleName (',' simpList+=AliasedSimpleName)* (comma?=',' dots?=DOTS)? '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//impname=APIName
		public Assignment getImpnameAssignment_1_0() { return cImpnameAssignment_1_0; }
		
		//APIName
		public RuleCall getImpnameAPINameParserRuleCall_1_0_0() { return cImpnameAPINameParserRuleCall_1_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1() { return cFullStopKeyword_1_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_2() { return cLeftCurlyBracketKeyword_1_2; }
		
		//simpList+=AliasedSimpleName
		public Assignment getSimpListAssignment_1_3() { return cSimpListAssignment_1_3; }
		
		//AliasedSimpleName
		public RuleCall getSimpListAliasedSimpleNameParserRuleCall_1_3_0() { return cSimpListAliasedSimpleNameParserRuleCall_1_3_0; }
		
		//(',' simpList+=AliasedSimpleName)*
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//','
		public Keyword getCommaKeyword_1_4_0() { return cCommaKeyword_1_4_0; }
		
		//simpList+=AliasedSimpleName
		public Assignment getSimpListAssignment_1_4_1() { return cSimpListAssignment_1_4_1; }
		
		//AliasedSimpleName
		public RuleCall getSimpListAliasedSimpleNameParserRuleCall_1_4_1_0() { return cSimpListAliasedSimpleNameParserRuleCall_1_4_1_0; }
		
		//(comma?=',' dots?=DOTS)?
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//comma?=','
		public Assignment getCommaAssignment_1_5_0() { return cCommaAssignment_1_5_0; }
		
		//','
		public Keyword getCommaCommaKeyword_1_5_0_0() { return cCommaCommaKeyword_1_5_0_0; }
		
		//dots?=DOTS
		public Assignment getDotsAssignment_1_5_1() { return cDotsAssignment_1_5_1; }
		
		//DOTS
		public RuleCall getDotsDOTSTerminalRuleCall_1_5_1_0() { return cDotsDOTSTerminalRuleCall_1_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_6() { return cRightCurlyBracketKeyword_1_6; }
		
		//impname=APIName ('as' asname=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//impname=APIName
		public Assignment getImpnameAssignment_2_0() { return cImpnameAssignment_2_0; }
		
		//APIName
		public RuleCall getImpnameAPINameParserRuleCall_2_0_0() { return cImpnameAPINameParserRuleCall_2_0_0; }
		
		//('as' asname=ID)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'as'
		public Keyword getAsKeyword_2_1_0() { return cAsKeyword_2_1_0; }
		
		//asname=ID
		public Assignment getAsnameAssignment_2_1_1() { return cAsnameAssignment_2_1_1; }
		
		//ID
		public RuleCall getAsnameIDTerminalRuleCall_2_1_1_0() { return cAsnameIDTerminalRuleCall_2_1_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.QualifiedName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cDOTSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//QualifiedName:
		//	ID DOTS
		//	| ID ('.' ID)* DOTS
		//	| ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID DOTS | ID ('.' ID)* DOTS | ID ('.' ID)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID DOTS
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_0_1() { return cDOTSTerminalRuleCall_0_1; }
		
		//ID ('.' ID)* DOTS
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//('.' ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_1_2() { return cDOTSTerminalRuleCall_1_2; }
		
		//ID ('.' ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//('.' ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1_1() { return cIDTerminalRuleCall_2_1_1; }
	}
	public class APINameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.APIName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cDOTSTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cDOTSTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//APIName:
		//	ID DOTS
		//	| ID ('.' ID)* DOTS
		//	| ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID DOTS | ID ('.' ID)* DOTS | ID ('.' ID)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID DOTS
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_0_1() { return cDOTSTerminalRuleCall_0_1; }
		
		//ID ('.' ID)* DOTS
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//('.' ID)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//DOTS
		public RuleCall getDOTSTerminalRuleCall_1_2() { return cDOTSTerminalRuleCall_1_2; }
		
		//ID ('.' ID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_0() { return cIDTerminalRuleCall_2_0; }
		
		//('.' ID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2_1_0() { return cFullStopKeyword_2_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1_1() { return cIDTerminalRuleCall_2_1_1; }
	}
	public class SimpleNamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.SimpleNames");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameListSimpleNameParserRuleCall_0_0 = (RuleCall)cNameListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBrackAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cBrackLeftCurlyBracketKeyword_1_0_0 = (Keyword)cBrackAssignment_1_0.eContents().get(0);
		private final Assignment cNameListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameListSimpleNameParserRuleCall_1_1_0 = (RuleCall)cNameListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cNameListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cNameListSimpleNameParserRuleCall_1_2_1_0 = (RuleCall)cNameListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//SimpleNames:
		//	nameList+=SimpleName
		//	| brack='{' nameList+=SimpleName (',' nameList+=SimpleName)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//nameList+=SimpleName | brack='{' nameList+=SimpleName (',' nameList+=SimpleName)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nameList+=SimpleName
		public Assignment getNameListAssignment_0() { return cNameListAssignment_0; }
		
		//SimpleName
		public RuleCall getNameListSimpleNameParserRuleCall_0_0() { return cNameListSimpleNameParserRuleCall_0_0; }
		
		//brack='{' nameList+=SimpleName (',' nameList+=SimpleName)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//brack='{'
		public Assignment getBrackAssignment_1_0() { return cBrackAssignment_1_0; }
		
		//'{'
		public Keyword getBrackLeftCurlyBracketKeyword_1_0_0() { return cBrackLeftCurlyBracketKeyword_1_0_0; }
		
		//nameList+=SimpleName
		public Assignment getNameListAssignment_1_1() { return cNameListAssignment_1_1; }
		
		//SimpleName
		public RuleCall getNameListSimpleNameParserRuleCall_1_1_0() { return cNameListSimpleNameParserRuleCall_1_1_0; }
		
		//(',' nameList+=SimpleName)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//nameList+=SimpleName
		public Assignment getNameListAssignment_1_2_1() { return cNameListAssignment_1_2_1; }
		
		//SimpleName
		public RuleCall getNameListSimpleNameParserRuleCall_1_2_1_0() { return cNameListSimpleNameParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class SimpleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.SimpleName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SimpleName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AliasedSimpleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.AliasedSimpleName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrigIDTerminalRuleCall_0_0 = (RuleCall)cOrigAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAsNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAsNameIDTerminalRuleCall_1_1_0 = (RuleCall)cAsNameAssignment_1_1.eContents().get(0);
		
		//AliasedSimpleName:
		//	orig=ID ('as' asName=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//orig=ID ('as' asName=ID)?
		public Group getGroup() { return cGroup; }
		
		//orig=ID
		public Assignment getOrigAssignment_0() { return cOrigAssignment_0; }
		
		//ID
		public RuleCall getOrigIDTerminalRuleCall_0_0() { return cOrigIDTerminalRuleCall_0_0; }
		
		//('as' asName=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//asName=ID
		public Assignment getAsNameAssignment_1_1() { return cAsNameAssignment_1_1; }
		
		//ID
		public RuleCall getAsNameIDTerminalRuleCall_1_1_0() { return cAsNameIDTerminalRuleCall_1_1_0; }
	}
	public class AliasedAPINamesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.AliasedAPINames");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameListAliasedAPINameParserRuleCall_0_0 = (RuleCall)cNameListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBrackAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cBrackLeftCurlyBracketKeyword_1_0_0 = (Keyword)cBrackAssignment_1_0.eContents().get(0);
		private final Assignment cNameListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameListAliasedAPINameParserRuleCall_1_1_0 = (RuleCall)cNameListAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cNameListAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cNameListAliasedAPINameParserRuleCall_1_2_1_0 = (RuleCall)cNameListAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//AliasedAPINames:
		//	nameList+=AliasedAPIName
		//	| brack='{' nameList+=AliasedAPIName (',' nameList+=AliasedAPIName)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//nameList+=AliasedAPIName | brack='{' nameList+=AliasedAPIName (',' nameList+=AliasedAPIName)* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//nameList+=AliasedAPIName
		public Assignment getNameListAssignment_0() { return cNameListAssignment_0; }
		
		//AliasedAPIName
		public RuleCall getNameListAliasedAPINameParserRuleCall_0_0() { return cNameListAliasedAPINameParserRuleCall_0_0; }
		
		//brack='{' nameList+=AliasedAPIName (',' nameList+=AliasedAPIName)* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//brack='{'
		public Assignment getBrackAssignment_1_0() { return cBrackAssignment_1_0; }
		
		//'{'
		public Keyword getBrackLeftCurlyBracketKeyword_1_0_0() { return cBrackLeftCurlyBracketKeyword_1_0_0; }
		
		//nameList+=AliasedAPIName
		public Assignment getNameListAssignment_1_1() { return cNameListAssignment_1_1; }
		
		//AliasedAPIName
		public RuleCall getNameListAliasedAPINameParserRuleCall_1_1_0() { return cNameListAliasedAPINameParserRuleCall_1_1_0; }
		
		//(',' nameList+=AliasedAPIName)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//nameList+=AliasedAPIName
		public Assignment getNameListAssignment_1_2_1() { return cNameListAssignment_1_2_1; }
		
		//AliasedAPIName
		public RuleCall getNameListAliasedAPINameParserRuleCall_1_2_1_0() { return cNameListAliasedAPINameParserRuleCall_1_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
	}
	public class AliasedAPINameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.AliasedAPIName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOrigAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOrigAPINameParserRuleCall_0_0 = (RuleCall)cOrigAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAsNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAsNameIDTerminalRuleCall_1_1_0 = (RuleCall)cAsNameAssignment_1_1.eContents().get(0);
		
		//AliasedAPIName:
		//	orig=APIName ('as' asName=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//orig=APIName ('as' asName=ID)?
		public Group getGroup() { return cGroup; }
		
		//orig=APIName
		public Assignment getOrigAssignment_0() { return cOrigAssignment_0; }
		
		//APIName
		public RuleCall getOrigAPINameParserRuleCall_0_0() { return cOrigAPINameParserRuleCall_0_0; }
		
		//('as' asName=ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//asName=ID
		public Assignment getAsNameAssignment_1_1() { return cAsNameAssignment_1_1; }
		
		//ID
		public RuleCall getAsNameIDTerminalRuleCall_1_1_0() { return cAsNameIDTerminalRuleCall_1_1_0; }
	}
	public class DeclsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Decls");
		private final Assignment cDeclsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cDeclsDeclParserRuleCall_0 = (RuleCall)cDeclsAssignment.eContents().get(0);
		
		//Decls:
		//	decls+=Decl+;
		@Override public ParserRule getRule() { return rule; }
		
		//decls+=Decl+
		public Assignment getDeclsAssignment() { return cDeclsAssignment; }
		
		//Decl
		public RuleCall getDeclsDeclParserRuleCall_0() { return cDeclsDeclParserRuleCall_0; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Decl");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionFnDeclParserRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//Decl:
		//	function=FnDecl
		//	//	|var=VarDecl
		//	//	|object=ObjDecl
		//	//	|trait=TraitDecl
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//function=FnDecl
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//FnDecl
		public RuleCall getFunctionFnDeclParserRuleCall_0() { return cFunctionFnDeclParserRuleCall_0; }
	}
	public class FnModsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.FnMods");
		private final Assignment cModsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModsFnModParserRuleCall_0 = (RuleCall)cModsAssignment.eContents().get(0);
		
		//FnMods:
		//	mods+=FnMod+;
		@Override public ParserRule getRule() { return rule; }
		
		//mods+=FnMod+
		public Assignment getModsAssignment() { return cModsAssignment; }
		
		//FnMod
		public RuleCall getModsFnModParserRuleCall_0() { return cModsFnModParserRuleCall_0; }
	}
	public class FnModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.FnMod");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModtypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cModtypePrivateKeyword_0_0 = (Keyword)cModtypeAssignment_0.eContents().get(0);
		private final Assignment cModtypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cModtypeTestKeyword_1_0 = (Keyword)cModtypeAssignment_1.eContents().get(0);
		private final Assignment cModtypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cModtypeAtomicKeyword_2_0 = (Keyword)cModtypeAssignment_2.eContents().get(0);
		private final Assignment cModtypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cModtypeIoKeyword_3_0 = (Keyword)cModtypeAssignment_3.eContents().get(0);
		
		//FnMod:
		//	modtype='private'
		//	| modtype='test'
		//	| modtype='atomic'
		//	| modtype='io';
		@Override public ParserRule getRule() { return rule; }
		
		//modtype='private' | modtype='test' | modtype='atomic' | modtype='io'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//modtype='private'
		public Assignment getModtypeAssignment_0() { return cModtypeAssignment_0; }
		
		//'private'
		public Keyword getModtypePrivateKeyword_0_0() { return cModtypePrivateKeyword_0_0; }
		
		//modtype='test'
		public Assignment getModtypeAssignment_1() { return cModtypeAssignment_1; }
		
		//'test'
		public Keyword getModtypeTestKeyword_1_0() { return cModtypeTestKeyword_1_0; }
		
		//modtype='atomic'
		public Assignment getModtypeAssignment_2() { return cModtypeAssignment_2; }
		
		//'atomic'
		public Keyword getModtypeAtomicKeyword_2_0() { return cModtypeAtomicKeyword_2_0; }
		
		//modtype='io'
		public Assignment getModtypeAssignment_3() { return cModtypeAssignment_3; }
		
		//'io'
		public Keyword getModtypeIoKeyword_3_0() { return cModtypeIoKeyword_3_0; }
	}
	public class ValParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.ValParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_0_0 = (RuleCall)cParamsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cBrackAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cBrackLeftParenthesisKeyword_1_0_0 = (Keyword)cBrackAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cParamsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_1_1_0_0 = (RuleCall)cParamsAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_1_1_1_1_0 = (RuleCall)cParamsAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ValParam:
		//	params+=Param
		//	| brack='(' (params+=Param (',' params+=Param)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//params+=Param | brack='(' (params+=Param (',' params+=Param)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//params+=Param
		public Assignment getParamsAssignment_0() { return cParamsAssignment_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_0_0() { return cParamsParamParserRuleCall_0_0; }
		
		//brack='(' (params+=Param (',' params+=Param)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//brack='('
		public Assignment getBrackAssignment_1_0() { return cBrackAssignment_1_0; }
		
		//'('
		public Keyword getBrackLeftParenthesisKeyword_1_0_0() { return cBrackLeftParenthesisKeyword_1_0_0; }
		
		//(params+=Param (',' params+=Param)*)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//params+=Param
		public Assignment getParamsAssignment_1_1_0() { return cParamsAssignment_1_1_0; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_1_0_0() { return cParamsParamParserRuleCall_1_1_0_0; }
		
		//(',' params+=Param)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//params+=Param
		public Assignment getParamsAssignment_1_1_1_1() { return cParamsAssignment_1_1_1_1; }
		
		//Param
		public RuleCall getParamsParamParserRuleCall_1_1_1_1_0() { return cParamsParamParserRuleCall_1_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBIdBindIdParserRuleCall_0_0 = (RuleCall)cBIdAssignment_0.eContents().get(0);
		private final Assignment cIstypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIstypeIsTypeParserRuleCall_1_0 = (RuleCall)cIstypeAssignment_1.eContents().get(0);
		
		//Param:
		//	bId=BindId istype=IsType;
		@Override public ParserRule getRule() { return rule; }
		
		//bId=BindId istype=IsType
		public Group getGroup() { return cGroup; }
		
		//bId=BindId
		public Assignment getBIdAssignment_0() { return cBIdAssignment_0; }
		
		//BindId
		public RuleCall getBIdBindIdParserRuleCall_0_0() { return cBIdBindIdParserRuleCall_0_0; }
		
		//istype=IsType
		public Assignment getIstypeAssignment_1() { return cIstypeAssignment_1; }
		
		//IsType
		public RuleCall getIstypeIsTypeParserRuleCall_1_0() { return cIstypeIsTypeParserRuleCall_1_0; }
	}
	public class RetTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.RetType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cColonKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEmptyAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cEmptyLeftParenthesisKeyword_0_1_0 = (Keyword)cEmptyAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_1_0 = (RuleCall)cTypeAssignment_1_1.eContents().get(0);
		
		//RetType:
		//	':' empty='(' ')'
		//	| ':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//':' empty='(' ')' | ':' type=Type
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//':' empty='(' ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//':'
		public Keyword getColonKeyword_0_0() { return cColonKeyword_0_0; }
		
		//empty='('
		public Assignment getEmptyAssignment_0_1() { return cEmptyAssignment_0_1; }
		
		//'('
		public Keyword getEmptyLeftParenthesisKeyword_0_1_0() { return cEmptyLeftParenthesisKeyword_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//':' type=Type
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_1() { return cTypeAssignment_1_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_1_0() { return cTypeTypeParserRuleCall_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Type");
		private final Assignment cTnameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTnameIDTerminalRuleCall_0 = (RuleCall)cTnameAssignment.eContents().get(0);
		
		//Type:
		//	tname=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//tname=ID
		public Assignment getTnameAssignment() { return cTnameAssignment; }
		
		//ID
		public RuleCall getTnameIDTerminalRuleCall_0() { return cTnameIDTerminalRuleCall_0; }
	}
	public class FnDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.FnDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModsFnModsParserRuleCall_0_0 = (RuleCall)cModsAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParamsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParamsValParamParserRuleCall_2_0 = (RuleCall)cParamsAssignment_2.eContents().get(0);
		private final Assignment cRetValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRetValRetTypeParserRuleCall_3_0 = (RuleCall)cRetValAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cBodyAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cBodyEqualsSignKeyword_4_0_0 = (Keyword)cBodyAssignment_4_0.eContents().get(0);
		private final Assignment cFnItselfAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFnItselfExpressionParserRuleCall_4_1_0 = (RuleCall)cFnItselfAssignment_4_1.eContents().get(0);
		
		//FnDecl:
		//	mods=FnMods? name=ID params=ValParam retVal=RetType? (body?='=' fnItself=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//mods=FnMods? name=ID params=ValParam retVal=RetType? (body?='=' fnItself=Expression)?
		public Group getGroup() { return cGroup; }
		
		//mods=FnMods?
		public Assignment getModsAssignment_0() { return cModsAssignment_0; }
		
		//FnMods
		public RuleCall getModsFnModsParserRuleCall_0_0() { return cModsFnModsParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//params=ValParam
		public Assignment getParamsAssignment_2() { return cParamsAssignment_2; }
		
		//ValParam
		public RuleCall getParamsValParamParserRuleCall_2_0() { return cParamsValParamParserRuleCall_2_0; }
		
		//retVal=RetType?
		public Assignment getRetValAssignment_3() { return cRetValAssignment_3; }
		
		//RetType
		public RuleCall getRetValRetTypeParserRuleCall_3_0() { return cRetValRetTypeParserRuleCall_3_0; }
		
		//(body?='=' fnItself=Expression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//body?='='
		public Assignment getBodyAssignment_4_0() { return cBodyAssignment_4_0; }
		
		//'='
		public Keyword getBodyEqualsSignKeyword_4_0_0() { return cBodyEqualsSignKeyword_4_0_0; }
		
		//fnItself=Expression
		public Assignment getFnItselfAssignment_4_1() { return cFnItselfAssignment_4_1; }
		
		//Expression
		public RuleCall getFnItselfExpressionParserRuleCall_4_1_0() { return cFnItselfExpressionParserRuleCall_4_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Expression");
		private final Assignment cExpAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpExprParserRuleCall_0 = (RuleCall)cExpAssignment.eContents().get(0);
		
		//Expression:
		//	exp=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//exp=Expr
		public Assignment getExpAssignment() { return cExpAssignment; }
		
		//Expr
		public RuleCall getExpExprParserRuleCall_0() { return cExpExprParserRuleCall_0; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFrontAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFrontExprFrontParserRuleCall_0_0 = (RuleCall)cFrontAssignment_0.eContents().get(0);
		private final Assignment cTailsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailsExprTailParserRuleCall_1_0 = (RuleCall)cTailsAssignment_1.eContents().get(0);
		
		//Expr:
		//	front=ExprFront tails+=ExprTail*;
		@Override public ParserRule getRule() { return rule; }
		
		//front=ExprFront tails+=ExprTail*
		public Group getGroup() { return cGroup; }
		
		//front=ExprFront
		public Assignment getFrontAssignment_0() { return cFrontAssignment_0; }
		
		//ExprFront
		public RuleCall getFrontExprFrontParserRuleCall_0_0() { return cFrontExprFrontParserRuleCall_0_0; }
		
		//tails+=ExprTail*
		public Assignment getTailsAssignment_1() { return cTailsAssignment_1; }
		
		//ExprTail
		public RuleCall getTailsExprTailParserRuleCall_1_0() { return cTailsExprTailParserRuleCall_1_0; }
	}
	public class ExprFrontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.ExprFront");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDelimAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDelimDelimitedExprParserRuleCall_0_0 = (RuleCall)cDelimAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdQualifiedNameParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		
		//ExprFront:
		//	delim=DelimitedExpr
		//	| id=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//delim=DelimitedExpr | id=QualifiedName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//delim=DelimitedExpr
		public Assignment getDelimAssignment_0() { return cDelimAssignment_0; }
		
		//DelimitedExpr
		public RuleCall getDelimDelimitedExprParserRuleCall_0_0() { return cDelimDelimitedExprParserRuleCall_0_0; }
		
		//id=QualifiedName
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//QualifiedName
		public RuleCall getIdQualifiedNameParserRuleCall_1_0() { return cIdQualifiedNameParserRuleCall_1_0; }
	}
	public class ExprTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.ExprTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//ExprTail:
		//	'as' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'as' type=Type
		public Group getGroup() { return cGroup; }
		
		//'as'
		public Keyword getAsKeyword_0() { return cAsKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class DelimitedExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.DelimitedExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDoAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cDoDoParserRuleCall_0_0 = (RuleCall)cDoAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cWhileKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_1_0 = (RuleCall)cExprAssignment_1_1.eContents().get(0);
		private final Assignment cDoAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cDoDoParserRuleCall_1_2_0 = (RuleCall)cDoAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cGenAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cGenGeneratorsParserRuleCall_2_1_0 = (RuleCall)cGenAssignment_2_1.eContents().get(0);
		private final Assignment cDorontAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cDorontDoFrontParserRuleCall_2_2_0 = (RuleCall)cDorontAssignment_2_2.eContents().get(0);
		private final Keyword cEndKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExprAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_3_1_0 = (RuleCall)cExprAssignment_3_1.eContents().get(0);
		private final Keyword cThenKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cBlockAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cBlockBlockElemsParserRuleCall_3_3_0 = (RuleCall)cBlockAssignment_3_3.eContents().get(0);
		private final Assignment cElifsAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cElifsElifsParserRuleCall_3_4_0 = (RuleCall)cElifsAssignment_3_4.eContents().get(0);
		private final Assignment cElseAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cElseElseParserRuleCall_3_5_0 = (RuleCall)cElseAssignment_3_5.eContents().get(0);
		private final Keyword cEndKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Assignment cParAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cParParanthesizedParserRuleCall_4_0 = (RuleCall)cParAssignment_4.eContents().get(0);
		
		//DelimitedExpr:
		//	do=Do
		//	| 'while' expr=Expr do=Do
		//	| 'for' gen=Generators doront=DoFront 'end'
		//	| 'if' expr=Expr 'then' block=BlockElems elifs=Elifs? else=Else? 'end'
		//	| par=Paranthesized;
		@Override public ParserRule getRule() { return rule; }
		
		//do=Do | 'while' expr=Expr do=Do | 'for' gen=Generators doront=DoFront 'end' | 'if' expr=Expr 'then' block=BlockElems
		//elifs=Elifs? else=Else? 'end' | par=Paranthesized
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//do=Do
		public Assignment getDoAssignment_0() { return cDoAssignment_0; }
		
		//Do
		public RuleCall getDoDoParserRuleCall_0_0() { return cDoDoParserRuleCall_0_0; }
		
		//'while' expr=Expr do=Do
		public Group getGroup_1() { return cGroup_1; }
		
		//'while'
		public Keyword getWhileKeyword_1_0() { return cWhileKeyword_1_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1_1() { return cExprAssignment_1_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_1_0() { return cExprExprParserRuleCall_1_1_0; }
		
		//do=Do
		public Assignment getDoAssignment_1_2() { return cDoAssignment_1_2; }
		
		//Do
		public RuleCall getDoDoParserRuleCall_1_2_0() { return cDoDoParserRuleCall_1_2_0; }
		
		//'for' gen=Generators doront=DoFront 'end'
		public Group getGroup_2() { return cGroup_2; }
		
		//'for'
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }
		
		//gen=Generators
		public Assignment getGenAssignment_2_1() { return cGenAssignment_2_1; }
		
		//Generators
		public RuleCall getGenGeneratorsParserRuleCall_2_1_0() { return cGenGeneratorsParserRuleCall_2_1_0; }
		
		//doront=DoFront
		public Assignment getDorontAssignment_2_2() { return cDorontAssignment_2_2; }
		
		//DoFront
		public RuleCall getDorontDoFrontParserRuleCall_2_2_0() { return cDorontDoFrontParserRuleCall_2_2_0; }
		
		//'end'
		public Keyword getEndKeyword_2_3() { return cEndKeyword_2_3; }
		
		//'if' expr=Expr 'then' block=BlockElems elifs=Elifs? else=Else? 'end'
		public Group getGroup_3() { return cGroup_3; }
		
		//'if'
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_3_1() { return cExprAssignment_3_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_3_1_0() { return cExprExprParserRuleCall_3_1_0; }
		
		//'then'
		public Keyword getThenKeyword_3_2() { return cThenKeyword_3_2; }
		
		//block=BlockElems
		public Assignment getBlockAssignment_3_3() { return cBlockAssignment_3_3; }
		
		//BlockElems
		public RuleCall getBlockBlockElemsParserRuleCall_3_3_0() { return cBlockBlockElemsParserRuleCall_3_3_0; }
		
		//elifs=Elifs?
		public Assignment getElifsAssignment_3_4() { return cElifsAssignment_3_4; }
		
		//Elifs
		public RuleCall getElifsElifsParserRuleCall_3_4_0() { return cElifsElifsParserRuleCall_3_4_0; }
		
		//else=Else?
		public Assignment getElseAssignment_3_5() { return cElseAssignment_3_5; }
		
		//Else
		public RuleCall getElseElseParserRuleCall_3_5_0() { return cElseElseParserRuleCall_3_5_0; }
		
		//'end'
		public Keyword getEndKeyword_3_6() { return cEndKeyword_3_6; }
		
		//par=Paranthesized
		public Assignment getParAssignment_4() { return cParAssignment_4; }
		
		//Paranthesized
		public RuleCall getParParanthesizedParserRuleCall_4_0() { return cParParanthesizedParserRuleCall_4_0; }
	}
	public class ElifsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Elifs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEElifParserRuleCall_0_0 = (RuleCall)cEAssignment_0.eContents().get(0);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEElifParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//Elifs:
		//	e+=Elif e+=Elif*;
		@Override public ParserRule getRule() { return rule; }
		
		//e+=Elif e+=Elif*
		public Group getGroup() { return cGroup; }
		
		//e+=Elif
		public Assignment getEAssignment_0() { return cEAssignment_0; }
		
		//Elif
		public RuleCall getEElifParserRuleCall_0_0() { return cEElifParserRuleCall_0_0; }
		
		//e+=Elif*
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//Elif
		public RuleCall getEElifParserRuleCall_1_0() { return cEElifParserRuleCall_1_0; }
	}
	public class ElifElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Elif");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockElemsParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//Elif:
		//	'elif' expr=Expr 'then' block=BlockElems;
		@Override public ParserRule getRule() { return rule; }
		
		//'elif' expr=Expr 'then' block=BlockElems
		public Group getGroup() { return cGroup; }
		
		//'elif'
		public Keyword getElifKeyword_0() { return cElifKeyword_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//block=BlockElems
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//BlockElems
		public RuleCall getBlockBlockElemsParserRuleCall_3_0() { return cBlockBlockElemsParserRuleCall_3_0; }
	}
	public class ElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Else");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockElemsParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//Else:
		//	'else' block=BlockElems;
		@Override public ParserRule getRule() { return rule; }
		
		//'else' block=BlockElems
		public Group getGroup() { return cGroup; }
		
		//'else'
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }
		
		//block=BlockElems
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }
		
		//BlockElems
		public RuleCall getBlockBlockElemsParserRuleCall_1_0() { return cBlockBlockElemsParserRuleCall_1_0; }
	}
	public class GeneratorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Generators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBindingBindingParserRuleCall_0_0 = (RuleCall)cBindingAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cClauseAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cClauseGenClauseParserRuleCall_1_1_0 = (RuleCall)cClauseAssignment_1_1.eContents().get(0);
		
		//Generators:
		//	binding=Binding (',' clause+=GenClause)*;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=Binding (',' clause+=GenClause)*
		public Group getGroup() { return cGroup; }
		
		//binding=Binding
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_0_0() { return cBindingBindingParserRuleCall_0_0; }
		
		//(',' clause+=GenClause)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//clause+=GenClause
		public Assignment getClauseAssignment_1_1() { return cClauseAssignment_1_1; }
		
		//GenClause
		public RuleCall getClauseGenClauseParserRuleCall_1_1_0() { return cClauseGenClauseParserRuleCall_1_1_0; }
	}
	public class BindingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Binding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdtupAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdtupIdOrTupleParserRuleCall_0_0 = (RuleCall)cIdtupAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExprParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//Binding:
		//	idtup=IdOrTuple '<-' expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//idtup=IdOrTuple '<-' expr=Expr
		public Group getGroup() { return cGroup; }
		
		//idtup=IdOrTuple
		public Assignment getIdtupAssignment_0() { return cIdtupAssignment_0; }
		
		//IdOrTuple
		public RuleCall getIdtupIdOrTupleParserRuleCall_0_0() { return cIdtupIdOrTupleParserRuleCall_0_0; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//expr=Expr
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_2_0() { return cExprExprParserRuleCall_2_0; }
	}
	public class GenClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.GenClause");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBindingAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBindingBindingParserRuleCall_0_0 = (RuleCall)cBindingAssignment_0.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		
		//GenClause:
		//	binding=Binding
		//	| expr=Expr;
		@Override public ParserRule getRule() { return rule; }
		
		//binding=Binding | expr=Expr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//binding=Binding
		public Assignment getBindingAssignment_0() { return cBindingAssignment_0; }
		
		//Binding
		public RuleCall getBindingBindingParserRuleCall_0_0() { return cBindingBindingParserRuleCall_0_0; }
		
		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }
		
		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }
	}
	public class BlockElemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.BlockElems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBlockElemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cBlockElemsBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cMoreBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMoreBlocksBlockElemParserRuleCall_2_0 = (RuleCall)cMoreBlocksAssignment_2.eContents().get(0);
		
		//BlockElems Expression:
		//	BlockElem {BlockElems.block=current} moreBlocks+=BlockElem*;
		@Override public ParserRule getRule() { return rule; }
		
		//BlockElem {BlockElems.block=current} moreBlocks+=BlockElem*
		public Group getGroup() { return cGroup; }
		
		//BlockElem
		public RuleCall getBlockElemParserRuleCall_0() { return cBlockElemParserRuleCall_0; }
		
		//{BlockElems.block=current}
		public Action getBlockElemsBlockAction_1() { return cBlockElemsBlockAction_1; }
		
		//moreBlocks+=BlockElem*
		public Assignment getMoreBlocksAssignment_2() { return cMoreBlocksAssignment_2; }
		
		//BlockElem
		public RuleCall getMoreBlocksBlockElemParserRuleCall_2_0() { return cMoreBlocksBlockElemParserRuleCall_2_0; }
	}
	public class BlockElemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.BlockElem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Action cBlockELemExprAction_1 = (Action)cGroup.eContents().get(1);
		
		//BlockElem Expression:
		//	Expr {BlockELem.expr=current};
		@Override public ParserRule getRule() { return rule; }
		
		//Expr {BlockELem.expr=current}
		public Group getGroup() { return cGroup; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }
		
		//{BlockELem.expr=current}
		public Action getBlockELemExprAction_1() { return cBlockELemExprAction_1; }
	}
	public class ParanthesizedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Paranthesized");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Action cParanthesizedExprAction_2 = (Action)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Paranthesized Expression:
		//	'(' Expr {Paranthesized.expr=current} ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expr {Paranthesized.expr=current} ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
		
		//{Paranthesized.expr=current}
		public Action getParanthesizedExprAction_2() { return cParanthesizedExprAction_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class DoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.Do");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDofsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDofsDoFrontParserRuleCall_0_0 = (RuleCall)cDofsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAlsoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDofsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDofsDoFrontParserRuleCall_1_1_0 = (RuleCall)cDofsAssignment_1_1.eContents().get(0);
		private final Keyword cEndKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Do:
		//	dofs+=DoFront ('also' dofs+=DoFront)* "end";
		@Override public ParserRule getRule() { return rule; }
		
		//dofs+=DoFront ('also' dofs+=DoFront)* "end"
		public Group getGroup() { return cGroup; }
		
		//dofs+=DoFront
		public Assignment getDofsAssignment_0() { return cDofsAssignment_0; }
		
		//DoFront
		public RuleCall getDofsDoFrontParserRuleCall_0_0() { return cDofsDoFrontParserRuleCall_0_0; }
		
		//('also' dofs+=DoFront)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'also'
		public Keyword getAlsoKeyword_1_0() { return cAlsoKeyword_1_0; }
		
		//dofs+=DoFront
		public Assignment getDofsAssignment_1_1() { return cDofsAssignment_1_1; }
		
		//DoFront
		public RuleCall getDofsDoFrontParserRuleCall_1_1_0() { return cDofsDoFrontParserRuleCall_1_1_0; }
		
		//"end"
		public Keyword getEndKeyword_2() { return cEndKeyword_2; }
	}
	public class DoFrontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.DoFront");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAtAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAtAtKeyword_0_0 = (Keyword)cAtAssignment_0.eContents().get(0);
		private final Assignment cAtomAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAtomAtomicKeyword_1_0 = (Keyword)cAtomAssignment_1.eContents().get(0);
		private final Keyword cDoKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockElemsParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//DoFront:
		//	at='at'? atom='atomic'? 'do' block=BlockElems;
		@Override public ParserRule getRule() { return rule; }
		
		//at='at'? atom='atomic'? 'do' block=BlockElems
		public Group getGroup() { return cGroup; }
		
		//at='at'?
		public Assignment getAtAssignment_0() { return cAtAssignment_0; }
		
		//'at'
		public Keyword getAtAtKeyword_0_0() { return cAtAtKeyword_0_0; }
		
		//atom='atomic'?
		public Assignment getAtomAssignment_1() { return cAtomAssignment_1; }
		
		//'atomic'
		public Keyword getAtomAtomicKeyword_1_0() { return cAtomAtomicKeyword_1_0; }
		
		//'do'
		public Keyword getDoKeyword_2() { return cDoKeyword_2; }
		
		//block=BlockElems
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//BlockElems
		public RuleCall getBlockBlockElemsParserRuleCall_3_0() { return cBlockBlockElemsParserRuleCall_3_0; }
	}
	public class IdOrTupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.IdOrTuple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBidAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBidBindIdParserRuleCall_0_0 = (RuleCall)cBidAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cBidAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBidBindIdParserRuleCall_1_1_0 = (RuleCall)cBidAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cBidAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cBidBindIdParserRuleCall_1_2_1_0 = (RuleCall)cBidAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//IdOrTuple:
		//	bid+=BindId
		//	| '(' bid+=BindId (',' bid+=BindId)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//bid+=BindId | '(' bid+=BindId (',' bid+=BindId)* ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bid+=BindId
		public Assignment getBidAssignment_0() { return cBidAssignment_0; }
		
		//BindId
		public RuleCall getBidBindIdParserRuleCall_0_0() { return cBidBindIdParserRuleCall_0_0; }
		
		//'(' bid+=BindId (',' bid+=BindId)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//bid+=BindId
		public Assignment getBidAssignment_1_1() { return cBidAssignment_1_1; }
		
		//BindId
		public RuleCall getBidBindIdParserRuleCall_1_1_0() { return cBidBindIdParserRuleCall_1_1_0; }
		
		//(',' bid+=BindId)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//bid+=BindId
		public Assignment getBidAssignment_1_2_1() { return cBidAssignment_1_2_1; }
		
		//BindId
		public RuleCall getBidBindIdParserRuleCall_1_2_1_0() { return cBidBindIdParserRuleCall_1_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class BindIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.BindId");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword c_Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BindId:
		//	ID
		//	| '_';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | '_'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'_'
		public Keyword get_Keyword_1() { return c_Keyword_1; }
	}
	public class IsTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.IsType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//IsType:
		//	':' type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//':' type=Type
		public Group getGroup() { return cGroup; }
		
		//':'
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final ComponentElements pComponent;
	private final APIElements pAPI;
	private final ImportElements pImport;
	private final ExportElements pExport;
	private final ImportedNamesElements pImportedNames;
	private final QualifiedNameElements pQualifiedName;
	private final APINameElements pAPIName;
	private final SimpleNamesElements pSimpleNames;
	private final SimpleNameElements pSimpleName;
	private final AliasedSimpleNameElements pAliasedSimpleName;
	private final AliasedAPINamesElements pAliasedAPINames;
	private final AliasedAPINameElements pAliasedAPIName;
	private final DeclsElements pDecls;
	private final DeclElements pDecl;
	private final FnModsElements pFnMods;
	private final FnModElements pFnMod;
	private final ValParamElements pValParam;
	private final ParamElements pParam;
	private final RetTypeElements pRetType;
	private final TypeElements pType;
	private final FnDeclElements pFnDecl;
	private final ExpressionElements pExpression;
	private final ExprElements pExpr;
	private final ExprFrontElements pExprFront;
	private final ExprTailElements pExprTail;
	private final DelimitedExprElements pDelimitedExpr;
	private final ElifsElements pElifs;
	private final ElifElements pElif;
	private final ElseElements pElse;
	private final GeneratorsElements pGenerators;
	private final BindingElements pBinding;
	private final GenClauseElements pGenClause;
	private final BlockElemsElements pBlockElems;
	private final BlockElemElements pBlockElem;
	private final ParanthesizedElements pParanthesized;
	private final DoElements pDo;
	private final DoFrontElements pDoFront;
	private final IdOrTupleElements pIdOrTuple;
	private final BindIdElements pBindId;
	private final IsTypeElements pIsType;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tGREATERS;
	private final TerminalRule tLESSES;
	private final TerminalRule tBARS;
	private final TerminalRule tSLASHES;
	private final TerminalRule tSD;
	private final TerminalRule tLEFT_ENCLOSER;
	private final TerminalRule tRIGHT_ENCLOSER;
	private final TerminalRule tDOTS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FortXTransGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pComponent = new ComponentElements();
		this.pAPI = new APIElements();
		this.pImport = new ImportElements();
		this.pExport = new ExportElements();
		this.pImportedNames = new ImportedNamesElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pAPIName = new APINameElements();
		this.pSimpleNames = new SimpleNamesElements();
		this.pSimpleName = new SimpleNameElements();
		this.pAliasedSimpleName = new AliasedSimpleNameElements();
		this.pAliasedAPINames = new AliasedAPINamesElements();
		this.pAliasedAPIName = new AliasedAPINameElements();
		this.pDecls = new DeclsElements();
		this.pDecl = new DeclElements();
		this.pFnMods = new FnModsElements();
		this.pFnMod = new FnModElements();
		this.pValParam = new ValParamElements();
		this.pParam = new ParamElements();
		this.pRetType = new RetTypeElements();
		this.pType = new TypeElements();
		this.pFnDecl = new FnDeclElements();
		this.pExpression = new ExpressionElements();
		this.pExpr = new ExprElements();
		this.pExprFront = new ExprFrontElements();
		this.pExprTail = new ExprTailElements();
		this.pDelimitedExpr = new DelimitedExprElements();
		this.pElifs = new ElifsElements();
		this.pElif = new ElifElements();
		this.pElse = new ElseElements();
		this.pGenerators = new GeneratorsElements();
		this.pBinding = new BindingElements();
		this.pGenClause = new GenClauseElements();
		this.pBlockElems = new BlockElemsElements();
		this.pBlockElem = new BlockElemElements();
		this.pParanthesized = new ParanthesizedElements();
		this.pDo = new DoElements();
		this.pDoFront = new DoFrontElements();
		this.pIdOrTuple = new IdOrTupleElements();
		this.pBindId = new BindIdElements();
		this.pIsType = new IsTypeElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.ML_COMMENT");
		this.tGREATERS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.GREATERS");
		this.tLESSES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.LESSES");
		this.tBARS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.BARS");
		this.tSLASHES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.SLASHES");
		this.tSD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.SD");
		this.tLEFT_ENCLOSER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.LEFT_ENCLOSER");
		this.tRIGHT_ENCLOSER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.RIGHT_ENCLOSER");
		this.tDOTS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "srf.transpiler.fortxtrans.FortXTrans.DOTS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("srf.transpiler.fortxtrans.FortXTrans".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	Component
	//	| API;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Component:
	//	'component' name=ID imports+=Import* exports+=Export+ decls+=Decls* 'end';
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//API:
	//	'api' name=ID imports+=Import* /*(absDecls+=AbsDecls)**/ 'end';
	public APIElements getAPIAccess() {
		return pAPI;
	}
	
	public ParserRule getAPIRule() {
		return getAPIAccess().getRule();
	}
	
	//Import:
	//	imps='import' importedNames=ImportedNames
	//	| imps='import' api='api' aliasedimportedNames=AliasedAPINames;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//Export:
	//	exp='export' exportedName+=APIName
	//	| exp='export' brack='{' exportedName+=APIName ("," exportedName+=APIName)* '}';
	public ExportElements getExportAccess() {
		return pExport;
	}
	
	public ParserRule getExportRule() {
		return getExportAccess().getRule();
	}
	
	//ImportedNames:
	//	impname=APIName '.' '{' DOTS '}' (except?='except' simp=SimpleNames)?
	//	| impname=APIName '.' '{' simpList+=AliasedSimpleName (',' simpList+=AliasedSimpleName)* (comma?=',' dots?=DOTS)? '}'
	//	| impname=APIName ('as' asname=ID)?;
	public ImportedNamesElements getImportedNamesAccess() {
		return pImportedNames;
	}
	
	public ParserRule getImportedNamesRule() {
		return getImportedNamesAccess().getRule();
	}
	
	//QualifiedName:
	//	ID DOTS
	//	| ID ('.' ID)* DOTS
	//	| ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//APIName:
	//	ID DOTS
	//	| ID ('.' ID)* DOTS
	//	| ID ('.' ID)*;
	public APINameElements getAPINameAccess() {
		return pAPIName;
	}
	
	public ParserRule getAPINameRule() {
		return getAPINameAccess().getRule();
	}
	
	//SimpleNames:
	//	nameList+=SimpleName
	//	| brack='{' nameList+=SimpleName (',' nameList+=SimpleName)* '}';
	public SimpleNamesElements getSimpleNamesAccess() {
		return pSimpleNames;
	}
	
	public ParserRule getSimpleNamesRule() {
		return getSimpleNamesAccess().getRule();
	}
	
	//SimpleName:
	//	name=ID;
	public SimpleNameElements getSimpleNameAccess() {
		return pSimpleName;
	}
	
	public ParserRule getSimpleNameRule() {
		return getSimpleNameAccess().getRule();
	}
	
	//AliasedSimpleName:
	//	orig=ID ('as' asName=ID)?;
	public AliasedSimpleNameElements getAliasedSimpleNameAccess() {
		return pAliasedSimpleName;
	}
	
	public ParserRule getAliasedSimpleNameRule() {
		return getAliasedSimpleNameAccess().getRule();
	}
	
	//AliasedAPINames:
	//	nameList+=AliasedAPIName
	//	| brack='{' nameList+=AliasedAPIName (',' nameList+=AliasedAPIName)* '}';
	public AliasedAPINamesElements getAliasedAPINamesAccess() {
		return pAliasedAPINames;
	}
	
	public ParserRule getAliasedAPINamesRule() {
		return getAliasedAPINamesAccess().getRule();
	}
	
	//AliasedAPIName:
	//	orig=APIName ('as' asName=ID)?;
	public AliasedAPINameElements getAliasedAPINameAccess() {
		return pAliasedAPIName;
	}
	
	public ParserRule getAliasedAPINameRule() {
		return getAliasedAPINameAccess().getRule();
	}
	
	//Decls:
	//	decls+=Decl+;
	public DeclsElements getDeclsAccess() {
		return pDecls;
	}
	
	public ParserRule getDeclsRule() {
		return getDeclsAccess().getRule();
	}
	
	//Decl:
	//	function=FnDecl
	//	//	|var=VarDecl
	//	//	|object=ObjDecl
	//	//	|trait=TraitDecl
	//;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//FnMods:
	//	mods+=FnMod+;
	public FnModsElements getFnModsAccess() {
		return pFnMods;
	}
	
	public ParserRule getFnModsRule() {
		return getFnModsAccess().getRule();
	}
	
	//FnMod:
	//	modtype='private'
	//	| modtype='test'
	//	| modtype='atomic'
	//	| modtype='io';
	public FnModElements getFnModAccess() {
		return pFnMod;
	}
	
	public ParserRule getFnModRule() {
		return getFnModAccess().getRule();
	}
	
	//ValParam:
	//	params+=Param
	//	| brack='(' (params+=Param (',' params+=Param)*)? ')';
	public ValParamElements getValParamAccess() {
		return pValParam;
	}
	
	public ParserRule getValParamRule() {
		return getValParamAccess().getRule();
	}
	
	//Param:
	//	bId=BindId istype=IsType;
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}
	
	//RetType:
	//	':' empty='(' ')'
	//	| ':' type=Type;
	public RetTypeElements getRetTypeAccess() {
		return pRetType;
	}
	
	public ParserRule getRetTypeRule() {
		return getRetTypeAccess().getRule();
	}
	
	//Type:
	//	tname=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//FnDecl:
	//	mods=FnMods? name=ID params=ValParam retVal=RetType? (body?='=' fnItself=Expression)?;
	public FnDeclElements getFnDeclAccess() {
		return pFnDecl;
	}
	
	public ParserRule getFnDeclRule() {
		return getFnDeclAccess().getRule();
	}
	
	//Expression:
	//	exp=Expr;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expr:
	//	front=ExprFront tails+=ExprTail*;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprFront:
	//	delim=DelimitedExpr
	//	| id=QualifiedName;
	public ExprFrontElements getExprFrontAccess() {
		return pExprFront;
	}
	
	public ParserRule getExprFrontRule() {
		return getExprFrontAccess().getRule();
	}
	
	//ExprTail:
	//	'as' type=Type;
	public ExprTailElements getExprTailAccess() {
		return pExprTail;
	}
	
	public ParserRule getExprTailRule() {
		return getExprTailAccess().getRule();
	}
	
	//DelimitedExpr:
	//	do=Do
	//	| 'while' expr=Expr do=Do
	//	| 'for' gen=Generators doront=DoFront 'end'
	//	| 'if' expr=Expr 'then' block=BlockElems elifs=Elifs? else=Else? 'end'
	//	| par=Paranthesized;
	public DelimitedExprElements getDelimitedExprAccess() {
		return pDelimitedExpr;
	}
	
	public ParserRule getDelimitedExprRule() {
		return getDelimitedExprAccess().getRule();
	}
	
	//Elifs:
	//	e+=Elif e+=Elif*;
	public ElifsElements getElifsAccess() {
		return pElifs;
	}
	
	public ParserRule getElifsRule() {
		return getElifsAccess().getRule();
	}
	
	//Elif:
	//	'elif' expr=Expr 'then' block=BlockElems;
	public ElifElements getElifAccess() {
		return pElif;
	}
	
	public ParserRule getElifRule() {
		return getElifAccess().getRule();
	}
	
	//Else:
	//	'else' block=BlockElems;
	public ElseElements getElseAccess() {
		return pElse;
	}
	
	public ParserRule getElseRule() {
		return getElseAccess().getRule();
	}
	
	//Generators:
	//	binding=Binding (',' clause+=GenClause)*;
	public GeneratorsElements getGeneratorsAccess() {
		return pGenerators;
	}
	
	public ParserRule getGeneratorsRule() {
		return getGeneratorsAccess().getRule();
	}
	
	//Binding:
	//	idtup=IdOrTuple '<-' expr=Expr;
	public BindingElements getBindingAccess() {
		return pBinding;
	}
	
	public ParserRule getBindingRule() {
		return getBindingAccess().getRule();
	}
	
	//GenClause:
	//	binding=Binding
	//	| expr=Expr;
	public GenClauseElements getGenClauseAccess() {
		return pGenClause;
	}
	
	public ParserRule getGenClauseRule() {
		return getGenClauseAccess().getRule();
	}
	
	//BlockElems Expression:
	//	BlockElem {BlockElems.block=current} moreBlocks+=BlockElem*;
	public BlockElemsElements getBlockElemsAccess() {
		return pBlockElems;
	}
	
	public ParserRule getBlockElemsRule() {
		return getBlockElemsAccess().getRule();
	}
	
	//BlockElem Expression:
	//	Expr {BlockELem.expr=current};
	public BlockElemElements getBlockElemAccess() {
		return pBlockElem;
	}
	
	public ParserRule getBlockElemRule() {
		return getBlockElemAccess().getRule();
	}
	
	//Paranthesized Expression:
	//	'(' Expr {Paranthesized.expr=current} ')';
	public ParanthesizedElements getParanthesizedAccess() {
		return pParanthesized;
	}
	
	public ParserRule getParanthesizedRule() {
		return getParanthesizedAccess().getRule();
	}
	
	//Do:
	//	dofs+=DoFront ('also' dofs+=DoFront)* "end";
	public DoElements getDoAccess() {
		return pDo;
	}
	
	public ParserRule getDoRule() {
		return getDoAccess().getRule();
	}
	
	//DoFront:
	//	at='at'? atom='atomic'? 'do' block=BlockElems;
	public DoFrontElements getDoFrontAccess() {
		return pDoFront;
	}
	
	public ParserRule getDoFrontRule() {
		return getDoFrontAccess().getRule();
	}
	
	//IdOrTuple:
	//	bid+=BindId
	//	| '(' bid+=BindId (',' bid+=BindId)* ')';
	public IdOrTupleElements getIdOrTupleAccess() {
		return pIdOrTuple;
	}
	
	public ParserRule getIdOrTupleRule() {
		return getIdOrTupleAccess().getRule();
	}
	
	//BindId:
	//	ID
	//	| '_';
	public BindIdElements getBindIdAccess() {
		return pBindId;
	}
	
	public ParserRule getBindIdRule() {
		return getBindIdAccess().getRule();
	}
	
	//IsType:
	//	':' type=Type;
	public IsTypeElements getIsTypeAccess() {
		return pIsType;
	}
	
	public ParserRule getIsTypeRule() {
		return getIsTypeAccess().getRule();
	}
	
	//@ Override terminal ML_COMMENT:
	//	'(*'->'*)';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal GREATERS:
	//	'>' (SD '>')*;
	public TerminalRule getGREATERSRule() {
		return tGREATERS;
	}
	
	//terminal LESSES:
	//	'<' (SD '<')*;
	public TerminalRule getLESSESRule() {
		return tLESSES;
	}
	
	//terminal BARS:
	//	'|' (SD '|')*;
	public TerminalRule getBARSRule() {
		return tBARS;
	}
	
	//terminal SLASHES:
	//	"/" (SD "/")*;
	public TerminalRule getSLASHESRule() {
		return tSLASHES;
	}
	
	//terminal SD:
	//	'.' | '*'?;
	public TerminalRule getSDRule() {
		return tSD;
	}
	
	//terminal LEFT_ENCLOSER:
	//	'(' ('/'+ | '\\'+) | '[/\\/\\/' | '[/\\/'
	//	| '[' (SD SLASHES) | LESSES SD (SLASHES | BARS) | BARS SD SLASHES
	//	| ('{*' | '[*') | ('((>' | '(<');
	public TerminalRule getLEFT_ENCLOSERRule() {
		return tLEFT_ENCLOSER;
	}
	
	//terminal RIGHT_ENCLOSER:
	//	'/'+ ')'
	//	| '\\'+ ')'
	//	| SLASHES SD (GREATERS | BARS | ('\\' | ']')) | BARS SD GREATERS
	//	| ('*]' | '*}') | "]"
	//	| (">)" | "<))") | "/\\/\\/]" | "/\\/]";
	public TerminalRule getRIGHT_ENCLOSERRule() {
		return tRIGHT_ENCLOSER;
	}
	
	//terminal DOTS:
	//	'...';
	public TerminalRule getDOTSRule() {
		return tDOTS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import srf.transpiler.fortxtrans.fortXTrans.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage
 * @generated
 */
public class FortXTransAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FortXTransPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FortXTransAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FortXTransPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FortXTransSwitch<Adapter> modelSwitch =
    new FortXTransSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseAPI(API object)
      {
        return createAPIAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseExport(Export object)
      {
        return createExportAdapter();
      }
      @Override
      public Adapter caseImportedNames(ImportedNames object)
      {
        return createImportedNamesAdapter();
      }
      @Override
      public Adapter caseSimpleNames(SimpleNames object)
      {
        return createSimpleNamesAdapter();
      }
      @Override
      public Adapter caseSimpleName(SimpleName object)
      {
        return createSimpleNameAdapter();
      }
      @Override
      public Adapter caseAliasedSimpleName(AliasedSimpleName object)
      {
        return createAliasedSimpleNameAdapter();
      }
      @Override
      public Adapter caseAliasedAPINames(AliasedAPINames object)
      {
        return createAliasedAPINamesAdapter();
      }
      @Override
      public Adapter caseAliasedAPIName(AliasedAPIName object)
      {
        return createAliasedAPINameAdapter();
      }
      @Override
      public Adapter caseDecls(Decls object)
      {
        return createDeclsAdapter();
      }
      @Override
      public Adapter caseDecl(Decl object)
      {
        return createDeclAdapter();
      }
      @Override
      public Adapter caseFnMods(FnMods object)
      {
        return createFnModsAdapter();
      }
      @Override
      public Adapter caseFnMod(FnMod object)
      {
        return createFnModAdapter();
      }
      @Override
      public Adapter caseValParam(ValParam object)
      {
        return createValParamAdapter();
      }
      @Override
      public Adapter caseParam(Param object)
      {
        return createParamAdapter();
      }
      @Override
      public Adapter caseRetType(RetType object)
      {
        return createRetTypeAdapter();
      }
      @Override
      public Adapter caseTupleType(TupleType object)
      {
        return createTupleTypeAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseFnDecl(FnDecl object)
      {
        return createFnDeclAdapter();
      }
      @Override
      public Adapter caseExpr(Expr object)
      {
        return createExprAdapter();
      }
      @Override
      public Adapter caseExprFront(ExprFront object)
      {
        return createExprFrontAdapter();
      }
      @Override
      public Adapter caseExprTail(ExprTail object)
      {
        return createExprTailAdapter();
      }
      @Override
      public Adapter caseDelimitedExpr(DelimitedExpr object)
      {
        return createDelimitedExprAdapter();
      }
      @Override
      public Adapter caseElifs(Elifs object)
      {
        return createElifsAdapter();
      }
      @Override
      public Adapter caseElif(Elif object)
      {
        return createElifAdapter();
      }
      @Override
      public Adapter caseElse(Else object)
      {
        return createElseAdapter();
      }
      @Override
      public Adapter caseGenerators(Generators object)
      {
        return createGeneratorsAdapter();
      }
      @Override
      public Adapter caseBinding(Binding object)
      {
        return createBindingAdapter();
      }
      @Override
      public Adapter caseGenClause(GenClause object)
      {
        return createGenClauseAdapter();
      }
      @Override
      public Adapter caseBlockElems(BlockElems object)
      {
        return createBlockElemsAdapter();
      }
      @Override
      public Adapter caseDo(Do object)
      {
        return createDoAdapter();
      }
      @Override
      public Adapter caseDoFront(DoFront object)
      {
        return createDoFrontAdapter();
      }
      @Override
      public Adapter caseIdOrTuple(IdOrTuple object)
      {
        return createIdOrTupleAdapter();
      }
      @Override
      public Adapter caseIsType(IsType object)
      {
        return createIsTypeAdapter();
      }
      @Override
      public Adapter caseFieldDecl(FieldDecl object)
      {
        return createFieldDeclAdapter();
      }
      @Override
      public Adapter caseNoNewlineVarWTypes(NoNewlineVarWTypes object)
      {
        return createNoNewlineVarWTypesAdapter();
      }
      @Override
      public Adapter caseNoNewlineVarWType(NoNewlineVarWType object)
      {
        return createNoNewlineVarWTypeAdapter();
      }
      @Override
      public Adapter caseInitVal(InitVal object)
      {
        return createInitValAdapter();
      }
      @Override
      public Adapter caseLiteralTuple(LiteralTuple object)
      {
        return createLiteralTupleAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseLocalVarDecl(LocalVarDecl object)
      {
        return createLocalVarDeclAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.API <em>API</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.API
   * @generated
   */
  public Adapter createAPIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Export <em>Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Export
   * @generated
   */
  public Adapter createExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.ImportedNames <em>Imported Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.ImportedNames
   * @generated
   */
  public Adapter createImportedNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.SimpleNames <em>Simple Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.SimpleNames
   * @generated
   */
  public Adapter createSimpleNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.SimpleName <em>Simple Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.SimpleName
   * @generated
   */
  public Adapter createSimpleNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.AliasedSimpleName <em>Aliased Simple Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.AliasedSimpleName
   * @generated
   */
  public Adapter createAliasedSimpleNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.AliasedAPINames <em>Aliased API Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.AliasedAPINames
   * @generated
   */
  public Adapter createAliasedAPINamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.AliasedAPIName <em>Aliased API Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.AliasedAPIName
   * @generated
   */
  public Adapter createAliasedAPINameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Decls <em>Decls</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Decls
   * @generated
   */
  public Adapter createDeclsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Decl <em>Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Decl
   * @generated
   */
  public Adapter createDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.FnMods <em>Fn Mods</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.FnMods
   * @generated
   */
  public Adapter createFnModsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.FnMod <em>Fn Mod</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.FnMod
   * @generated
   */
  public Adapter createFnModAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.ValParam <em>Val Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.ValParam
   * @generated
   */
  public Adapter createValParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Param <em>Param</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Param
   * @generated
   */
  public Adapter createParamAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.RetType <em>Ret Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.RetType
   * @generated
   */
  public Adapter createRetTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.TupleType <em>Tuple Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.TupleType
   * @generated
   */
  public Adapter createTupleTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.FnDecl <em>Fn Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.FnDecl
   * @generated
   */
  public Adapter createFnDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Expr <em>Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Expr
   * @generated
   */
  public Adapter createExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.ExprFront <em>Expr Front</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.ExprFront
   * @generated
   */
  public Adapter createExprFrontAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.ExprTail <em>Expr Tail</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.ExprTail
   * @generated
   */
  public Adapter createExprTailAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.DelimitedExpr <em>Delimited Expr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.DelimitedExpr
   * @generated
   */
  public Adapter createDelimitedExprAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Elifs <em>Elifs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Elifs
   * @generated
   */
  public Adapter createElifsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Elif <em>Elif</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Elif
   * @generated
   */
  public Adapter createElifAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Else <em>Else</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Else
   * @generated
   */
  public Adapter createElseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Generators <em>Generators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Generators
   * @generated
   */
  public Adapter createGeneratorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Binding <em>Binding</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Binding
   * @generated
   */
  public Adapter createBindingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.GenClause <em>Gen Clause</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.GenClause
   * @generated
   */
  public Adapter createGenClauseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.BlockElems <em>Block Elems</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.BlockElems
   * @generated
   */
  public Adapter createBlockElemsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Do <em>Do</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Do
   * @generated
   */
  public Adapter createDoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.DoFront <em>Do Front</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.DoFront
   * @generated
   */
  public Adapter createDoFrontAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.IdOrTuple <em>Id Or Tuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.IdOrTuple
   * @generated
   */
  public Adapter createIdOrTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.IsType <em>Is Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.IsType
   * @generated
   */
  public Adapter createIsTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.FieldDecl <em>Field Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.FieldDecl
   * @generated
   */
  public Adapter createFieldDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWTypes <em>No Newline Var WTypes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWTypes
   * @generated
   */
  public Adapter createNoNewlineVarWTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWType <em>No Newline Var WType</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWType
   * @generated
   */
  public Adapter createNoNewlineVarWTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.InitVal <em>Init Val</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.InitVal
   * @generated
   */
  public Adapter createInitValAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.LiteralTuple <em>Literal Tuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.LiteralTuple
   * @generated
   */
  public Adapter createLiteralTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.LocalVarDecl <em>Local Var Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.LocalVarDecl
   * @generated
   */
  public Adapter createLocalVarDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FortXTransAdapterFactory

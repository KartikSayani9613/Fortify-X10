/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import srf.transpiler.fortxtrans.fortXTrans.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage
 * @generated
 */
public class FortXTransAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FortXTransPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FortXTransAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FortXTransPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FortXTransSwitch<Adapter> modelSwitch =
    new FortXTransSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseAPI(API object)
      {
        return createAPIAdapter();
      }
      @Override
      public Adapter caseComponent(Component object)
      {
        return createComponentAdapter();
      }
      @Override
      public Adapter caseImport(Import object)
      {
        return createImportAdapter();
      }
      @Override
      public Adapter caseExport(Export object)
      {
        return createExportAdapter();
      }
      @Override
      public Adapter caseImportedNames(ImportedNames object)
      {
        return createImportedNamesAdapter();
      }
      @Override
      public Adapter caseSimpleNames(SimpleNames object)
      {
        return createSimpleNamesAdapter();
      }
      @Override
      public Adapter caseSimpleName(SimpleName object)
      {
        return createSimpleNameAdapter();
      }
      @Override
      public Adapter caseAliasedSimpleName(AliasedSimpleName object)
      {
        return createAliasedSimpleNameAdapter();
      }
      @Override
      public Adapter caseAliasedAPINames(AliasedAPINames object)
      {
        return createAliasedAPINamesAdapter();
      }
      @Override
      public Adapter caseAliasedAPIName(AliasedAPIName object)
      {
        return createAliasedAPINameAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.API <em>API</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.API
   * @generated
   */
  public Adapter createAPIAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Component <em>Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Component
   * @generated
   */
  public Adapter createComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Import <em>Import</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Import
   * @generated
   */
  public Adapter createImportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.Export <em>Export</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.Export
   * @generated
   */
  public Adapter createExportAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.ImportedNames <em>Imported Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.ImportedNames
   * @generated
   */
  public Adapter createImportedNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.SimpleNames <em>Simple Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.SimpleNames
   * @generated
   */
  public Adapter createSimpleNamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.SimpleName <em>Simple Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.SimpleName
   * @generated
   */
  public Adapter createSimpleNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.AliasedSimpleName <em>Aliased Simple Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.AliasedSimpleName
   * @generated
   */
  public Adapter createAliasedSimpleNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.AliasedAPINames <em>Aliased API Names</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.AliasedAPINames
   * @generated
   */
  public Adapter createAliasedAPINamesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link srf.transpiler.fortxtrans.fortXTrans.AliasedAPIName <em>Aliased API Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see srf.transpiler.fortxtrans.fortXTrans.AliasedAPIName
   * @generated
   */
  public Adapter createAliasedAPINameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FortXTransAdapterFactory

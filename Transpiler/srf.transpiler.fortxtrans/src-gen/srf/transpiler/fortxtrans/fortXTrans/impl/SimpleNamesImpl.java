/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.SimpleName;
import srf.transpiler.fortxtrans.fortXTrans.SimpleNames;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Simple Names</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.SimpleNamesImpl#getNameList <em>Name List</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.SimpleNamesImpl#getBrack <em>Brack</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SimpleNamesImpl extends MinimalEObjectImpl.Container implements SimpleNames
{
  /**
   * The cached value of the '{@link #getNameList() <em>Name List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameList()
   * @generated
   * @ordered
   */
  protected EList<SimpleName> nameList;

  /**
   * The default value of the '{@link #getBrack() <em>Brack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrack()
   * @generated
   * @ordered
   */
  protected static final String BRACK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBrack() <em>Brack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrack()
   * @generated
   * @ordered
   */
  protected String brack = BRACK_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SimpleNamesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.SIMPLE_NAMES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<SimpleName> getNameList()
  {
    if (nameList == null)
    {
      nameList = new EObjectContainmentEList<SimpleName>(SimpleName.class, this, FortXTransPackage.SIMPLE_NAMES__NAME_LIST);
    }
    return nameList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBrack()
  {
    return brack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBrack(String newBrack)
  {
    String oldBrack = brack;
    brack = newBrack;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.SIMPLE_NAMES__BRACK, oldBrack, brack));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.SIMPLE_NAMES__NAME_LIST:
        return ((InternalEList<?>)getNameList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.SIMPLE_NAMES__NAME_LIST:
        return getNameList();
      case FortXTransPackage.SIMPLE_NAMES__BRACK:
        return getBrack();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.SIMPLE_NAMES__NAME_LIST:
        getNameList().clear();
        getNameList().addAll((Collection<? extends SimpleName>)newValue);
        return;
      case FortXTransPackage.SIMPLE_NAMES__BRACK:
        setBrack((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.SIMPLE_NAMES__NAME_LIST:
        getNameList().clear();
        return;
      case FortXTransPackage.SIMPLE_NAMES__BRACK:
        setBrack(BRACK_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.SIMPLE_NAMES__NAME_LIST:
        return nameList != null && !nameList.isEmpty();
      case FortXTransPackage.SIMPLE_NAMES__BRACK:
        return BRACK_EDEFAULT == null ? brack != null : !BRACK_EDEFAULT.equals(brack);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (brack: ");
    result.append(brack);
    result.append(')');
    return result.toString();
  }

} //SimpleNamesImpl

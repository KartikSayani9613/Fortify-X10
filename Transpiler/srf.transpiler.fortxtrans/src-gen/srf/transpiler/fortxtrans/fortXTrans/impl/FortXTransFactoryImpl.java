/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import srf.transpiler.fortxtrans.fortXTrans.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FortXTransFactoryImpl extends EFactoryImpl implements FortXTransFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FortXTransFactory init()
  {
    try
    {
      FortXTransFactory theFortXTransFactory = (FortXTransFactory)EPackage.Registry.INSTANCE.getEFactory(FortXTransPackage.eNS_URI);
      if (theFortXTransFactory != null)
      {
        return theFortXTransFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FortXTransFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FortXTransFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FortXTransPackage.MODEL: return createModel();
      case FortXTransPackage.API: return createAPI();
      case FortXTransPackage.COMPONENT: return createComponent();
      case FortXTransPackage.IMPORT: return createImport();
      case FortXTransPackage.EXPORT: return createExport();
      case FortXTransPackage.IMPORTED_NAMES: return createImportedNames();
      case FortXTransPackage.SIMPLE_NAMES: return createSimpleNames();
      case FortXTransPackage.SIMPLE_NAME: return createSimpleName();
      case FortXTransPackage.ALIASED_SIMPLE_NAME: return createAliasedSimpleName();
      case FortXTransPackage.ALIASED_API_NAMES: return createAliasedAPINames();
      case FortXTransPackage.ALIASED_API_NAME: return createAliasedAPIName();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public API createAPI()
  {
    APIImpl api = new APIImpl();
    return api;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Component createComponent()
  {
    ComponentImpl component = new ComponentImpl();
    return component;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Import createImport()
  {
    ImportImpl import_ = new ImportImpl();
    return import_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Export createExport()
  {
    ExportImpl export = new ExportImpl();
    return export;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportedNames createImportedNames()
  {
    ImportedNamesImpl importedNames = new ImportedNamesImpl();
    return importedNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleNames createSimpleNames()
  {
    SimpleNamesImpl simpleNames = new SimpleNamesImpl();
    return simpleNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleName createSimpleName()
  {
    SimpleNameImpl simpleName = new SimpleNameImpl();
    return simpleName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AliasedSimpleName createAliasedSimpleName()
  {
    AliasedSimpleNameImpl aliasedSimpleName = new AliasedSimpleNameImpl();
    return aliasedSimpleName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AliasedAPINames createAliasedAPINames()
  {
    AliasedAPINamesImpl aliasedAPINames = new AliasedAPINamesImpl();
    return aliasedAPINames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AliasedAPIName createAliasedAPIName()
  {
    AliasedAPINameImpl aliasedAPIName = new AliasedAPINameImpl();
    return aliasedAPIName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FortXTransPackage getFortXTransPackage()
  {
    return (FortXTransPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FortXTransPackage getPackage()
  {
    return FortXTransPackage.eINSTANCE;
  }

} //FortXTransFactoryImpl

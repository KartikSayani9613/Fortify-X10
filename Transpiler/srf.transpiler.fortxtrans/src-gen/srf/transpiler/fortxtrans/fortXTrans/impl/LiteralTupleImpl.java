/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTup;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTuple;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedName;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedNameTuple;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Literal Tuple</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.LiteralTupleImpl#getLit <em>Lit</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.LiteralTupleImpl#getQname <em>Qname</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.LiteralTupleImpl#getQlist <em>Qlist</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LiteralTupleImpl extends ExprImpl implements LiteralTuple
{
  /**
   * The cached value of the '{@link #getLit() <em>Lit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLit()
   * @generated
   * @ordered
   */
  protected LiteralTup lit;

  /**
   * The cached value of the '{@link #getQname() <em>Qname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQname()
   * @generated
   * @ordered
   */
  protected QualifiedName qname;

  /**
   * The cached value of the '{@link #getQlist() <em>Qlist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQlist()
   * @generated
   * @ordered
   */
  protected QualifiedNameTuple qlist;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LiteralTupleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.LITERAL_TUPLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteralTup getLit()
  {
    return lit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLit(LiteralTup newLit, NotificationChain msgs)
  {
    LiteralTup oldLit = lit;
    lit = newLit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.LITERAL_TUPLE__LIT, oldLit, newLit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLit(LiteralTup newLit)
  {
    if (newLit != lit)
    {
      NotificationChain msgs = null;
      if (lit != null)
        msgs = ((InternalEObject)lit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.LITERAL_TUPLE__LIT, null, msgs);
      if (newLit != null)
        msgs = ((InternalEObject)newLit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.LITERAL_TUPLE__LIT, null, msgs);
      msgs = basicSetLit(newLit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.LITERAL_TUPLE__LIT, newLit, newLit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualifiedName getQname()
  {
    return qname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQname(QualifiedName newQname, NotificationChain msgs)
  {
    QualifiedName oldQname = qname;
    qname = newQname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.LITERAL_TUPLE__QNAME, oldQname, newQname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQname(QualifiedName newQname)
  {
    if (newQname != qname)
    {
      NotificationChain msgs = null;
      if (qname != null)
        msgs = ((InternalEObject)qname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.LITERAL_TUPLE__QNAME, null, msgs);
      if (newQname != null)
        msgs = ((InternalEObject)newQname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.LITERAL_TUPLE__QNAME, null, msgs);
      msgs = basicSetQname(newQname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.LITERAL_TUPLE__QNAME, newQname, newQname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualifiedNameTuple getQlist()
  {
    return qlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQlist(QualifiedNameTuple newQlist, NotificationChain msgs)
  {
    QualifiedNameTuple oldQlist = qlist;
    qlist = newQlist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.LITERAL_TUPLE__QLIST, oldQlist, newQlist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQlist(QualifiedNameTuple newQlist)
  {
    if (newQlist != qlist)
    {
      NotificationChain msgs = null;
      if (qlist != null)
        msgs = ((InternalEObject)qlist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.LITERAL_TUPLE__QLIST, null, msgs);
      if (newQlist != null)
        msgs = ((InternalEObject)newQlist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.LITERAL_TUPLE__QLIST, null, msgs);
      msgs = basicSetQlist(newQlist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.LITERAL_TUPLE__QLIST, newQlist, newQlist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.LITERAL_TUPLE__LIT:
        return basicSetLit(null, msgs);
      case FortXTransPackage.LITERAL_TUPLE__QNAME:
        return basicSetQname(null, msgs);
      case FortXTransPackage.LITERAL_TUPLE__QLIST:
        return basicSetQlist(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.LITERAL_TUPLE__LIT:
        return getLit();
      case FortXTransPackage.LITERAL_TUPLE__QNAME:
        return getQname();
      case FortXTransPackage.LITERAL_TUPLE__QLIST:
        return getQlist();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.LITERAL_TUPLE__LIT:
        setLit((LiteralTup)newValue);
        return;
      case FortXTransPackage.LITERAL_TUPLE__QNAME:
        setQname((QualifiedName)newValue);
        return;
      case FortXTransPackage.LITERAL_TUPLE__QLIST:
        setQlist((QualifiedNameTuple)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.LITERAL_TUPLE__LIT:
        setLit((LiteralTup)null);
        return;
      case FortXTransPackage.LITERAL_TUPLE__QNAME:
        setQname((QualifiedName)null);
        return;
      case FortXTransPackage.LITERAL_TUPLE__QLIST:
        setQlist((QualifiedNameTuple)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.LITERAL_TUPLE__LIT:
        return lit != null;
      case FortXTransPackage.LITERAL_TUPLE__QNAME:
        return qname != null;
      case FortXTransPackage.LITERAL_TUPLE__QLIST:
        return qlist != null;
    }
    return super.eIsSet(featureID);
  }

} //LiteralTupleImpl

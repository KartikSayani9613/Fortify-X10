/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import srf.transpiler.fortxtrans.fortXTrans.Export;
import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Export</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ExportImpl#getExp <em>Exp</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ExportImpl#getExportedName <em>Exported Name</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ExportImpl#getBrack <em>Brack</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExportImpl extends MinimalEObjectImpl.Container implements Export
{
  /**
   * The default value of the '{@link #getExp() <em>Exp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected static final String EXP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExp() <em>Exp</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExp()
   * @generated
   * @ordered
   */
  protected String exp = EXP_EDEFAULT;

  /**
   * The cached value of the '{@link #getExportedName() <em>Exported Name</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExportedName()
   * @generated
   * @ordered
   */
  protected EList<String> exportedName;

  /**
   * The default value of the '{@link #getBrack() <em>Brack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrack()
   * @generated
   * @ordered
   */
  protected static final String BRACK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBrack() <em>Brack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrack()
   * @generated
   * @ordered
   */
  protected String brack = BRACK_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExportImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.EXPORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getExp()
  {
    return exp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExp(String newExp)
  {
    String oldExp = exp;
    exp = newExp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.EXPORT__EXP, oldExp, exp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getExportedName()
  {
    if (exportedName == null)
    {
      exportedName = new EDataTypeEList<String>(String.class, this, FortXTransPackage.EXPORT__EXPORTED_NAME);
    }
    return exportedName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBrack()
  {
    return brack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBrack(String newBrack)
  {
    String oldBrack = brack;
    brack = newBrack;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.EXPORT__BRACK, oldBrack, brack));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.EXPORT__EXP:
        return getExp();
      case FortXTransPackage.EXPORT__EXPORTED_NAME:
        return getExportedName();
      case FortXTransPackage.EXPORT__BRACK:
        return getBrack();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.EXPORT__EXP:
        setExp((String)newValue);
        return;
      case FortXTransPackage.EXPORT__EXPORTED_NAME:
        getExportedName().clear();
        getExportedName().addAll((Collection<? extends String>)newValue);
        return;
      case FortXTransPackage.EXPORT__BRACK:
        setBrack((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.EXPORT__EXP:
        setExp(EXP_EDEFAULT);
        return;
      case FortXTransPackage.EXPORT__EXPORTED_NAME:
        getExportedName().clear();
        return;
      case FortXTransPackage.EXPORT__BRACK:
        setBrack(BRACK_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.EXPORT__EXP:
        return EXP_EDEFAULT == null ? exp != null : !EXP_EDEFAULT.equals(exp);
      case FortXTransPackage.EXPORT__EXPORTED_NAME:
        return exportedName != null && !exportedName.isEmpty();
      case FortXTransPackage.EXPORT__BRACK:
        return BRACK_EDEFAULT == null ? brack != null : !BRACK_EDEFAULT.equals(brack);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (exp: ");
    result.append(exp);
    result.append(", exportedName: ");
    result.append(exportedName);
    result.append(", brack: ");
    result.append(brack);
    result.append(')');
    return result.toString();
  }

} //ExportImpl

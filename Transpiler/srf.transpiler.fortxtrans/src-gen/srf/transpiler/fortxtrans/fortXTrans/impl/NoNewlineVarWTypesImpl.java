/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWType;
import srf.transpiler.fortxtrans.fortXTrans.NoNewlineVarWTypes;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>No Newline Var WTypes</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.NoNewlineVarWTypesImpl#getSingle <em>Single</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.NoNewlineVarWTypesImpl#getMultiple <em>Multiple</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NoNewlineVarWTypesImpl extends MinimalEObjectImpl.Container implements NoNewlineVarWTypes
{
  /**
   * The cached value of the '{@link #getSingle() <em>Single</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSingle()
   * @generated
   * @ordered
   */
  protected NoNewlineVarWType single;

  /**
   * The cached value of the '{@link #getMultiple() <em>Multiple</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMultiple()
   * @generated
   * @ordered
   */
  protected EList<NoNewlineVarWType> multiple;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NoNewlineVarWTypesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.NO_NEWLINE_VAR_WTYPES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NoNewlineVarWType getSingle()
  {
    return single;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSingle(NoNewlineVarWType newSingle, NotificationChain msgs)
  {
    NoNewlineVarWType oldSingle = single;
    single = newSingle;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE, oldSingle, newSingle);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSingle(NoNewlineVarWType newSingle)
  {
    if (newSingle != single)
    {
      NotificationChain msgs = null;
      if (single != null)
        msgs = ((InternalEObject)single).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE, null, msgs);
      if (newSingle != null)
        msgs = ((InternalEObject)newSingle).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE, null, msgs);
      msgs = basicSetSingle(newSingle, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE, newSingle, newSingle));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<NoNewlineVarWType> getMultiple()
  {
    if (multiple == null)
    {
      multiple = new EObjectContainmentEList<NoNewlineVarWType>(NoNewlineVarWType.class, this, FortXTransPackage.NO_NEWLINE_VAR_WTYPES__MULTIPLE);
    }
    return multiple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE:
        return basicSetSingle(null, msgs);
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__MULTIPLE:
        return ((InternalEList<?>)getMultiple()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE:
        return getSingle();
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__MULTIPLE:
        return getMultiple();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE:
        setSingle((NoNewlineVarWType)newValue);
        return;
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__MULTIPLE:
        getMultiple().clear();
        getMultiple().addAll((Collection<? extends NoNewlineVarWType>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE:
        setSingle((NoNewlineVarWType)null);
        return;
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__MULTIPLE:
        getMultiple().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__SINGLE:
        return single != null;
      case FortXTransPackage.NO_NEWLINE_VAR_WTYPES__MULTIPLE:
        return multiple != null && !multiple.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //NoNewlineVarWTypesImpl

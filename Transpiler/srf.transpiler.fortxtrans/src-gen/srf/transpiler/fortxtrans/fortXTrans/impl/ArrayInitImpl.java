/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import srf.transpiler.fortxtrans.fortXTrans.ArrayInit;
import srf.transpiler.fortxtrans.fortXTrans.Expr;
import srf.transpiler.fortxtrans.fortXTrans.ExprList;
import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.LiteralTuple;
import srf.transpiler.fortxtrans.fortXTrans.Qualified;
import srf.transpiler.fortxtrans.fortXTrans.SimpleName;
import srf.transpiler.fortxtrans.fortXTrans.Stmnts;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Array Init</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ArrayInitImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ArrayInitImpl#getType <em>Type</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ArrayInitImpl#getSizes <em>Sizes</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ArrayInitImpl#getInd <em>Ind</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ArrayInitImpl#getFiller <em>Filler</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ArrayInitImpl#getLit <em>Lit</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ArrayInitImpl extends ExprImpl implements ArrayInit
{
  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Expr left;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected SimpleName type;

  /**
   * The cached value of the '{@link #getSizes() <em>Sizes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSizes()
   * @generated
   * @ordered
   */
  protected ExprList sizes;

  /**
   * The cached value of the '{@link #getInd() <em>Ind</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInd()
   * @generated
   * @ordered
   */
  protected Qualified ind;

  /**
   * The cached value of the '{@link #getFiller() <em>Filler</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFiller()
   * @generated
   * @ordered
   */
  protected Stmnts filler;

  /**
   * The cached value of the '{@link #getLit() <em>Lit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLit()
   * @generated
   * @ordered
   */
  protected LiteralTuple lit;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ArrayInitImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.ARRAY_INIT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expr getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(Expr newLeft, NotificationChain msgs)
  {
    Expr oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeft(Expr newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleName getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(SimpleName newType, NotificationChain msgs)
  {
    SimpleName oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(SimpleName newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExprList getSizes()
  {
    return sizes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSizes(ExprList newSizes, NotificationChain msgs)
  {
    ExprList oldSizes = sizes;
    sizes = newSizes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__SIZES, oldSizes, newSizes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSizes(ExprList newSizes)
  {
    if (newSizes != sizes)
    {
      NotificationChain msgs = null;
      if (sizes != null)
        msgs = ((InternalEObject)sizes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__SIZES, null, msgs);
      if (newSizes != null)
        msgs = ((InternalEObject)newSizes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__SIZES, null, msgs);
      msgs = basicSetSizes(newSizes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__SIZES, newSizes, newSizes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Qualified getInd()
  {
    return ind;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInd(Qualified newInd, NotificationChain msgs)
  {
    Qualified oldInd = ind;
    ind = newInd;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__IND, oldInd, newInd);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setInd(Qualified newInd)
  {
    if (newInd != ind)
    {
      NotificationChain msgs = null;
      if (ind != null)
        msgs = ((InternalEObject)ind).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__IND, null, msgs);
      if (newInd != null)
        msgs = ((InternalEObject)newInd).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__IND, null, msgs);
      msgs = basicSetInd(newInd, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__IND, newInd, newInd));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Stmnts getFiller()
  {
    return filler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFiller(Stmnts newFiller, NotificationChain msgs)
  {
    Stmnts oldFiller = filler;
    filler = newFiller;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__FILLER, oldFiller, newFiller);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFiller(Stmnts newFiller)
  {
    if (newFiller != filler)
    {
      NotificationChain msgs = null;
      if (filler != null)
        msgs = ((InternalEObject)filler).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__FILLER, null, msgs);
      if (newFiller != null)
        msgs = ((InternalEObject)newFiller).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__FILLER, null, msgs);
      msgs = basicSetFiller(newFiller, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__FILLER, newFiller, newFiller));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LiteralTuple getLit()
  {
    return lit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLit(LiteralTuple newLit, NotificationChain msgs)
  {
    LiteralTuple oldLit = lit;
    lit = newLit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__LIT, oldLit, newLit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLit(LiteralTuple newLit)
  {
    if (newLit != lit)
    {
      NotificationChain msgs = null;
      if (lit != null)
        msgs = ((InternalEObject)lit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__LIT, null, msgs);
      if (newLit != null)
        msgs = ((InternalEObject)newLit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.ARRAY_INIT__LIT, null, msgs);
      msgs = basicSetLit(newLit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.ARRAY_INIT__LIT, newLit, newLit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.ARRAY_INIT__LEFT:
        return basicSetLeft(null, msgs);
      case FortXTransPackage.ARRAY_INIT__TYPE:
        return basicSetType(null, msgs);
      case FortXTransPackage.ARRAY_INIT__SIZES:
        return basicSetSizes(null, msgs);
      case FortXTransPackage.ARRAY_INIT__IND:
        return basicSetInd(null, msgs);
      case FortXTransPackage.ARRAY_INIT__FILLER:
        return basicSetFiller(null, msgs);
      case FortXTransPackage.ARRAY_INIT__LIT:
        return basicSetLit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.ARRAY_INIT__LEFT:
        return getLeft();
      case FortXTransPackage.ARRAY_INIT__TYPE:
        return getType();
      case FortXTransPackage.ARRAY_INIT__SIZES:
        return getSizes();
      case FortXTransPackage.ARRAY_INIT__IND:
        return getInd();
      case FortXTransPackage.ARRAY_INIT__FILLER:
        return getFiller();
      case FortXTransPackage.ARRAY_INIT__LIT:
        return getLit();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.ARRAY_INIT__LEFT:
        setLeft((Expr)newValue);
        return;
      case FortXTransPackage.ARRAY_INIT__TYPE:
        setType((SimpleName)newValue);
        return;
      case FortXTransPackage.ARRAY_INIT__SIZES:
        setSizes((ExprList)newValue);
        return;
      case FortXTransPackage.ARRAY_INIT__IND:
        setInd((Qualified)newValue);
        return;
      case FortXTransPackage.ARRAY_INIT__FILLER:
        setFiller((Stmnts)newValue);
        return;
      case FortXTransPackage.ARRAY_INIT__LIT:
        setLit((LiteralTuple)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.ARRAY_INIT__LEFT:
        setLeft((Expr)null);
        return;
      case FortXTransPackage.ARRAY_INIT__TYPE:
        setType((SimpleName)null);
        return;
      case FortXTransPackage.ARRAY_INIT__SIZES:
        setSizes((ExprList)null);
        return;
      case FortXTransPackage.ARRAY_INIT__IND:
        setInd((Qualified)null);
        return;
      case FortXTransPackage.ARRAY_INIT__FILLER:
        setFiller((Stmnts)null);
        return;
      case FortXTransPackage.ARRAY_INIT__LIT:
        setLit((LiteralTuple)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.ARRAY_INIT__LEFT:
        return left != null;
      case FortXTransPackage.ARRAY_INIT__TYPE:
        return type != null;
      case FortXTransPackage.ARRAY_INIT__SIZES:
        return sizes != null;
      case FortXTransPackage.ARRAY_INIT__IND:
        return ind != null;
      case FortXTransPackage.ARRAY_INIT__FILLER:
        return filler != null;
      case FortXTransPackage.ARRAY_INIT__LIT:
        return lit != null;
    }
    return super.eIsSet(featureID);
  }

} //ArrayInitImpl

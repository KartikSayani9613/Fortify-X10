/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import srf.transpiler.fortxtrans.fortXTrans.AliasedSimpleName;
import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.ImportedNames;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedName;
import srf.transpiler.fortxtrans.fortXTrans.SimpleNames;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Imported Names</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#getImpname <em>Impname</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#isExcept <em>Except</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#getSimp <em>Simp</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#getSimpList <em>Simp List</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#isComma <em>Comma</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#isDots <em>Dots</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportedNamesImpl#getAsname <em>Asname</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImportedNamesImpl extends MinimalEObjectImpl.Container implements ImportedNames
{
  /**
   * The cached value of the '{@link #getImpname() <em>Impname</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImpname()
   * @generated
   * @ordered
   */
  protected QualifiedName impname;

  /**
   * The default value of the '{@link #isExcept() <em>Except</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExcept()
   * @generated
   * @ordered
   */
  protected static final boolean EXCEPT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isExcept() <em>Except</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isExcept()
   * @generated
   * @ordered
   */
  protected boolean except = EXCEPT_EDEFAULT;

  /**
   * The cached value of the '{@link #getSimp() <em>Simp</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimp()
   * @generated
   * @ordered
   */
  protected SimpleNames simp;

  /**
   * The cached value of the '{@link #getSimpList() <em>Simp List</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSimpList()
   * @generated
   * @ordered
   */
  protected EList<AliasedSimpleName> simpList;

  /**
   * The default value of the '{@link #isComma() <em>Comma</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComma()
   * @generated
   * @ordered
   */
  protected static final boolean COMMA_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isComma() <em>Comma</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isComma()
   * @generated
   * @ordered
   */
  protected boolean comma = COMMA_EDEFAULT;

  /**
   * The default value of the '{@link #isDots() <em>Dots</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDots()
   * @generated
   * @ordered
   */
  protected static final boolean DOTS_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDots() <em>Dots</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDots()
   * @generated
   * @ordered
   */
  protected boolean dots = DOTS_EDEFAULT;

  /**
   * The default value of the '{@link #getAsname() <em>Asname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsname()
   * @generated
   * @ordered
   */
  protected static final String ASNAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAsname() <em>Asname</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAsname()
   * @generated
   * @ordered
   */
  protected String asname = ASNAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImportedNamesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.IMPORTED_NAMES;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualifiedName getImpname()
  {
    return impname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImpname(QualifiedName newImpname, NotificationChain msgs)
  {
    QualifiedName oldImpname = impname;
    impname = newImpname;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__IMPNAME, oldImpname, newImpname);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImpname(QualifiedName newImpname)
  {
    if (newImpname != impname)
    {
      NotificationChain msgs = null;
      if (impname != null)
        msgs = ((InternalEObject)impname).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORTED_NAMES__IMPNAME, null, msgs);
      if (newImpname != null)
        msgs = ((InternalEObject)newImpname).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORTED_NAMES__IMPNAME, null, msgs);
      msgs = basicSetImpname(newImpname, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__IMPNAME, newImpname, newImpname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isExcept()
  {
    return except;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setExcept(boolean newExcept)
  {
    boolean oldExcept = except;
    except = newExcept;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__EXCEPT, oldExcept, except));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpleNames getSimp()
  {
    return simp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSimp(SimpleNames newSimp, NotificationChain msgs)
  {
    SimpleNames oldSimp = simp;
    simp = newSimp;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__SIMP, oldSimp, newSimp);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSimp(SimpleNames newSimp)
  {
    if (newSimp != simp)
    {
      NotificationChain msgs = null;
      if (simp != null)
        msgs = ((InternalEObject)simp).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORTED_NAMES__SIMP, null, msgs);
      if (newSimp != null)
        msgs = ((InternalEObject)newSimp).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORTED_NAMES__SIMP, null, msgs);
      msgs = basicSetSimp(newSimp, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__SIMP, newSimp, newSimp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AliasedSimpleName> getSimpList()
  {
    if (simpList == null)
    {
      simpList = new EObjectContainmentEList<AliasedSimpleName>(AliasedSimpleName.class, this, FortXTransPackage.IMPORTED_NAMES__SIMP_LIST);
    }
    return simpList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isComma()
  {
    return comma;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setComma(boolean newComma)
  {
    boolean oldComma = comma;
    comma = newComma;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__COMMA, oldComma, comma));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isDots()
  {
    return dots;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDots(boolean newDots)
  {
    boolean oldDots = dots;
    dots = newDots;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__DOTS, oldDots, dots));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAsname()
  {
    return asname;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAsname(String newAsname)
  {
    String oldAsname = asname;
    asname = newAsname;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORTED_NAMES__ASNAME, oldAsname, asname));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORTED_NAMES__IMPNAME:
        return basicSetImpname(null, msgs);
      case FortXTransPackage.IMPORTED_NAMES__SIMP:
        return basicSetSimp(null, msgs);
      case FortXTransPackage.IMPORTED_NAMES__SIMP_LIST:
        return ((InternalEList<?>)getSimpList()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORTED_NAMES__IMPNAME:
        return getImpname();
      case FortXTransPackage.IMPORTED_NAMES__EXCEPT:
        return isExcept();
      case FortXTransPackage.IMPORTED_NAMES__SIMP:
        return getSimp();
      case FortXTransPackage.IMPORTED_NAMES__SIMP_LIST:
        return getSimpList();
      case FortXTransPackage.IMPORTED_NAMES__COMMA:
        return isComma();
      case FortXTransPackage.IMPORTED_NAMES__DOTS:
        return isDots();
      case FortXTransPackage.IMPORTED_NAMES__ASNAME:
        return getAsname();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORTED_NAMES__IMPNAME:
        setImpname((QualifiedName)newValue);
        return;
      case FortXTransPackage.IMPORTED_NAMES__EXCEPT:
        setExcept((Boolean)newValue);
        return;
      case FortXTransPackage.IMPORTED_NAMES__SIMP:
        setSimp((SimpleNames)newValue);
        return;
      case FortXTransPackage.IMPORTED_NAMES__SIMP_LIST:
        getSimpList().clear();
        getSimpList().addAll((Collection<? extends AliasedSimpleName>)newValue);
        return;
      case FortXTransPackage.IMPORTED_NAMES__COMMA:
        setComma((Boolean)newValue);
        return;
      case FortXTransPackage.IMPORTED_NAMES__DOTS:
        setDots((Boolean)newValue);
        return;
      case FortXTransPackage.IMPORTED_NAMES__ASNAME:
        setAsname((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORTED_NAMES__IMPNAME:
        setImpname((QualifiedName)null);
        return;
      case FortXTransPackage.IMPORTED_NAMES__EXCEPT:
        setExcept(EXCEPT_EDEFAULT);
        return;
      case FortXTransPackage.IMPORTED_NAMES__SIMP:
        setSimp((SimpleNames)null);
        return;
      case FortXTransPackage.IMPORTED_NAMES__SIMP_LIST:
        getSimpList().clear();
        return;
      case FortXTransPackage.IMPORTED_NAMES__COMMA:
        setComma(COMMA_EDEFAULT);
        return;
      case FortXTransPackage.IMPORTED_NAMES__DOTS:
        setDots(DOTS_EDEFAULT);
        return;
      case FortXTransPackage.IMPORTED_NAMES__ASNAME:
        setAsname(ASNAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORTED_NAMES__IMPNAME:
        return impname != null;
      case FortXTransPackage.IMPORTED_NAMES__EXCEPT:
        return except != EXCEPT_EDEFAULT;
      case FortXTransPackage.IMPORTED_NAMES__SIMP:
        return simp != null;
      case FortXTransPackage.IMPORTED_NAMES__SIMP_LIST:
        return simpList != null && !simpList.isEmpty();
      case FortXTransPackage.IMPORTED_NAMES__COMMA:
        return comma != COMMA_EDEFAULT;
      case FortXTransPackage.IMPORTED_NAMES__DOTS:
        return dots != DOTS_EDEFAULT;
      case FortXTransPackage.IMPORTED_NAMES__ASNAME:
        return ASNAME_EDEFAULT == null ? asname != null : !ASNAME_EDEFAULT.equals(asname);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (except: ");
    result.append(except);
    result.append(", comma: ");
    result.append(comma);
    result.append(", dots: ");
    result.append(dots);
    result.append(", asname: ");
    result.append(asname);
    result.append(')');
    return result.toString();
  }

} //ImportedNamesImpl

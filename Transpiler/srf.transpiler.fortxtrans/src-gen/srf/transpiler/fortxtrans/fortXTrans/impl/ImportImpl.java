/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import srf.transpiler.fortxtrans.fortXTrans.AliasedAPINames;
import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.Import;
import srf.transpiler.fortxtrans.fortXTrans.ImportedNames;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Import</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportImpl#getImps <em>Imps</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportImpl#getImportedNames <em>Imported Names</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportImpl#getApi <em>Api</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ImportImpl#getAliasedimportedNames <em>Aliasedimported Names</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ImportImpl extends MinimalEObjectImpl.Container implements Import
{
  /**
   * The default value of the '{@link #getImps() <em>Imps</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImps()
   * @generated
   * @ordered
   */
  protected static final String IMPS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getImps() <em>Imps</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImps()
   * @generated
   * @ordered
   */
  protected String imps = IMPS_EDEFAULT;

  /**
   * The cached value of the '{@link #getImportedNames() <em>Imported Names</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImportedNames()
   * @generated
   * @ordered
   */
  protected ImportedNames importedNames;

  /**
   * The default value of the '{@link #getApi() <em>Api</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApi()
   * @generated
   * @ordered
   */
  protected static final String API_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getApi() <em>Api</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getApi()
   * @generated
   * @ordered
   */
  protected String api = API_EDEFAULT;

  /**
   * The cached value of the '{@link #getAliasedimportedNames() <em>Aliasedimported Names</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAliasedimportedNames()
   * @generated
   * @ordered
   */
  protected AliasedAPINames aliasedimportedNames;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImportImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.IMPORT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getImps()
  {
    return imps;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImps(String newImps)
  {
    String oldImps = imps;
    imps = newImps;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORT__IMPS, oldImps, imps));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ImportedNames getImportedNames()
  {
    return importedNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetImportedNames(ImportedNames newImportedNames, NotificationChain msgs)
  {
    ImportedNames oldImportedNames = importedNames;
    importedNames = newImportedNames;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORT__IMPORTED_NAMES, oldImportedNames, newImportedNames);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setImportedNames(ImportedNames newImportedNames)
  {
    if (newImportedNames != importedNames)
    {
      NotificationChain msgs = null;
      if (importedNames != null)
        msgs = ((InternalEObject)importedNames).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORT__IMPORTED_NAMES, null, msgs);
      if (newImportedNames != null)
        msgs = ((InternalEObject)newImportedNames).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORT__IMPORTED_NAMES, null, msgs);
      msgs = basicSetImportedNames(newImportedNames, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORT__IMPORTED_NAMES, newImportedNames, newImportedNames));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getApi()
  {
    return api;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setApi(String newApi)
  {
    String oldApi = api;
    api = newApi;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORT__API, oldApi, api));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AliasedAPINames getAliasedimportedNames()
  {
    return aliasedimportedNames;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAliasedimportedNames(AliasedAPINames newAliasedimportedNames, NotificationChain msgs)
  {
    AliasedAPINames oldAliasedimportedNames = aliasedimportedNames;
    aliasedimportedNames = newAliasedimportedNames;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES, oldAliasedimportedNames, newAliasedimportedNames);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAliasedimportedNames(AliasedAPINames newAliasedimportedNames)
  {
    if (newAliasedimportedNames != aliasedimportedNames)
    {
      NotificationChain msgs = null;
      if (aliasedimportedNames != null)
        msgs = ((InternalEObject)aliasedimportedNames).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES, null, msgs);
      if (newAliasedimportedNames != null)
        msgs = ((InternalEObject)newAliasedimportedNames).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES, null, msgs);
      msgs = basicSetAliasedimportedNames(newAliasedimportedNames, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES, newAliasedimportedNames, newAliasedimportedNames));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORT__IMPORTED_NAMES:
        return basicSetImportedNames(null, msgs);
      case FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES:
        return basicSetAliasedimportedNames(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORT__IMPS:
        return getImps();
      case FortXTransPackage.IMPORT__IMPORTED_NAMES:
        return getImportedNames();
      case FortXTransPackage.IMPORT__API:
        return getApi();
      case FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES:
        return getAliasedimportedNames();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORT__IMPS:
        setImps((String)newValue);
        return;
      case FortXTransPackage.IMPORT__IMPORTED_NAMES:
        setImportedNames((ImportedNames)newValue);
        return;
      case FortXTransPackage.IMPORT__API:
        setApi((String)newValue);
        return;
      case FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES:
        setAliasedimportedNames((AliasedAPINames)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORT__IMPS:
        setImps(IMPS_EDEFAULT);
        return;
      case FortXTransPackage.IMPORT__IMPORTED_NAMES:
        setImportedNames((ImportedNames)null);
        return;
      case FortXTransPackage.IMPORT__API:
        setApi(API_EDEFAULT);
        return;
      case FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES:
        setAliasedimportedNames((AliasedAPINames)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.IMPORT__IMPS:
        return IMPS_EDEFAULT == null ? imps != null : !IMPS_EDEFAULT.equals(imps);
      case FortXTransPackage.IMPORT__IMPORTED_NAMES:
        return importedNames != null;
      case FortXTransPackage.IMPORT__API:
        return API_EDEFAULT == null ? api != null : !API_EDEFAULT.equals(api);
      case FortXTransPackage.IMPORT__ALIASEDIMPORTED_NAMES:
        return aliasedimportedNames != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (imps: ");
    result.append(imps);
    result.append(", api: ");
    result.append(api);
    result.append(')');
    return result.toString();
  }

} //ImportImpl

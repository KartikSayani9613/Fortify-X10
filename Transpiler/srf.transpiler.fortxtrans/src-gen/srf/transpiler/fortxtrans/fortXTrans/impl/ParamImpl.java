/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import srf.transpiler.fortxtrans.fortXTrans.BindId;
import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.IsType;
import srf.transpiler.fortxtrans.fortXTrans.Param;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Param</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ParamImpl#getBId <em>BId</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ParamImpl#getIstype <em>Istype</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ParamImpl extends MinimalEObjectImpl.Container implements Param
{
  /**
   * The cached value of the '{@link #getBId() <em>BId</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBId()
   * @generated
   * @ordered
   */
  protected BindId bId;

  /**
   * The cached value of the '{@link #getIstype() <em>Istype</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIstype()
   * @generated
   * @ordered
   */
  protected IsType istype;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParamImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.PARAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BindId getBId()
  {
    return bId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBId(BindId newBId, NotificationChain msgs)
  {
    BindId oldBId = bId;
    bId = newBId;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.PARAM__BID, oldBId, newBId);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBId(BindId newBId)
  {
    if (newBId != bId)
    {
      NotificationChain msgs = null;
      if (bId != null)
        msgs = ((InternalEObject)bId).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.PARAM__BID, null, msgs);
      if (newBId != null)
        msgs = ((InternalEObject)newBId).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.PARAM__BID, null, msgs);
      msgs = basicSetBId(newBId, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.PARAM__BID, newBId, newBId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IsType getIstype()
  {
    return istype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIstype(IsType newIstype, NotificationChain msgs)
  {
    IsType oldIstype = istype;
    istype = newIstype;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.PARAM__ISTYPE, oldIstype, newIstype);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setIstype(IsType newIstype)
  {
    if (newIstype != istype)
    {
      NotificationChain msgs = null;
      if (istype != null)
        msgs = ((InternalEObject)istype).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.PARAM__ISTYPE, null, msgs);
      if (newIstype != null)
        msgs = ((InternalEObject)newIstype).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.PARAM__ISTYPE, null, msgs);
      msgs = basicSetIstype(newIstype, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.PARAM__ISTYPE, newIstype, newIstype));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.PARAM__BID:
        return basicSetBId(null, msgs);
      case FortXTransPackage.PARAM__ISTYPE:
        return basicSetIstype(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.PARAM__BID:
        return getBId();
      case FortXTransPackage.PARAM__ISTYPE:
        return getIstype();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.PARAM__BID:
        setBId((BindId)newValue);
        return;
      case FortXTransPackage.PARAM__ISTYPE:
        setIstype((IsType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.PARAM__BID:
        setBId((BindId)null);
        return;
      case FortXTransPackage.PARAM__ISTYPE:
        setIstype((IsType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.PARAM__BID:
        return bId != null;
      case FortXTransPackage.PARAM__ISTYPE:
        return istype != null;
    }
    return super.eIsSet(featureID);
  }

} //ParamImpl

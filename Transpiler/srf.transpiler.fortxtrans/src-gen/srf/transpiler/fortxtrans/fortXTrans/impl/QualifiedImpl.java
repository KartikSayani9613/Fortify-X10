/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.Qualified;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedName;
import srf.transpiler.fortxtrans.fortXTrans.QualifiedNameTuple;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Qualified</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.QualifiedImpl#getQ <em>Q</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.QualifiedImpl#getQlist <em>Qlist</em>}</li>
 * </ul>
 *
 * @generated
 */
public class QualifiedImpl extends ExprImpl implements Qualified
{
  /**
   * The cached value of the '{@link #getQ() <em>Q</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQ()
   * @generated
   * @ordered
   */
  protected QualifiedName q;

  /**
   * The cached value of the '{@link #getQlist() <em>Qlist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQlist()
   * @generated
   * @ordered
   */
  protected QualifiedNameTuple qlist;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected QualifiedImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.QUALIFIED;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualifiedName getQ()
  {
    return q;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQ(QualifiedName newQ, NotificationChain msgs)
  {
    QualifiedName oldQ = q;
    q = newQ;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.QUALIFIED__Q, oldQ, newQ);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQ(QualifiedName newQ)
  {
    if (newQ != q)
    {
      NotificationChain msgs = null;
      if (q != null)
        msgs = ((InternalEObject)q).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.QUALIFIED__Q, null, msgs);
      if (newQ != null)
        msgs = ((InternalEObject)newQ).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.QUALIFIED__Q, null, msgs);
      msgs = basicSetQ(newQ, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.QUALIFIED__Q, newQ, newQ));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public QualifiedNameTuple getQlist()
  {
    return qlist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetQlist(QualifiedNameTuple newQlist, NotificationChain msgs)
  {
    QualifiedNameTuple oldQlist = qlist;
    qlist = newQlist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, FortXTransPackage.QUALIFIED__QLIST, oldQlist, newQlist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setQlist(QualifiedNameTuple newQlist)
  {
    if (newQlist != qlist)
    {
      NotificationChain msgs = null;
      if (qlist != null)
        msgs = ((InternalEObject)qlist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.QUALIFIED__QLIST, null, msgs);
      if (newQlist != null)
        msgs = ((InternalEObject)newQlist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - FortXTransPackage.QUALIFIED__QLIST, null, msgs);
      msgs = basicSetQlist(newQlist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.QUALIFIED__QLIST, newQlist, newQlist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.QUALIFIED__Q:
        return basicSetQ(null, msgs);
      case FortXTransPackage.QUALIFIED__QLIST:
        return basicSetQlist(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.QUALIFIED__Q:
        return getQ();
      case FortXTransPackage.QUALIFIED__QLIST:
        return getQlist();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.QUALIFIED__Q:
        setQ((QualifiedName)newValue);
        return;
      case FortXTransPackage.QUALIFIED__QLIST:
        setQlist((QualifiedNameTuple)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.QUALIFIED__Q:
        setQ((QualifiedName)null);
        return;
      case FortXTransPackage.QUALIFIED__QLIST:
        setQlist((QualifiedNameTuple)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.QUALIFIED__Q:
        return q != null;
      case FortXTransPackage.QUALIFIED__QLIST:
        return qlist != null;
    }
    return super.eIsSet(featureID);
  }

} //QualifiedImpl

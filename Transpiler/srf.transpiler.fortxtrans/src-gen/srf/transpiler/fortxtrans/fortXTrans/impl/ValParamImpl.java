/**
 * generated by Xtext 2.13.0-SNAPSHOT
 */
package srf.transpiler.fortxtrans.fortXTrans.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import srf.transpiler.fortxtrans.fortXTrans.FortXTransPackage;
import srf.transpiler.fortxtrans.fortXTrans.Param;
import srf.transpiler.fortxtrans.fortXTrans.ValParam;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Val Param</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ValParamImpl#getBindID <em>Bind ID</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ValParamImpl#getBrack <em>Brack</em>}</li>
 *   <li>{@link srf.transpiler.fortxtrans.fortXTrans.impl.ValParamImpl#getParams <em>Params</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValParamImpl extends MinimalEObjectImpl.Container implements ValParam
{
  /**
   * The default value of the '{@link #getBindID() <em>Bind ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindID()
   * @generated
   * @ordered
   */
  protected static final String BIND_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBindID() <em>Bind ID</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBindID()
   * @generated
   * @ordered
   */
  protected String bindID = BIND_ID_EDEFAULT;

  /**
   * The default value of the '{@link #getBrack() <em>Brack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrack()
   * @generated
   * @ordered
   */
  protected static final String BRACK_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getBrack() <em>Brack</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBrack()
   * @generated
   * @ordered
   */
  protected String brack = BRACK_EDEFAULT;

  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected EList<Param> params;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ValParamImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return FortXTransPackage.Literals.VAL_PARAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBindID()
  {
    return bindID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBindID(String newBindID)
  {
    String oldBindID = bindID;
    bindID = newBindID;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.VAL_PARAM__BIND_ID, oldBindID, bindID));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getBrack()
  {
    return brack;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBrack(String newBrack)
  {
    String oldBrack = brack;
    brack = newBrack;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, FortXTransPackage.VAL_PARAM__BRACK, oldBrack, brack));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Param> getParams()
  {
    if (params == null)
    {
      params = new EObjectContainmentEList<Param>(Param.class, this, FortXTransPackage.VAL_PARAM__PARAMS);
    }
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case FortXTransPackage.VAL_PARAM__PARAMS:
        return ((InternalEList<?>)getParams()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case FortXTransPackage.VAL_PARAM__BIND_ID:
        return getBindID();
      case FortXTransPackage.VAL_PARAM__BRACK:
        return getBrack();
      case FortXTransPackage.VAL_PARAM__PARAMS:
        return getParams();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case FortXTransPackage.VAL_PARAM__BIND_ID:
        setBindID((String)newValue);
        return;
      case FortXTransPackage.VAL_PARAM__BRACK:
        setBrack((String)newValue);
        return;
      case FortXTransPackage.VAL_PARAM__PARAMS:
        getParams().clear();
        getParams().addAll((Collection<? extends Param>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.VAL_PARAM__BIND_ID:
        setBindID(BIND_ID_EDEFAULT);
        return;
      case FortXTransPackage.VAL_PARAM__BRACK:
        setBrack(BRACK_EDEFAULT);
        return;
      case FortXTransPackage.VAL_PARAM__PARAMS:
        getParams().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case FortXTransPackage.VAL_PARAM__BIND_ID:
        return BIND_ID_EDEFAULT == null ? bindID != null : !BIND_ID_EDEFAULT.equals(bindID);
      case FortXTransPackage.VAL_PARAM__BRACK:
        return BRACK_EDEFAULT == null ? brack != null : !BRACK_EDEFAULT.equals(brack);
      case FortXTransPackage.VAL_PARAM__PARAMS:
        return params != null && !params.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (bindID: ");
    result.append(bindID);
    result.append(", brack: ");
    result.append(brack);
    result.append(')');
    return result.toString();
  }

} //ValParamImpl
